<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>再见,2021</title>
    <link href="/2022/0109/24084.html"/>
    <url>/2022/0109/24084.html</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="ce2b254d297ad44b0447ba4b686d1b88878de88c73cd47af4ebc7a73aa64bc36">e611f9c8fe7f252f9f232cb3ba0e4ca8eda305b4c8f1e54ea7cb9f3d6ce7c2d0c6c6a74fda18a6f1c4b0523bd4ea09d62a59446b0b0a6a881d23fce8eedc4c6f3b3b31325642fd3f34c816b46772ca38cb1f2bf92453866a68ccd11529240818662fe9b6e0762fdfde9439494f3f8bd4ec97cd62fa545956cddec6198de45704f51218b807131638354daf60f8f45e53674168c910fa42f0e611893e22e7e00b7d28d574e685976f9a0012c4fd4385364839b5609788f6c3926929cbfc6013cf1cfc091934cad0b2c25742d7e93feff6b5788709597b3e57831c6766e41876512bd5c15be6e5be615b4b88f46173691d32b236bb71fd377c1d9dbc21117bceefef69a0f94afb97ce7b69720cdfbbacc86f4de41c7237a8aedd64abc7b76bb342e4ff9e1aac50f2f4115462c7fdc5bc2c81907953a3bac8b09ad0cbcee555664acb5c12c6c41715690430cf1aec017e0380d18430a02176853fa89398bfe0ac3f7562468fc5cf69b49e881a748fe68ed0b9ce4020effe55347a3b8dfdf5f56c9b7f83ba32d5d31931dba20996ea448c89580d2bb115c1de85dde0f304afcd6e50fc9d306e465bcc9630eb854f6ec57fddf0d8c393a5492f888819150f097d55c198305772fc9c9c9a8bad37abfb0772f1c937e46a9c3f9442282f1a640184aef75ae881c47ca153cf0c985ab95394540d22dc2920ae0787df012ee02fc797285029a722cde1c851eb137ae17a67479b0c78ef4b1760b5663ce5c55a3f305d9f603ee69141a6db5aac0622238e4f910f77bfa5bd787bc937725e2f7a67ced592e3c33b030ccdb12d0fa924866fb10dda8f2a889cd2999fae4458ff76a2f9a5cea41b281803d253976c2e4f46b897d1720b3c61247f9737a0eb956f8c6262bf5020000758afc25ffc95c10da5fdf2d71443e77440be94a94d575afb8c12075e9b9541f9c56badc661481bfbf5102c72a80a555be282ba30a4d4902e497c18ecbc0f4361b9358d691fbd5f8a136d8051c5010057aaf0f0ed2b0d65ed3a741bfd16f619d5516d4d0a84306fc6826ad7f2730492cf78f750f96149da572e4ff77b44d3280ab97a84a971eb3c7ac0badfe7fab780fbef2181f18edfa5721eb160b8758977f43ab2a07c48962aa7fd23118fad2b8858b9e0538f6403f34589a531e17a420f5f8b78d5ddb6c8f92674d446cedd5117d859eb0f8c2ffb85c0d96c588e10a71b0cfcebfe68f248d44cee10f454638548b7757682495b5c59eb54db67490e0d00432ecb7938e7a9b67cf4ea692d00a26481f2b04087da4c9c78c5e93b3ec1b9fa97e2f3a525d11dccd8795cd8bd34be41be90580db3592e491231010cce83b7e4c0186c55783866b8a559a694adf3499c1f09b56894f8dc973791bdf5cbdb5c5d1426edde37cfde0162c2d3abd3667dc6a17c7475ffdad4ef4658ab4ede25710233bd5074dc5d61ac4b69697ff08e76dc070cfbde980bf10ab881dc83e4a897ce33481acba628ce23683cd5e9a0506c503c7ae545c24e23184c910fb341412572059813b720c9bb051d3a718b655520f5b944266cf6585d2b3ad268b13106ea232fcb5ceae730cb2c47b6d6a1ef477656cb7b0a3fa669e4244e7ce6ea75f73dc935b300a947e4baff81eda9d35958f57e89c3349721697f54b9fe5707aabcc88171d9806a98339dec3666cbd147d677e637584e7a1cf623fc902cf38a8d0283812d0b47dd95662fdedb787324d18dcf14313e952e167de1faf87da0d7e8cf64e16147fb1b5ead44718e72c127d00e0e3959cbdaa2ebbad5ca706f544f1d12245abfa57e68abca4893cd15f1577eeb132da4cc7127671c43fe3038ed29cdab13a573fe40333c9afd7e6ba8df14fa28bab92eb0662056d4e2738b5ffbf87bdbaac715cf10ea09a5e540b9ca631587e67125acf3c7242c43da383721251893ffcde7ad12437e035e9b7a50ce87938fc3494c40f93679f3beb782045087d177354c742cebe3a07bf94ee30cac1772650c855bec814d0c45f3eb5e945832ce807d74ae91c27fb2859800034c8f80b610b087a1b63bfdf96fa6d59b54df091e91cb815bb5d83027ab89e6ed167b8893d5fa8c8a5afcc26d6518432823178076442b6c6c9cd06140e37c3cca5fa9f1adbdba7ee820bfd7a1ca77bc505c011fc92ef9b3329cb95ec724743490d3845e3d07b07c92830bdc578978748a23e5d2dd5722dd30cf0dd22a810d86b20267e285c7aea257a7361ae67e4f987cc690e90a719d282782aa328376cdbbf0a39622adbf3fb10d58e5881fbd68f676863c386f99750733b49d72bb0dea4eb017cbe768e76c58b54010ddd19a946cc9b1f097f1a0f3d8a486c5e124c164f69de4e724c726998c124614488a3ed60fd178e4ed1980f6eb5a2551cc1d42b2c8d7c76a71157a66b65434a0b5397e996e2ff99f86ade68e971879be86b4d536b7e8164d749524bfdfc86861b13276a112744db748bcae7b942048ec105c4f2850fa56026d44b3da1a94fbf1f51349c29b6e9a369b3e73873f6f63f89c78c5bb55d025c5ba5f4768986cf2ad180fd9c309811e4449e9ed185d88b0b76bb918695a782376ba3a56a8b0a052d8ae8741ef844e3356879d496a4085793ea03f27a85190098c486900e528f351a9bbd85fbb373887b416fd3c974368280c55e2fbd4053953809e509d932972a785de8fe46cfbf3c55c60e05b11b5040118816e304bffabae339537be9a10ea34788d70309804221688551d5152262768001f6555d9d0d1ac5ccbf82bef6db3dfbe4a29429ed2cc498818d4865e435895017330d3a85c44055cbef251ead1dbfdca7cbe218b850542b26fe53742000e4268fc3edf162296950c43c633ed27152a18b9e9dc1bf877bc4fcd35ea3db714ec80d13a4851a6909647c5f6f97ca73c2d09cdc032efe65acaf19a51762360ea00bc2edcc1e8a937bd6999fbfdd28dbd25516b0da7a053d0d4e08d77a4bf89b85d4adcdd054c7e4b70092d09c9be310feadb76de620aa9eee2e10c9f2b51d6a2a6c267720714cabb6e66238d414b5ee8474b5847e87c33c51f5a7d28582eff4c43fcf699f38d110a7dfc2a688791dbbdc66f6cf10783e0773b1e22841f67b18a6f9cb4a9f5399e9f5816ebeacdee7a778358cf7d97b73e505c2db31f981704ee0e0846456df655f09d003898f9dbafc6561eeee462539d5de895062420f9c5395748ac519c0b3755ca16948cf86f9da2a84b70c00b9b8b71ebaf98c3ac10f0e06cae7fac5ee3ecb7214924b835dedc01a52209d191690ebed94b2d88ceb0492141bd9fe27c848a4bc9fa737d00daedc0b1f075f4fafea749ec8c32543129a1a7766b065b785bbf8739fa3e008c51b06ae94c57a92ebd232e9637cd0e2dde6d11c8dbfe92577e6471ce30371ff86683a5a7c2f14ec46aae2c138d7b130ad75b5c1bee659dd0e01526a38c9b8f26e5c81730d4fe19d1b6436d5bee39452a09bfcf33cc190b32e1902c35492a15497e84a250722a24b3fbab13d8fee166a17f0435acb76e9068e862b04ececa2677478965afdcf34056086e4b4ccd16cf2e19a8a7ca1eb95d32dec2c7f4d5bd2cfa37f3739af867c43199038eaa1ffb3745714170c3460d7c02b6d18cf78e89edbef65801826020314db12aa9e4051652dcc2af517324bcdc5888a377dddc07df23ad674652659ee1626bf7e3653536f1fce5fcf2b4e722c4e4f64633977bc5e3c8443781bf94c831d30e9ff7abb881ac84407128b688e94cafe74ab7dc0dd1dfafcc77cec5d99089e4c232408cf8e6d032b09e96ba61fbd3a4a7adb9e6346000ff9dfb047aefe7cd557b6f3b6c2014f374589195329b19ccc44486edb7e7c6abce45abebaac2fbe51ef417fbcc64af142f1c82eb157b37a9589fef4ca95a403ecb546f59a0a2cadabda7f2e634933adac902730ba74340f74c2bc2f28cb199657267f6e9e90ca4a4fabff18a371903d44348bd62e758612e9cf0f59f746c858b8c42d8a767180824c09e315b058ec17f5c231a9d1f5560403f154277b26de82378e6ef03f9c3249a728cfd6dbf1e50166468b3c1919f02f61df30005de2f7d3dd95c9ae5853a05715088dbfb2435771c43accf839a741ca97be21cb475762bb06c44fa74e05d98fc320e8b246beff874b93ba43406431e66e6fd6100b563cf579f5f097a0e48d325d29b0344f5a80bdd19270dfb623a0017cc2103411b4e4341c510be787239206332a7de5e00bfc5f3bf5c40c628d8663870baede2e2f1802cf8980eb10a4c16e2be894c0130c1ce24dc3c6380f7055137f0cef9b44712d017eba9f3e16bce7133ca15b4e4f21ada57401e04ee3fbf68638d4ee3065e8fd2da7fc1063f99d6f08a6f008303635a95a261f434c3b98c477a91770690ecb37efba0a3c9e0b725085718e86e8873e664f6b7e272c38e6769a27f9fc686c629d891c810a3e652ce4b2fac58775b8513fc1cdc783cb4dc8364fbc69efd0df4195aeabbd16d27fc718520d77b8bf8a392491cc4b3725260e059b2c47b3aee2312026e95d82396ffdaeb8fbc10201b66065770a8d3b07567c0bd3486d1ee473a8a53cb9817b85cfd8bcf1240818bc8565dc60738066d5b216026bc2246fd796bfd769e34327e815a69ec67f5665ea098bc25797eaede969b77369147e4ee1b0eb1e51a1b1646220fb41f1ae4cb7915bb5bd9710a38d4144621732a8deb8e34ae8f86a7eef6f53fb78098dee5bf33abd3b534c2dfcba0bfe94f14be1770261b28acd42e16b3cd6717262216c6e2ae1874409f6761d56a29afa217de7bea3ebfc072f8280638ecd874ff52b4fd1e6f71ab7a23dea076d3e9d775108c833452d02ae126d5b2a78aed9a96ccbd83e90b49533183d46c06c3e3d4cb8cdb6a3f80b3a1ddbc9d73a304ba1134ccdbfcbcfd3b8e33d137f42b77340f690d7d083ba70bc9f4b2741125c9eb5d024fc896a3633d339f091baa69a75e89e6423936671be5336e85589aa2101f9e0e3258b15942f292c3906d3da31303233c43276eabd43192a90e9f1e835d47139354347b05c8923c84e2a1a0e986c4dfe70299b4878df556a4a7ee037307479fa143888558f83bb8a058e5bff881d8b764e6775a1fc1b4bccca28b7852ea7bee877b87cbf5281ebd231d20936a9346cceea1196372e6677bd47662fac38b3645f9bd31f9517a3675805bb3c36a958d3176e83ef0ee89023ec8a48fb0e8a965c8c8cab188397fb4320d426f42b639ed7462e51961eb3758a737c7cb5344c465e0288159152147a175722dce9f4961cdfa47097ee543c27222b8f8295b367093661226afc7a30ce938c703e17fb6eb8fd0809b8b7835e847690a065adb8c7407ba6c1064c06036642c382eb1f49fef3a2885a2b9c7d83306764abede62c9220843d4d954d2ffab2d56c19aa63d89e871bdb3c183d7f8d6030db2a525cd1f503f3ac6cbbe551d3e3baf62806bd0389a380655bc9be2f8c8c11c179489b1b9641c895df3a6dcc7567645025cb97bf7d50741318857933755f79ae5860152159a610f05c10d61a6f0f8480a0a309cee62d783ec32a609b51b7a5470ede8439e1e693ac1d6ffc484fe1fb421761f8060aadb1ca5c405d8eecd8e4424caa5adf0e5350a02a666ed69324e83d5cf9eaf8e641e8cf6268a6d0418f0a2364da7b94c865d169f78ce8c6af2a330529a123e2ca0ac41422ea59d8f9b00287aef7704716adfa616e7d10f05211482bc54d025df1eb00e2271c6873792db1a5fda8fe05d5d1e4535a75edf891a0c87da315baa52ba6859dc05da109290b3a97495f5f30d0a3c99823924e743c693e7d6dab819d4f93341f35d318b3416d937da2a605a3eb7ce3167c37b334bf8cb9f972d7658685ecb47677834b1eeba5141b681696100ebd78a012171dffba20c01af0de2df6fbfc97b7e5255296304566910d0e55155e98a87bea9cb898fa0077c68c3f94679ecde36e9c6fbc1cc8c1beb61d82393171ed7fe5d6b78b6f8353a824860b68d6ad1d45cdf6ec2bf55868c6f4dddd89e56b1523ca91779ede37f3b56b36748cbbebb007a9d10e5ed50fa420dc86985529438a951aee6af8075bc762052b42697c57ef52c6ff3ad042df1a3c5087b13f13384ff10ce1e5ba224e09531651368e63046638946843fa17ea36439ccae0ea8e477855f1b6ce3891588a5950d18509a3684da4f08ebf661fc5711b88b7e2c97480a91296f67b0ea12f8422e24b36a87ad81378577ba5187b59bc0f1c87e1a560db9005cab04285bf092ed8871554ce28e2c2ac742d117a10163e532eae336e66eaf7b364b54a91460cae75a059eac7b36c4a3b70c3894328c509000942f5a8e2cdc57108741f05e3c574d56c072b33f2138bcad54597bea196f48daa8ae4dcc5f1c4048157c07d7510b9c9156fa7194ae2d7d0b4a4f4d795ce3a8d7bea7165258b91b4c4c3b222c7ed4d5e517f854612c75c0286caa02f57490192664c0586760601fa98527c5738f92728840d698d3a418000ff5186ff47abf639af10474beb7ae6b91cb166ef3ff4d23abdc5712b78756f5692b04884a39181395c72ada2d65c6933eee4f05d4cb4da2f1eb038fb56def96fa8ffe367e9fecdbe497b491cd0111a82bd53d47904afc6c7b9264094bd15183e14b194c8eb93765d1580627f5297aadc2af851fdc1e095016d74f1bf4fecb57c925ebb8886ecf1284eac68addbac7d406e88ad01689d27b82503b80fe9c715a492e13d682db6436c8cb793e5115c46078b1875763343b108b71ce449be869df26d0ea07b5e51cb23a702e5daabcb737f6c45736aeacce1e2989b0bb4cfc2460963e68a374d5ef10d0a96a7c8f4dcb59c1e3a98db2df8fd4954f4add36529aadce3fd6c690abf72847efd82a58034ba1bf0c2e0ee17698038a013fc114f368c7eb04f474757b065b1aee3a1b049afd4a7ddf1fec6897538175f90cc27afc9a450882ed0367e5dc1aed41dc964e7751b08606525b0ab6c29d44385fa57c09aa980ee7b429d9dd816cfa1b708bc677157814de29ea5defab70c00b05111c7c518e31d12e132112862c430843d5985234efac5aaf8f83043ca44f8f9a3508161e4077539ae7726c0e592075dca98fb307ba332df5e92ede2224f9c8ca38c3ff7538ed4951ac836095bc389595a6292cad68a8a1a39d58f853ade77d6908e4444b7d70d3e5126d1b86ef78db783b98bbdd1dc7b5f78bd928d37fdf521182cc0f702bd7e771cfd2f485926cb0fdcd97ec7923d6e7fa254ce6af41870e7029d324215733440f23bf674fc2017e8d8fcdd805f441b3f204589f5271907c4fea3212f8821df2a8c333be5b3bfd0aa01316b169ec738b9338b36c759a82fdd01a16cc2d2f1f7138d46a03866786eb0eb9b70be736cbb224a9e70497f190bb7fe458490265b28bd21eec85b0bc18f76885acab6de536e99f2ad97f99778235d44f51bcc8cdd7932beae6ba7ffd126088bc5277d0fefa94fe2bcbc2bf0ddace44c3964d6e1bd38dae43d48179c2a281f2edd6c0998301834b853e85d5e35bbbdcd751e1002c2e39ad892ec563306703d14ea3f152c8b623e83e5d23148ef9252e264b7b6b8055023becb40c613ce5bd85d83b3a71a133cb3aa0503f20966ec3f4c1af51df78aebcc10ecf66fa48782838f32df5b4f3df2b0d73aeaea2e6feb7a2ac01e9fb26595588a52ad4f3bb9c99a7e076f7b6c9eb7cd29fc2debc1d572c164b1854f1ad701d4121210433a25007a38cc2c5934bf94eddfaab0f8b3927a8023357f1e6ba56756315b6ac81eb0b22ef4e34ce3a43b6cbbbff37498b3dc66a90ac6e7b262a5fc164a50e8c1c255b9f651dc3e58ab00bd578a92406e8b3fc3df1cef75846a05af8da9aaa05c9a35a25c72ac53413548ea1a3489023a2a72719ca2a691e0864169ffd9b9d55607a4879ce6372524870d9c81522afa0cc8b08bc613800d9dfb7cecb9b853af7eb674eaa4e4dd038f9c6ff7ac0819a88e575a715249c14993f03a180e3395041b499b74ce68604a897a57a0274370a6949abe9286d22a6f92d6112635dbed71a6bb6703f384679a6c0533592b1ffee198bceb5cc01f8e7dd414138f2f1e04b0720488486fda0eed4d1eacc26efc33ca7a9c79cfd5d8a622508d2ad7c95e686ce44372da459eaa6c30ca5c7f9d0bfb15908ec340ab92bab0d4d02a5085ffba7732134f69eeb942512c343b131f10ccb523972f83fe2cc6b28ea05ae8bf090073962084f7dbfbcc64723e32ff78a0e635e66367b4fcea697d26eb3f4f0596af9f39657f0a33c0f5858eb9c2936cb20909c389cc04b9a9ce689fc3d8e5459232cf1a0368b23a7ff9d162068b7afc3d6295bb6cc2f24a2101ec9126d4d7a4ab69b704e41c714870eb24999cc8c8b2d497fff09f6c4e02273a62f492aabc6c58f746f01566e1652fe3dc78a72b3b54beb81e2247e511f402eaaa8ada922f2193906caef54022392c6d9f0c4fe00305ef81a9f1d8f9137fcc5ae93c29331e0d5a201744ac2da754e67abb20dedc916e063f62a27aa4d69689cc5ff4e494ecef211d23140a1631354d1227005e0e578ae194fa38d4d1537d7b8e43827dfa3c86ab549e1702b474ff9f7f3eebad22275cb41bc438aaa8be0a01e4f21325e11f1572db9819840e5e2c59b6768fe9683ebe9f65b4b58fd9181a2d7b124df26b8671d51d49eeeafb5774d22c4bcc57bc79a72566f4d0f57b38ea47c72cc5a23c0ec3da2c69402f60068555bda72906b9ad599284beee17322cbe88a7151cc77739135c85c3d2f8490e5bfca51d0e359a5be5c6d8d50def044a93d5ba92f129bacde8d874c4bd53b294ba5eee0831b6a10eaf56cdc8e02ea1fa0182cb1c8d89dc88edf52d30bf000db395641efc87c7312fcf718d19c19cbcd5929b3473b7d521292748e25e82752272af9a303d266e9c1c5a94a7ae0d63130b43af3c31b199a7bcce87c58587dc1f1a8b44fc1ce53101cc3ef74b5b3d247ff7ef3d88b4105eae8b7f705c21c0078749a758a71b14d337e4d616ac7ecafbe7a71d27551619deffbed79b40b3569d2146f8399d79eef45e1ef12c3eb8aec49121cf9a238d220f0696c8f8dcdb5c43978e949f439ef4438f49c9be98f849cad5913a44fdf5c416e0444c0bc4550ee9cf522af36fbefa6659966b86add5dbc6d7742361ea76f1617e4900f0298f4f5fa43a1626414473d42b20f7dc17600df776311fab3b1e3d409ce4b529e25ca33690481089bd6cee9a1d8e62162273c796bf87280bf788903e343ab68aad5581b01e53535030106b692512ff6a4c0809524423e3e5230a871cf3a035cc17525a04c501d5846a6a30a51872f14cb713a8af27799093248e39fe59a4a9fed92377f27179f5f6051018058d2fde76ea3c8986a3876f1e4ab4b2780f8246bf72ec09628a4462bb742f7b988c13541e894daac83e222c43154d48256f0ac69eda9d3f19b0976b92df490dec97b7ab38a1cecce1d2485b0f6111c4d489fda408d160e956e1f2fed185b36dde59f91eac7579d9d4aa93a6c5ea21613023bf2238848c28a3b4fcea30882e4b0dd8e72c82f952e68de92fedcab77c49a199cc5d1870f52a02a8dc8f053fa83f6e8de953dcf74892b152dee6896f68f48b242c550f54ce073a5f328eb6cde951b4a0776f8bc1316a7e66d19cfd7be59580ae4c5d34b699bd185cb6e6abf5cd1539bc915ab0213c83758183a9bccfbeaa52ca3de075d2ca81079dc468176d607eb28c14ff868f07d4dffed7cb422e81225900d3737e3965d7d7d55df76bf076f3e4f4c4bf0d2ef0057d9f005941e8de9ea4145ea0bd9771b624205427bfe7efd0b695e11c7b30f8767b651fa2633c338ef43ba7dae251e2ee665ab0ed375514b8c60e812d37a809847426a49ffd72a0cb06b253738c54b47961febc68d24d3f397f2587f093064ee33abcf41974bf9f88d598583d9917c2da1e88be9f89f38c84bd9098fb4ac651048ba25bd66e7e2aff41f21223fed0abdc01bbd4fbc24b6a45270f549f15d919aff0ed64b793c14e3ce48edf1766225d95a08f5dc24f355d049d97f2cb1c01c225cb42968fac972f7d96ad93f3751e7d05a7cefac6d9cdac434a03054b41393df61355fbbc2513188390efb4bfc3fc6de32e0fc2cafbf2482a4dba1eb29cf4bb1b17283305f2ac375d53eeaea5b3603bf86eebf8ed571509431b2100543411114c7cdcc0c6c9b271563c210838b9f29e571990b78171bdb3ab7b3a9cef56fd7faabf1e317415892a74810812ad47ecb1ed7626ddb4b8785263e528e6ffe8f27f42ca68d9723543b919ec8a3ecef2a2b201706661429e20402fca687ceba513a757d786c1da5c54a12f83944c6fe4d33453dbb9d97e28ea2f5e90aff4d80f4abc35446e2d535a83caccbb6ad2b4ae048f2ae71bd09fb4d5bd679eaaa8354e5cbf8a913b9c4fe8ae2850fbdf4706cf51856ed064ed066c50ec1bb9ae69ddb67f93d2b9ce8fe2e20c2a593a578180157ea32197dddbac5ea41858c</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/0828/16107.html"/>
    <url>/2021/0828/16107.html</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo server<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo generate<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></div></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    <categories>
      
      <category>测试</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Code</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>记一次博客部署</title>
    <link href="/2021/0820/53427.html"/>
    <url>/2021/0820/53427.html</url>
    
    <content type="html"><![CDATA[<h1 id="一次博客部署的经历"><a href="#一次博客部署的经历" class="headerlink" title="一次博客部署的经历"></a>一次博客部署的经历</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在六七月份前前后后花了一个多月写一个博客项目，但是我还没有在真实环境部署过项目的经历，正好现在已经部署完了，就把部署过程写下来吧，以后忘记怎么部署了还可以看看。:)</p><h2 id="二、服务器-域名购买"><a href="#二、服务器-域名购买" class="headerlink" title="二、服务器/域名购买"></a>二、服务器/域名购买</h2><p>考虑到国内的服务器和域名还是比较便宜的，所以就选择了在国内购买服务器和域名。我购买的是阿里云的服务器以及域名。</p><p>为域名配置好了 <code>www</code> 记录，让域名指向我购买的服务器 <code>IP</code> 地址。</p><h2 id="三，服务器相关配置"><a href="#三，服务器相关配置" class="headerlink" title="三，服务器相关配置"></a>三，服务器相关配置</h2><p>购买服务器的第一件事就是配置 <code>ssh</code> 远程连接。首先修改服务器的 <code>/etc/ssh/sshd_config</code>，修改如下配置。</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-comment"># 禁止密码登录</span><br>PasswordAuthentication no<br><span class="hljs-comment"># 关闭 root 登录</span><br>PermitRootLogin no<br><span class="hljs-comment"># 修改 ssh 端口</span><br>Port 2022<br></code></pre></div></td></tr></table></figure><p>这些配置防止一些频繁的暴力破解攻击，接下来在本地生成公私钥对。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 如果没特殊需求可以一路回车</span><br>ssh-keygen -t rsa<br></code></pre></div></td></tr></table></figure><p>把私钥留在本地，上传公钥到服务器，并且将公钥中的内容导入 <code>.ssh/authorized_keys</code> 中。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">scp .ssh/id_rsa.pub root@xx.xx.xx.xx:/root/. <br><br>cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br></code></pre></div></td></tr></table></figure><p>这个时候还不可以登录，因为修改了默认的 22 端口，默认 22 是被阿里云的安全组放行的，但我修改的端口是没被阿里云的安全组放行的，所以要配置安全组规则。</p><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 2022，源为：<code>0.0.0.0/0</code>，保存。</p><p>重启 <code>ssh</code> ，退出服务器，采用密钥登录。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">service ssh restart<br><br><br><span class="hljs-meta">#</span><span class="bash"> 采用密钥登录</span><br>ssh -i ~/.ssh/id_rsa root xx.xx.xx.xx<br><br>vim /etc/ssh/ssh_config<br><span class="hljs-meta">#</span><span class="bash"> 取消下面这行的注释，配置私钥默认路径</span><br>IdentityFile ~/.ssh/id_rsa<br></code></pre></div></td></tr></table></figure><p>当然有了这些还不够，所以还可以使用 <code>fail2ban</code> 来做更强力的防护。</p><p>安装 <code>fail2ban</code>。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install fail2ban<br></code></pre></div></td></tr></table></figure><p>检查 <code>fail2ban</code> 是否启动</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo systemctl status fail2ban<br></code></pre></div></td></tr></table></figure><p>在 <code>/etc/fail2ban/jail.d/</code> 中创建一个 <code>sshd.local</code>，也就是创建一个新的监狱规则。<code>fail2ban</code> 最终会读取这个 监狱配置。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[sshd]<br><span class="hljs-meta">#</span><span class="bash"> 是否启用，不启用则为 <span class="hljs-literal">false</span></span><br>enabled = true<br><br><span class="hljs-meta">#</span><span class="bash"> 如果 SSH 是其他端口，需要在这里修改</span><br>port = ssh<br><br><span class="hljs-meta">#</span><span class="bash"> 存储日志文件的路径</span><br>logpath = %(sshd_log)s<br><br><span class="hljs-meta">#</span><span class="bash"> 最大尝试次数</span><br>maxretry = 3<br><br><span class="hljs-meta">#</span><span class="bash"> 拦截时间</span><br>bantime = 172800<br><br><span class="hljs-meta">#</span><span class="bash"> 过滤规则</span><br>filter = sshd<br><br><span class="hljs-meta">#</span><span class="bash"> 过滤的时长（秒）</span><br>findtime = 3600 <br><br><span class="hljs-meta">#</span><span class="bash"> 执行的动作</span><br>action = iptables[name=SSH, port=ssh, protocol=tcp]<br></code></pre></div></td></tr></table></figure><p>重启 <code>fail2ban</code>，并且查看规则。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">fail2ban-client reload<br><br>fail2ban-client status sshd <br></code></pre></div></td></tr></table></figure><h2 id="三，项目部署"><a href="#三，项目部署" class="headerlink" title="三，项目部署"></a>三，项目部署</h2><p>在本地进行 <code>maven</code> 打包，并且上传到服务器。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">maven package<br><br>scp target/MyBlog.jar  root@xx.xx.xx.xx:/root/.<br></code></pre></div></td></tr></table></figure><p>在服务器中安装 <code>jre</code>，由于只是每次部署到服务器的都是编译好的，所以只需安装 <code>jre</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">apt-get install default-jre<br></code></pre></div></td></tr></table></figure><p>安装数据库，这里安装的是 <code>mariadb</code> 数据库。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">apt-get install mariadb-server <br></code></pre></div></td></tr></table></figure><p>进行 <code>mariadb</code> 初始化。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo mysql_secure_installation<br></code></pre></div></td></tr></table></figure><p>修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>  配置数据库的字符集编码。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">[client]<br>default-character-set=utf8<br><br>[mysqld]<br>character-set-server=utf8<br>collation-server=utf8_general_ci<br><br>[mysql]<br>default-character-set=utf8<br></code></pre></div></td></tr></table></figure><p>由于高版本 (8) 的 <code>mysql</code> 加密规则是 <code>caching_sha2_password</code>，会导致普通用户连接不上，所以这里修改加密规则为 <code>mysql_native_password</code>，首先以 <code>root</code> 环境登录进 <code>mysql</code> 交互终端，执行以下命令。</p> <figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">UPDATE mysql.user SET plugin &#x3D; &#39;mysql_native_password&#39; WHERE user &#x3D; &#39;root&#39; AND plugin &#x3D; &#39;unix_socket&#39;;<br>FLUSH PRIVILEGES;<br></code></pre></div></td></tr></table></figure><p>退出 <code>mysql</code> ，重启。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo /etc/init.d/mysql restart <br></code></pre></div></td></tr></table></figure><p>创建相应的数据库并且导入相应的数据库脚本和数据脚本。</p><p>由于每次启动都需要写很长的命令，所以写一个脚本，方便运行。</p><p>启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>name=MyBlog.jar<br>nohup java -jar $&#123;name&#125; &amp;<br></code></pre></div></td></tr></table></figure><p>暂停脚本：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash">!/bin/bash</span><br>port=8080<br><span class="hljs-meta">#</span><span class="bash">根据端口号查询对应的pid</span><br>pid=$(netstat -nlp | grep :$port | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;);<br><br>echo &quot;pid=$pid&quot;<br><span class="hljs-meta">#</span><span class="bash">杀掉对应的进程，如果pid不存在，则不执行</span><br>if [  -n  &quot;$pid&quot;  ];  then<br>    echo &quot;正在执行kill命令...&quot;<br>    if kill  -9  $pid; then<br>       echo &quot;执行成功&quot;<br>    fi<br>fi<br></code></pre></div></td></tr></table></figure><p>更改 <code>start.sh</code> 和 <code>stop.sh</code> 的权限。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">chmod u+x start.sh<br>chmod u+x start.sh<br></code></pre></div></td></tr></table></figure><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 8080，源为：<code>0.0.0.0/0</code>，保存。</p><p>执行 <code>start.sh</code> 脚本，打开浏览器输入服务器 <code>IP</code> 地址 + 8080，即能看到效果。</p><h2 id="四，反向代理与HTTPS"><a href="#四，反向代理与HTTPS" class="headerlink" title="四，反向代理与HTTPS"></a>四，反向代理与HTTPS</h2><p>为了让项目更好的访问以及安全性，接下来配置 <code>nginx</code> 和 <code>https</code>，不过这两个前提都是，服务器需要先备案。</p><h3 id="1-备案"><a href="#1-备案" class="headerlink" title="1. 备案"></a>1. 备案</h3><p>首先域名是要进行实名认证的，才能进行 <code>ICP</code> 备案，这个实名认证很快。</p><p>然后找到阿里云中的 <strong>备案服务号申请</strong>，右侧是 <code>ECS</code> 名称，在下方列表中选择当前实例，进行申请。</p><blockquote><p>基本都是填一下基本个人信息进行核验，然后就是一些主办者信息(我这里主办者是个人)，网站信息，就是描述这个网站是干什么用的( 由于我写的是博客相关的关键字，后来有客服来打电话帮我修改= = )，后面就是上传个人身份证正反面以及人脸识别，最后信息校验，进入 <code>ICP</code> 备案初审。</p><p>差不过隔了一天，就收到了 <strong>阿里云</strong> 的短信，提示备案订单已经提交交管局审核，去工信部验证页面使用刚才的短信验证码验证。</p><p>隔天之后，收到 <strong>工信部</strong> 的短信，告诉我备案已经成功并且给了备案号，这个需要放入网站的底部中间位置。</p></blockquote><h3 id="2-Nginx-配置与安装"><a href="#2-Nginx-配置与安装" class="headerlink" title="2. Nginx 配置与安装"></a>2. Nginx 配置与安装</h3><p><code>nginx</code> 安装：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">apt-get install nginx<br></code></pre></div></td></tr></table></figure><p>修改 <code>/etc/nginx/nginx.conf</code>，加入以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server &#123;<br>    listen 80;<br>    server_name youdomain;<br>    <br>    location / &#123;<br>        proxy_pass http://127.0.0.1:8080; # 端口要对应<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>        proxy_set_header X-Forwarded-Port $server_port;<br>        &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>重启 <code> nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo nginx -s reload<br></code></pre></div></td></tr></table></figure><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 80，源为：<code>0.0.0.0/0</code>，保存。</p><p>打开浏览器，输入 域名 即可访问到网站，但此时还不是 HTTPS 的 </p><h3 id="3-HTTPS-配置"><a href="#3-HTTPS-配置" class="headerlink" title="3. HTTPS 配置"></a>3. HTTPS 配置</h3><p>要配置 <code>https</code> 首先要有 <code>ssl</code> 证书，这里证书是通过阿里云免费获取。</p><p><img src="https://segmentfault.com/img/bV2L74?w=2398&h=1424" alt="clipboard.png"></p><p>当申请完成后，在证书管理的列表中选择已申请的证书，进行下载，选择 <code>nginx</code> 格式下载。</p><p>上传到服务器的 <code>/usr/local/nginx/cert</code> 下，一个文件为 <code>pem</code> 后缀的，一个文件为 <code>key</code> 后缀的。</p><p>修改 <code>/etc/nginx/nginx.conf</code> 配置。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">server &#123;<br>    listen 80; #监听80 http 重定向到https<br>    server_name you domain;<br>    # 强制转到 https<br>    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;<br>&#125;<br><br>server &#123;<br>    listen 443 ssl; #监听443 https<br>    server_name you domain; #配置域名<br>    ssl_certificate cert/xxx.pem; #配置证书位置<br>    ssl_certificate_key cert/xxx.key; #配置证书位置<br>    location / &#123;<br>        proxy_pass http://localhost:8080; # 要反向代理的服务器<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>        proxy_set_header X-Forwarded-Port $server_port;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>重启 <code> nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo nginx -s reload<br></code></pre></div></td></tr></table></figure><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 443，源为：<code>0.0.0.0/0</code>，保存。</p><p>打开浏览器，输入 <code>https:// + 域名</code> ，就可以看到右上角的小绿锁咯。</p>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>SpringBoot</tag>
      
      <tag>Nginx</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅谈上下文</title>
    <link href="/2021/0326/10778.html"/>
    <url>/2021/0326/10778.html</url>
    
    <content type="html"><![CDATA[<h1 id="上下文管理器"><a href="#上下文管理器" class="headerlink" title="上下文管理器"></a>上下文管理器</h1><p>写 <code> Python</code> 也好久了，在编写代码时，通常会用到一个表达式，<code>with .... as .....</code>，其中用的最多的可能是打开文件的时候使用这个表达式，但是却没想过为什么要这样写，或者这样写有什么方便之处，今天就来复习一下。</p><h2 id="一、上下文管理器"><a href="#一、上下文管理器" class="headerlink" title="一、上下文管理器"></a>一、上下文管理器</h2><p>何为上下文，在自然语言中，给你一段话，如果没有在上文和下文的情况下，你无法判断这段话在讲什么，也看不懂；这在计算机里也是如此，当一个程序独立存在的时候，它不依赖任何外部的数据或变量，此时它就不存在上下文，但是当多个程序关联起来，互相引用各自的数据或变量时，那么每个程序都不能独自运行了，这个时候就需要一个上下文，来管理这些各自的外部数据和变量。</p><p>而在 <code>Python</code> 中，则有了一个上下文管理器的概念，是指实现了 <code>__enter__()</code> 方法和 <code>__exit__()</code>方法的对象；同时上下文管理器的存在也是为了管理 <code>with</code> 语句。</p><h2 id="二、with-表达式的使用"><a href="#二、with-表达式的使用" class="headerlink" title="二、with 表达式的使用"></a>二、<code>with</code> 表达式的使用</h2><p>在 <code>with</code> 表达式出现之前，对于资源的管理通常使用三段式的方式来实现，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 打开文件</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># 打印异常堆栈</span><br>    print(e)<br><span class="hljs-keyword">finally</span>:<br>    <span class="hljs-comment"># 关闭文件</span><br>    f.close()<br></code></pre></div></td></tr></table></figure><p>当运行发生异常的时候，<code>finally</code> 块里的代码会确保资源被正常的关闭，以此来引发内存泄漏，或者是下面这种实现方式：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-comment"># 打开文件</span><br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-comment"># 打印异常堆栈</span><br>    print(e)<br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-comment"># 关闭文件</span><br>    f.close()<br></code></pre></div></td></tr></table></figure><p>当资源被正确打开时，没发生异常的情况下，代码最终回到 <code>else</code>块，而资源会被正确的关闭。由此可见这样的代码是写的非常长的，同时对资源的管理，异常的捕捉又不是十分方便，这个时候 <code>with</code> 语句就派上用场了。</p><p>使用<code>with</code> 语句，可以优雅的实现资源的关闭，如下代码所示。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;some.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    print(f.read())<br>print(f.closed)<br><span class="hljs-comment"># True</span><br></code></pre></div></td></tr></table></figure><p>在<code>with</code> 语句中使用 <code>open</code>函数时，完全不必担心打开的文件会没关闭，因为离开<code>with</code>语句块之后，此时打印<code>f.closed</code>已经可以看到为<code>True</code>，为何 <code>open</code> 函数能在 <code>with</code>语句里面做到自动关闭文件的操作，因为它内部实现了 <code>__enter__()</code> 和 <code>__exit__()</code>方法。</p><h2 id="三、实现自定义上下文管理器"><a href="#三、实现自定义上下文管理器" class="headerlink" title="三、实现自定义上下文管理器"></a>三、实现自定义上下文管理器</h2><p>实现自定义上下文的前提是，要在自定义类里面实现 <code>__enter__()</code> 方法和 <code>__exit__()</code> 方法。</p><ul><li><code>__enter__()</code>：当<code>with</code>语句块运行后， 会在上下文管理器对象里执行<code>__enter__()</code> 方法，通常情况下，这个方法应该返回一个赋值给 <code>as</code> 后变量的对象，默认情况下为 <code>None</code>，同时这个是可选的，如果不需要返回，那么同时也不需要使用 <code>as</code> 语句。标准上来说应该返回<code>self</code>。</li><li><code>__exit__()</code>：当<code>with</code> 语句结束后，上下文管理器会调用<code>__exit__()</code>方法，效果等同于<code>finally</code>关键字。</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">File</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, mode, filename</span>):</span><br>        self.filename = filename<br>        self.mode = mode<br>        self.file = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__enter__</span>(<span class="hljs-params">self</span>):</span><br>        print(<span class="hljs-string">&quot;__enter__&quot;</span>)<br>        self.file = <span class="hljs-built_in">open</span>(self.filename, self.mode)<br>        <span class="hljs-keyword">return</span> self.file<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__exit__</span>(<span class="hljs-params">self, exec_type, exec_val, exec_tb</span>):</span><br>        print(<span class="hljs-string">&quot;__exit__&quot;</span>)<br>        <span class="hljs-keyword">if</span> self.file <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self.file.close()<br>        <br><br><span class="hljs-keyword">with</span> File(<span class="hljs-string">&#x27;some.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br>    print(data)<br><br>print(f.closed)<br><span class="hljs-comment"># True</span><br></code></pre></div></td></tr></table></figure><p>当程序进入 <code>with</code> 语句块之后，<code>__exit__()</code> 方法会帮我们处理好异常，但是 <code>__exit__()</code>语句需要接受4个参数，第一个是 <code>self</code>，其他三个参数分别是异常类型，异常属性，异常跟踪信息。</p><h2 id="四、使用装饰器实现上下文管理器"><a href="#四、使用装饰器实现上下文管理器" class="headerlink" title="四、使用装饰器实现上下文管理器"></a>四、使用装饰器实现上下文管理器</h2><p>如果只是为了创建一个上下文管理器而创建一个类的话，未免也太麻烦了，这个时候 <code>contextlib </code>  的  <code>contextmanager</code> 装饰器就起到了作用，使用这个装饰器可以轻松的在函数上实现上下文管理器，同时它采用的是生成器的实现方式； 以下是代码示范。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">file</span>(<span class="hljs-params">filename, mode</span>):</span><br>    f = <span class="hljs-built_in">open</span>(filename, mode)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> f<br>     <span class="hljs-keyword">finally</span>:<br>file.close()<br><br><span class="hljs-keyword">with</span> file(<span class="hljs-string">&#x27;some.text&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br>    print(data)<br><br>print(f.closed)<br><span class="hljs-comment"># True</span><br></code></pre></div></td></tr></table></figure><h2 id="五、异步上下文装饰器"><a href="#五、异步上下文装饰器" class="headerlink" title="五、异步上下文装饰器"></a>五、异步上下文装饰器</h2><p> 前面的都是基于同步的上下文管理器，<code>contextlib</code> 里还提供了异步的上下文管理器，使用 <code>asynccontextmanager</code> 实现，同样的，这个方法需要放在异步的方法上，才会起作用。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> asynccontextmanager<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-meta">@asynccontextmanager    </span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">web_crawler</span>(<span class="hljs-params">url</span>):</span>    <br>    data = <span class="hljs-keyword">await</span> get_page(url)  <br>    <span class="hljs-keyword">yield</span> data  <span class="hljs-comment"># 4</span><br>    <span class="hljs-keyword">await</span> save_content(url)    <br> <br><span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> web_crawler(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>) <span class="hljs-keyword">as</span> data:  <br>    print(data)<br><br>asyncio.run(web_crawler())<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>学习笔记</category>
      
    </categories>
    
    
    <tags>
      
      <tag>上下文</tag>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入Flask配置</title>
    <link href="/2020/0710/46196.html"/>
    <url>/2020/0710/46196.html</url>
    
    <content type="html"><![CDATA[<h1 id="深入Flask配置"><a href="#深入Flask配置" class="headerlink" title="深入Flask配置"></a>深入Flask配置</h1><p>在Flask中，提供了丰富的全局配置来方便开发，以下是开发过程当中几个常用的配置选项。</p><table><thead><tr><th>配置名</th><th>作用</th></tr></thead><tbody><tr><td>DEBUG</td><td>启用/禁用调试模式</td></tr><tr><td>SECRET_KEY</td><td>密钥</td></tr><tr><td>SERVER_NAME</td><td>服务器名和端口。需要这个选项来支持子域名 （例如： <code>&#39;myapp.dev:5000&#39;</code> ）。注意 localhost 不支持子域名，所以把这个选项设置为 “localhost” 没有意义。设置 <code>SERVER_NAME</code> 默认会允许在没有请求上下文而仅有应用上下文时生成 URL</td></tr><tr><td>SESSION_COOKIE_NAME</td><td>会话 cookie 的名称。</td></tr></tbody></table><p>更多的配置详见<a href="http://docs.jinkan.org/docs/flask/config.html">官方文档</a>。</p><p>如果要在 <code>Flask</code> 中激活某些的配置，通常有以下8种方式，前面的两种都是针对某个单独配置。第三种方式，就是采用字典的更新键值对的方法，因为 <code>Config</code> 类本身就是继承自字典，所以同时也继承了字典的 <code>update</code> 方法。 而后面的几种方式，则可以对多个配置项进行处理。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">app.debug  = <span class="hljs-literal">True</span><br>app.config[<span class="hljs-string">&quot;debug&quot;</span>] = <span class="hljs-literal">True</span><br>app.config.update()<br>app.config.from_envvar()<br>app.config.from_json()<br>app.config.from_mapping()<br>app.config.from_pyfile()<br>app.config.from_object()<br></code></pre></div></td></tr></table></figure><p>下面谈谈其他几种方法的内部操作以及原理。</p><h2 id="一、Config-配置类的创建过程"><a href="#一、Config-配置类的创建过程" class="headerlink" title="一、Config 配置类的创建过程"></a>一、<code>Config</code> 配置类的创建过程</h2><p>首先 <code>Config</code> 类是在 <code>flask/config.py</code> 文件里面。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 从这里可以看出 Config类 继承了 dict</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>(<span class="hljs-params"><span class="hljs-built_in">dict</span></span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span>(<span class="hljs-params">self, root_path, defaults=<span class="hljs-literal">None</span></span>):</span><br>        <span class="hljs-built_in">dict</span>.__init__(self, defaults <span class="hljs-keyword">or</span> &#123;&#125;)<br>        self.root_path = root_path<br></code></pre></div></td></tr></table></figure><p>下面是 <code>flask/app.py</code> 里面的 <code>Flask</code> 类，由于这个类的代码数量庞大，所以只贴出一点用到了 <code>Config</code> 类的地方。</p><p>可以看到 <code>default_config</code>  是一个 <code>ImmutableDict</code> <strong>（不可变字典对象）</strong>，里面是所有支持的配置项，并且都给出了默认值。</p><p>而 <code>Config</code> 类会被赋值给 <code>Flask</code> 的成员对象 <code>config_class</code>，但此时这个成员对象，也就是字典对象，还没有任何数据；所以要通过 <code>Flask</code> 的 <code>make_config</code> 来为 <code>config_class</code> 赋值字典数据，而此时传入的配置就是 <code>defaults</code>，包包含了  <code>Flask</code> 全部配置项。  初始时的两个配置项 <code>ENV</code> 和 <code>DEBUG</code> 会通过 <code>get_env()</code> 方法 和 <code>get_debug()</code> 方法设置为 <code>production</code> 和 <code>False</code>。 </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flask</span>(<span class="hljs-params">_PackageBoundObject</span>):</span><br>    <span class="hljs-comment"># 这里的 Config 类就是 flask/Config.py 下面的 Config 类</span><br>    config_class = Config<br>    <br>    <span class="hljs-comment"># 所有支持的配置项</span><br>    default_config = ImmutableDict(<br>        &#123;<br>            <span class="hljs-string">&quot;ENV&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;TESTING&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;PROPAGATE_EXCEPTIONS&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;PRESERVE_CONTEXT_ON_EXCEPTION&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;PERMANENT_SESSION_LIFETIME&quot;</span>: timedelta(days=<span class="hljs-number">31</span>),<br>            <span class="hljs-string">&quot;USE_X_SENDFILE&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;SERVER_NAME&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;APPLICATION_ROOT&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_NAME&quot;</span>: <span class="hljs-string">&quot;session&quot;</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_DOMAIN&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_PATH&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_HTTPONLY&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_SECURE&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_SAMESITE&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SESSION_REFRESH_EACH_REQUEST&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;MAX_CONTENT_LENGTH&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SEND_FILE_MAX_AGE_DEFAULT&quot;</span>: timedelta(hours=<span class="hljs-number">12</span>),<br>            <span class="hljs-string">&quot;TRAP_BAD_REQUEST_ERRORS&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;TRAP_HTTP_EXCEPTIONS&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;EXPLAIN_TEMPLATE_LOADING&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;PREFERRED_URL_SCHEME&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>,<br>            <span class="hljs-string">&quot;JSON_AS_ASCII&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;JSON_SORT_KEYS&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;JSONIFY_PRETTYPRINT_REGULAR&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;JSONIFY_MIMETYPE&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>            <span class="hljs-string">&quot;TEMPLATES_AUTO_RELOAD&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;MAX_COOKIE_SIZE&quot;</span>: <span class="hljs-number">4093</span>,<br>        &#125;<br>    )<br>    <br>    <span class="hljs-comment"># 返回初始完毕的配置类</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">make_config</span>(<span class="hljs-params">self, instance_relative=<span class="hljs-literal">False</span></span>):</span><br>        root_path = self.root_path<br>        <span class="hljs-keyword">if</span> instance_relative:<br>            root_path = self.instance_path<br>        defaults = <span class="hljs-built_in">dict</span>(self.default_config)<br>        defaults[<span class="hljs-string">&quot;ENV&quot;</span>] = get_env()<br>        defaults[<span class="hljs-string">&quot;DEBUG&quot;</span>] = get_debug_flag()<br>        <span class="hljs-keyword">return</span> self.config_class(root_path, defaults)<br></code></pre></div></td></tr></table></figure><h2 id="二、从环境变量中读取配置属性"><a href="#二、从环境变量中读取配置属性" class="headerlink" title="二、从环境变量中读取配置属性"></a>二、从环境变量中读取配置属性</h2><p>当在环境变量中设置了配置文件的环境变量，那么则可以使用这个方法。</p><p>首先是使用 <code>os</code> 模块的 <code>environ.get()</code> 方法来获取环境变量属性值，而后再调用另一个方法，这个环境变量的属性值是一个文件路径，通常的话，这个配置文件应该方法在和启动文件在同一个路径下。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_envvar</span>(<span class="hljs-params">self, variable_name, silent=<span class="hljs-literal">False</span></span>):</span><br>        rv = os.environ.get(variable_name)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> rv:<br>            <span class="hljs-keyword">if</span> silent:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">raise</span> RuntimeError(<br>                <span class="hljs-string">&quot;The environment variable %r is not set &quot;</span><br>                <span class="hljs-string">&quot;and as such configuration could not be &quot;</span><br>                <span class="hljs-string">&quot;loaded.  Set this variable and make it &quot;</span><br>                <span class="hljs-string">&quot;point to a configuration file&quot;</span> % variable_name<br>            )<br>        <span class="hljs-keyword">return</span> self.from_pyfile(rv, silent=silent)<br></code></pre></div></td></tr></table></figure><p>在项目的同目录下创建一个 <code>config.cfg</code> 配置文件，写入两个简单的配置项。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">DEBUG=True<br>SECRET_KEY=&quot;something&quot;<br></code></pre></div></td></tr></table></figure><p>使用os模块临时设置一个环境变量，当从环境变量中读取到配置文件后，在网页中能打印到配置属性的值。</p><p>还有一种办法是(针对 <code>Linux</code> 环境)，新开一个终端，切换到项目的目录下，在启动项目前，先使用 <code>export FLASK_CONFIG=config.cfg</code>，然后启动文件里面只需要写 <code>app.config.from_envvar(&quot;FLASK_CONFIG&quot;)</code>就可以，当然使用 <code>export</code> 设置的也只是一个临时变量，只对目前的终端有效。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br>os.environ.setdefault(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>, <span class="hljs-string">&quot;config.cfg&quot;</span>)<br><br>app.config.from_envvar(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></div></td></tr></table></figure><p>我比较在意的是这个 <code>silent</code> 参数， 这个参数的含义是，当配置文件丢失时，或者环境变量没有设置时，设置 <code>silent</code> 参数为True，那么就等于没有配置这个文件。</p><p>那么可以写一个函数来检测这个配置文件是否存在，是否设置环境变量，当两个都没有时，返回 <code>True</code>，然后 <code>from_envvar</code> 方法将会不起作用，触发异常。</p><p>下面是一个简单的例子。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_set</span>():</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.environ.get(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;config.cfg&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>app.config.from_envvar(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>, silent=is_set())<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span></span><br><span class="hljs-function">    <span class="hljs-title">return</span> &quot;<span class="hljs-title">DEBUG</span> %<span class="hljs-title">s</span> <span class="hljs-title">SECRET_KEY</span> %<span class="hljs-title">s</span>&quot; % (<span class="hljs-params">app.config.get(<span class="hljs-params"><span class="hljs-string">&quot;DEBUG&quot;</span></span>), app.config.get(<span class="hljs-params"><span class="hljs-string">&quot;SECRET_KEY&quot;</span></span>)</span>)</span><br><span class="hljs-function"></span><br>if __name__ == &quot;__main__&quot;:<br>    app.run()<br></code></pre></div></td></tr></table></figure><p>针对 <code>silent</code> 参数，写出一个方法来最终决定 <code>silent</code> 的值，这样防止了中间环境变量配置出错以及文件不存在等等情况。</p><h2 id="三、-从-python-文件中读取配置属性"><a href="#三、-从-python-文件中读取配置属性" class="headerlink" title="三、 从 python 文件中读取配置属性"></a>三、 从 <code>python</code> 文件中读取配置属性</h2><blockquote><p>  当创建一个 <code>Flask</code> 的实例对象之后，使用 <code>app.config.from_pyfile</code> 方法，传入一个配置文件字符串，从配置文件中读取属性并且写入，前面的 <code>from_envvar</code> 方法获取到配置文件后最终也会调用这个方法，并且，这个方法最终也会调用下一个方法 <code>from_object</code>。</p></blockquote><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C"><span class="hljs-function">def <span class="hljs-title">from_pyfile</span><span class="hljs-params">(self, filename, silent=False)</span>:</span><br><span class="hljs-function">    filename </span>= os.path.join(self.root_path, filename)<br>        d = types.ModuleType(<span class="hljs-string">&quot;config&quot;</span>)<br>        d.__file__ = filename<br>    <span class="hljs-keyword">try</span>:<br>with open(filename, mode=<span class="hljs-string">&quot;rb&quot;</span>) as config_file:<br>exec(compile(config_file.read(), filename, <span class="hljs-string">&quot;exec&quot;</span>), d.__dict__)<br>    except IOError as e:<br><span class="hljs-keyword">if</span> silent <span class="hljs-keyword">and</span> e.errno in (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):<br><span class="hljs-keyword">return</span> False<br>    e.strerror = <span class="hljs-string">&quot;Unable to load configuration file (%s)&quot;</span> % e.strerror<br>    raise<br>    self.from_object(d)<br>    <span class="hljs-keyword">return</span> True<br></code></pre></div></td></tr></table></figure><p>在项目的根目录下创建一个名为 <code>config.cfg</code> 简单配置文件。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">DEBUG=<span class="hljs-literal">True</span><br>SECRET_KEY=<span class="hljs-string">&quot;something&quot;</span><br></code></pre></div></td></tr></table></figure><p>先看 <code>from_pyfile</code> 文件前面的三段代码， 首先使用 <code>os</code>获取配置文件的绝对路径，然后用 <code>types.ModuleType</code> 方法动态创建了一个 <code>config</code> 模块，并且设置文件名为传进来的文件名的绝对路径文件名，此时这个 <code>config</code> 算是一个模块了，不是用普通的 <code>import</code> 方法导入的。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">filename = os.path.join(self.root_path, filename)<br>d = types.ModuleType(<span class="hljs-string">&quot;config&quot;</span>)<br>d.__file__ = filename<br></code></pre></div></td></tr></table></figure><p><code>types</code> 属于 <code>Python</code>的标准库，里面的几个常用的方法没怎么了解，有如下几个。</p><ul><li>  <code>FunctionType</code>：通过不使用 <code>def</code> 的方式动态创建一个函数。</li><li>  <code>MethodType</code>：将创建在类外的某个方法动态绑定到类的实例上。</li><li>  <code>ModuleType</code>：动态的创建一个临时的模块。</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> types<br><br><span class="hljs-comment"># 动态创建一个模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = types.ModuleType(<span class="hljs-string">&quot;sample&quot;</span>, <span class="hljs-string">&quot;sample module.&quot;</span>)  <span class="hljs-comment"># 传入一个模块名，以及模块的文档字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m<br>&lt;module <span class="hljs-string">&#x27;sample&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.__dict__<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;sample&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-string">&#x27;sample module.&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m <span class="hljs-keyword">in</span> sys.modules   <span class="hljs-comment"># 模块不包含在系统模块中</span><br><span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 动态添加类方法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p = Person()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span>(<span class="hljs-params">self</span>):</span> print(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p.say = types.MethodType(say, p)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p.say()<br>hello<br><br><span class="hljs-comment"># 动态创建一个函数</span><br>&gt;&gt; foo_code = <span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;def foo(): return &quot;bar&quot;&#x27;</span>, <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>)<br>&gt;&gt; foo_func = types.FunctionType(foo_code.co_consts[<span class="hljs-number">0</span>], <span class="hljs-built_in">globals</span>(), <span class="hljs-string">&quot;foo&quot;</span>)<br>&gt;&gt; print(foo_func())<br>bar<br></code></pre></div></td></tr></table></figure><p>继续看 <code>from_pyfile</code> 方法剩下的代码，读取配置文件的配置属性，此时把属性放进动态创建的模块的字典里头，最后是调用另一个方法。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> config_file:<br>exec(<span class="hljs-built_in">compile</span>(config_file.read(), filename, <span class="hljs-string">&quot;exec&quot;</span>), d.__dict__)<br><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">if</span> silent <span class="hljs-keyword">and</span> e.errno <span class="hljs-keyword">in</span> (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    e.strerror = <span class="hljs-string">&quot;Unable to load configuration file (%s)&quot;</span> % e.strerror<br><span class="hljs-keyword">raise</span><br>self.from_object(d)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><h2 id="四、从-python对象中提取属性"><a href="#四、从-python对象中提取属性" class="headerlink" title="四、从  python对象中提取属性"></a>四、从  <code>python</code>对象中提取属性</h2><p>从 <code>python</code> 对象中提取配置相对简单，一般写一个配置类的 <code>python</code> 文件，里面定义一个基类，设定一些基本配置，然后使用类继承的方法为各种环境设置扩展配置类，一个简单的配置类如下。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Config</span>(<span class="hljs-params"><span class="hljs-built_in">object</span></span>):</span><br>    DEBUG = <span class="hljs-literal">False</span><br>    TESTING = <span class="hljs-literal">False</span><br>    DATABASE_URI = <span class="hljs-string">&#x27;sqlite://:memory:&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ProductionConfig</span>(<span class="hljs-params">Config</span>):</span><br>    DATABASE_URI = <span class="hljs-string">&#x27;mysql://user@localhost/foo&#x27;</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DevelopmentConfig</span>(<span class="hljs-params">Config</span>):</span><br>    DEBUG = <span class="hljs-literal">True</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestingConfig</span>(<span class="hljs-params">Config</span>):</span><br>    TESTING = <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><p>之后就是在 <code>from_object</code> 方法里传入一个类名，或者一个完整的模块字符串就可以配置好配置属性。如果传入的是一个配置类，那么 <code>   if isinstance(obj, string_types)</code> 直接为 <code>False</code>，然后这个传入的配置类的所有属性，如果包含大写的属性，将存入 <code>app.config</code> 的字典中。如果是字符串，那么会先把模块里面的类导入再提取属性。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_object</span>(<span class="hljs-params">self, obj</span>):</span><br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj, string_types):<br>            obj = import_string(obj)<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj):<br>        <span class="hljs-keyword">if</span> key.isupper():<br>            self[key] = <span class="hljs-built_in">getattr</span>(obj, key)<br></code></pre></div></td></tr></table></figure><p><code>string_types</code> ，这个变量在  <code>flask</code> 包的  <code>_compat.py</code>  下，其实就是<code>string</code> 类型，所以简单对传进来的参数检查是不是个字符串，如果是字符串，则会调用 <code>import_string</code> 方法，如果不是字符串而是一个具体的类则直接执行 <code>for</code> 循环对类的属性遍历。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:  <span class="hljs-comment"># Python 2</span><br>    text_type = unicode<br>    string_types = (<span class="hljs-built_in">str</span>, unicode)<br>    integer_types = (<span class="hljs-built_in">int</span>, long)<br><span class="hljs-keyword">except</span> NameError:  <span class="hljs-comment"># Python 3</span><br>    text_type = <span class="hljs-built_in">str</span><br>    string_types = (<span class="hljs-built_in">str</span>,)<br>    integer_types = (<span class="hljs-built_in">int</span>,)<br></code></pre></div></td></tr></table></figure><p>然后是  <code>import_string</code> 方法，因为传进来的仅仅是个字符串，还没对模块进行导入，所以会用到 <code>werkzeug.utils</code> 包下的 <code>import_string</code> 方法对模块进行导入。</p><p>可以看到 <code>import_string</code>  的第一行代码会对字符串进行替换，那说明有两种写法，而恰恰函数文档也说明了。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">提供两种模块写法：例如</span><br><span class="hljs-string">xml.sax.saxutils.escape</span><br><span class="hljs-string">xml.sax.saxutils:escape</span><br><span class="hljs-string">无论是那种写法，最后都会变成下面这种写法</span><br><span class="hljs-string">xml.sax.saxutils.escape</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>import_name = <span class="hljs-built_in">str</span>(import_name).replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></div></td></tr></table></figure><p>接下来就是使用不寻常的导包方式，一般导包都是两种方式，<code>import package</code>或者是 <code>from package import module</code>，因为我们这里传进来的是字符串，所以不能用正常的导包方式，只能使用 <code>__import__</code> 这个内建方法，实际上 <code>import</code> 也是调用 <code>__import__</code>。假设配置类 <code>BaseConfig</code> 在 <code>Config</code>  包下的 <code>Settings.py</code> 模块下，那么可以写为 <code>Config.Settings:BaseConfig</code>，或者 <code>Config.Settings.BaseConfig</code> ，两者的可以。最终，如果导入为空时，那么会从 <code>sys.modules</code> 里面查询这个包。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">__import__</span>(import_name)<br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> import_name:<br>        <span class="hljs-keyword">raise</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> sys.modules[import_name]<br></code></pre></div></td></tr></table></figure><p>如果这个传入的配置类字符串为 <code>Config.Settings.BaseConfig</code>，那么先把模块名和对象名分开，再尝试使用 <code>__import__</code> 方法导入，此时已经把模块名和对象名分开了，分别把模块名和对象名传入 <code>__import__</code> 就可以正常导入。再使用 <code>getattr</code> 方法获取模块里面的对象，这个方法告一段落。最后就是把返回的对象遍历获取里面的配置属性添加到 <code>Config</code> 对象中。</p><p><code>__import_</code> 的四个参数：</p><ul><li>  <code>name (required)</code>: 被加载 <code>module</code> 的名称</li><li>  <code>globals (optional)</code> : 包含全局变量的字典，该选项很少使用，采用默认值 <code>global()</code></li><li>  <code>locals (optional)</code>:  包含局部变量的字典，内部标准实现未用到该变量，采用默认值 <code>local()</code></li><li>  <code>fromlist (Optional)</code> : 被导入的子模块名称</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">module_name, obj_name = import_name.rsplit(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>)<br>module = <span class="hljs-built_in">__import__</span>(module_name, <span class="hljs-built_in">globals</span>(), <span class="hljs-built_in">locals</span>(), [obj_name])<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(module, obj_name)<br><span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-keyword">raise</span> ImportError(e)<br></code></pre></div></td></tr></table></figure><p>总的来说这个方法提供了两种导入配置的选择，一种是传入模块字符串，一种是直接传入配置类。便于导入的时候选择导入方式和可扩展性。</p><h2 id="五、从-json-文件中读取配置属性到映射为字典"><a href="#五、从-json-文件中读取配置属性到映射为字典" class="headerlink" title="五、从 json 文件中读取配置属性到映射为字典"></a>五、从 <code>json</code> 文件中读取配置属性到映射为字典</h2><p>这个方法最终也会调用 <code>Config</code> 类的最后一个方法，对于这个方法而言，只是简单的读取一下 <code>json</code> 文件，并且把 <code>json</code> 文件里面的数据转化为 <code>Python</code> 当中的字典类型。同时可以设置 <code>silent</code> 为 <code>True</code>，当文件读取失败的时候，方法直接失效，如果不设置为 <code>True</code> 的话，也可以，直接触发标准错误。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_json</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span></span>):</span><br>    filename = os.path.join(self.root_path, filename)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> json_file:<br>            obj = json.loads(json_file.read())<br><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">if</span> silent <span class="hljs-keyword">and</span> e.errno <span class="hljs-keyword">in</span> (errno.ENOENT, errno.EISDIR):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>e.strerror = <span class="hljs-string">&quot;Unable to load configuration file (%s)&quot;</span> % e.strerror<br><span class="hljs-keyword">raise</span><br><span class="hljs-keyword">return</span> self.from_mapping(obj)<br></code></pre></div></td></tr></table></figure><p>在项目的根目录下创建一个名为 <code>config.json</code> 的配置文件。</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs C">&#123;<br>    <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-string">&quot;True&quot;</span>,<br>    <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;something&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>示例代码，当程序启动时，打开 <code>http://127.0.0.1:5000/</code> 就可以看到 <code>DEBUG</code> 和 <code>SECRET_KEY </code> 的值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><br>app = Flask(__name__)<br><br>app.config.from_json(<span class="hljs-string">&quot;config.json&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br>    print(app.config.items())<br></code></pre></div></td></tr></table></figure><h2 id="六、从-python-键值对-dict-中配置属性"><a href="#六、从-python-键值对-dict-中配置属性" class="headerlink" title="六、从 python 键值对 ( dict ) 中配置属性"></a>六、从 <code>python</code> 键值对 <code>( dict )</code> 中配置属性</h2><p>设置一个简单的字典对象，待会传入 <code>from_mappings</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">configs = &#123;<br>    <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;Something&quot;</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后一个方法，针对传进来的键值对，也就是字典，这里对应第三个参数 <code>**kwargs</code>，使用 <code>kwargs.items()</code> 提取出所有的键值对( 列表格式 ) 存放进 <code>mappings</code> 列表里，然后再通过二层循环提取出每个配置的键和值，存放进 <code>Config</code> 类的里面。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_mapping</span>(<span class="hljs-params">self, *mapping, **kwargs</span>):</span><br>    <br>        mappings = []<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(mapping) == <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mapping[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;items&quot;</span>):<br>                mappings.append(mapping[<span class="hljs-number">0</span>].items())<br>            <span class="hljs-keyword">else</span>:<br>                mappings.append(mapping[<span class="hljs-number">0</span>])<br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(mapping) &gt; <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">raise</span> TypeError(<br>                <span class="hljs-string">&quot;expected at most 1 positional argument, got %d&quot;</span> % <span class="hljs-built_in">len</span>(mapping)<br>            )<br>        mappings.append(kwargs.items())<br>        <span class="hljs-keyword">for</span> mapping <span class="hljs-keyword">in</span> mappings:<br>            <span class="hljs-keyword">for</span> (key, value) <span class="hljs-keyword">in</span> mapping:<br>                <span class="hljs-keyword">if</span> key.isupper():<br>                    self[key] = value<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><p>例子示范，当启动程序时，在浏览器进入 <code>http://127.0.0.1:5000/</code> 就能看到 <code>DEBUG</code> 和 <code>SECRET_KEY</code> 的值。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><br>app = Flask(__name__)<br><br>configs = &#123;<br>    <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;Something&quot;</span><br>&#125;<br><br>app.config.from_mappings(configs)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br>    print(app.config.items())<br></code></pre></div></td></tr></table></figure><p>然后这个方法还提供另一种细化的使用，上面只是传入了第三个参数，第二个参数还没使用，显然这个函数是会使用到第二参数，那么这个参数格式有几种写法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">mapping = (<br>    &#123;<br>        <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;Something&quot;</span><br>    &#125;<br>)<br><span class="hljs-comment"># 直接执行 mappings.append(mapping[0])</span><br><br>mapping = (<br>    (<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-literal">True</span>),<br>    (<span class="hljs-string">&#x27;TESTING&#x27;</span>, <span class="hljs-literal">False</span>)<br>)<br><span class="hljs-comment"># 传入元祖，直接执行 mappings.append(mapping[0])</span><br></code></pre></div></td></tr></table></figure><p>此时就不需要传入第三个参数，也就是说这个方法提供两种参数传入方式，也方便扩展，如果单纯使用键值对，那么前面的代码将不会被执行，如果使用 <code>tuple</code> ，也会对这个参数进行操作，提取里面的属性值。</p><h2 id="七、自定义读取-yaml-properties配置文件"><a href="#七、自定义读取-yaml-properties配置文件" class="headerlink" title="七、自定义读取 yaml/properties配置文件"></a>七、自定义读取 yaml/properties配置文件</h2><blockquote><p>  上面提到可以用 <code>types.MethodType</code> 来创建动态方法，这里就可以利用这个来为 <code>config</code> 扩展读取更多类型的配置文件。</p></blockquote><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> types<br><br><span class="hljs-comment"># 创建一个 Person 类，此时类里还没有任何方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span>:</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">say</span>(<span class="hljs-params">self, name</span>):</span><br>    self.name = name<br>    print(<span class="hljs-string">&quot;hello&quot;</span>, name)<br>    <br>p = Person()<br><br><span class="hljs-comment"># 强行把方法赋值到实例对象上</span><br>p.say = say<br><br>p.say(name=<span class="hljs-string">&quot;nick&quot;</span>) <br><span class="hljs-comment"># 报错</span><br><span class="hljs-comment"># say() missing 1 required positional argument: &#x27;self&#x27;</span><br><br><span class="hljs-comment"># 把 say 方法绑定到 Person 类的实例上</span><br>p.say = types.MethodType(say, p)<br><br>p.say(name=<span class="hljs-string">&quot;nick&quot;</span>)<br><br><span class="hljs-comment"># result: hello nick</span><br></code></pre></div></td></tr></table></figure><p>创建一个名为 <code>config.yaml</code> 的配置文件，写入两个简单的配置项。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">DEBUG:</span> <span class="hljs-literal">True</span><br><span class="hljs-attr">SECRET_KEY:</span> <span class="hljs-string">something</span><br></code></pre></div></td></tr></table></figure><p>读取 <code>yaml</code> 文件，编写读取 <code>yaml</code> 文件方法，利用了 <code>pyyaml</code> 库，使用  <code>yaml</code> 读取出来的数据是字典格式，然后传递给  <code>Config</code> 对象的        <code>from_mapping</code> 方法，然后利用 <code>types.MethodType</code> 方法为 <code>Config</code> 类动态添加方法，绑定在 <code>config</code> 对象上。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-keyword">import</span> types<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> yaml<br><br><br>app = Flask(__name__)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_yaml</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span></span>):</span><br>    filename = os.path.join(self.root_path, filename)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> yaml_file:<br>            obj = yaml.load(yaml_file.read(), Loader=yaml.FullLoader)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> silent:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> self.from_mapping(obj)<br><br><span class="hljs-comment"># MethodType 方法第一个参数是需要动态添加的方法名，第二个参数是类的实例对象。</span><br>app.config.from_yaml = types.MethodType(from_yaml, app.config)<br>app.config.from_yaml(<span class="hljs-string">&quot;config.yaml&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span>():</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br>    print(app.config.items())<br></code></pre></div></td></tr></table></figure><p>创建一个名为 <code>config.properties</code> 的简单配置文件，写入以下简单配置项。</p><figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">DEBUG</span>=<span class="hljs-string">True</span><br><span class="hljs-attr">SECRET_KEY</span>=<span class="hljs-string">something</span><br></code></pre></div></td></tr></table></figure><p>创建一个读取 <code>from_properties</code> 方法， 这个方法遍历  <code>properties</code> 文件的每一行，把  <code>=</code>  两边的属性名和属性值放进 <code>obj</code> 中，最终会调用现有的 <code>from_mapping</code> 方法，最后还是要利用 <code>types.MethodType</code> 方法为 <code>Config</code> 类动态添加方法，绑定在 <code>config</code> 对象上，这样这个方法才会起作用。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">app = Flask(__name__)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">from_properties</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span>, encode=<span class="hljs-literal">None</span></span>):</span><br>    filename = os.path.join(self.root_path, filename)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> properties_file:<br>            obj = &#123;&#125;<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> properties_file:<br>                <span class="hljs-keyword">if</span> line.find(<span class="hljs-string">&#x27;=&#x27;</span>) &gt; <span class="hljs-number">0</span>:<br>                    s = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).split(<span class="hljs-string">&quot;=&quot;</span>)<br>                    obj[s[<span class="hljs-number">0</span>]] = s[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> silent:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> self.from_mapping(obj)<br><br>app.config.from_properties = types.MethodType(from_properties, app.config)<br><br>app.config.from_properties(<span class="hljs-string">&quot;config.properties&quot;</span>)<br><br><br></code></pre></div></td></tr></table></figure><p>当然，这两个方法可能也有不完善的地方，例如，<code>yaml</code> 文件可能是多层级的，这里只考虑到一层级，什么时候下才会出现多层级的配置项，例如，可以在一个 <code>yaml</code> 文件里面设置多个环境配置，开发环境配置，生产环境配置，部署环境配置等。</p><ul><li>  [ ] <code>yaml</code> 方法修改。</li><li>  [ ] 实例代码上传至 <code>github</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>源码阅读</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux与Android剪切板同步方案</title>
    <link href="/2020/0516/12368.html"/>
    <url>/2020/0516/12368.html</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-与-Android-剪切板同步方案"><a href="#Linux-与-Android-剪切板同步方案" class="headerlink" title="Linux 与 Android 剪切板同步方案"></a><code>Linux</code> 与 <code>Android</code> 剪切板同步方案</h1><p>在 <code>Linux</code> 传输文件，图片，或是发送文字，都不如 <code>Windows</code> 那样方便，在 <code>Windows</code>  可以通过 <code>QQ</code> 里面发送文件，图片，或是文字等等。虽然说在<code>Linux</code>上可以通过其他方式来解决传文件的文件，例如：</p><span id="more"></span><ul><li><p>  <code>telegram</code></p></li><li><p>  微信网页版( 在2017年9月份开始，腾讯已经 开始限制 新注册的微信号禁止登录网页版微信，老的微信号则不受影响 ，并且网页版发送的文件大小不能超过 <code>90MB</code></p></li><li><p>  <code>python -m http.server 80</code>，但是不能复制文本，而且有些文件需要另存为下载。</p></li><li><p>  以及其他方法。。。</p></li></ul><p>现在找到 一种办法，电脑上使用 <code>GSConnect</code>，而安卓软件选择使用 <code>KDE Connect</code>。</p><p><code>GSConnect</code> 官方介绍：</p><blockquote><p>  <code>GSConnect</code> 是针对 <code>GNOME Shell</code> 的 <code>KDE Connect</code> 的完整实现，集成了 <code>Nautilus</code> 、<code>Chrome</code> 和 <code>Firefox</code>。</p><p>  将你的 PC 和 Android 设备与安装的 KDE Connect 应用配对: 传输文件，发送和接收短信文本，同步剪贴板和通知，发送鼠标和键盘输入，远程控制媒体播放器，定位你的设备，监视电池电量，在你的 PC 上启动命令，等等。</p></blockquote><p><code>GSConnect</code> 官方 <code>WIKI</code>：<a href="https://github.com/andyholmes/gnome-shell-extension-gsconnect/wiki/Installation#install-from-git">https://github.com/andyholmes/gnome-shell-extension-gsconnect/wiki/Installation#install-from-git</a></p><p><code>KDE Connect</code>可以在 <code>Google Play</code> 下载。</p><h2 id="1-安装方式"><a href="#1-安装方式" class="headerlink" title="1. 安装方式"></a>1. 安装方式</h2><p><code>GSConnect</code> 提供了两种安装方式，一种是通过从官方仓库的 <code>release</code> 页面下载最后一个版本的压缩包安装，另一种方式就是克隆官方仓库进行编译。</p><p>第一种方式的方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">mkdir -p ~/.local/share/gnome-shell/extensions<br>rm -rf ~/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io<br>unzip -o gsconnect@andyholmes.github.io.zip -d ~/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io<br></code></pre></div></td></tr></table></figure><p>第二种方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">git clone https://github.com/andyholmes/gnome-shell-extension-gsconnect.git<br>cd gnome-shell-extension-gsconnect/<br>meson _build .<br>ninja -C _build install-zip<br></code></pre></div></td></tr></table></figure><p>选择第一种方式更方便，不需要编译，我选择的是第一种方式。</p><p>使用第二种安装方式的时候，编译出现了点问题，缺少两个构建工具：meson， ninja。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo aptitude install meson<br></code></pre></div></td></tr></table></figure><p>同时会安装 meson和ninja。</p><p>开始，构建，报错。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">The Meson build system<br>Version: 0.45.1<br>Source dir: /home/aim/SoftWare/gnome-shell-extension-gsconnect<br>Build dir: /home/aim/SoftWare/gnome-shell-extension-gsconnect/_build<br>Build type: native build<br><br>meson.build:1:0: ERROR: Meson version is 0.45.1 but project requires &gt;= 0.49.0.<br><br>A full log can be found at /home/aim/SoftWare/gnome-shell-extension-gsconnect/_build/meson-logs/meson-log.txt<br></code></pre></div></td></tr></table></figure><p>原来是meson版本低于依赖的版本。安装高版本的meson</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install meson==0.49.0<br></code></pre></div></td></tr></table></figure><h2 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2. 开始使用"></a>2. 开始使用</h2><p>手机要和电脑处在同一个局域网，不然搜索不到。</p><p>手机打开 <code>Kde Connect</code>，点击 <code>⊕ Pair new device</code> 扫描周围设备进行配对，出现电脑名字的时候点击进行配对，电脑上点击<code>accept</code> 即可配对成功。</p><p>同时，为了方便的管理电脑上的剪切板剪切的文件，安装一个剪切板管理软件。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo aptitude install copyq<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
