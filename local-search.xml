<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>一次js逆向实践</title>
    <link href="/2024/06/04/%E4%B8%80%E6%AC%A1js%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/"/>
    <url>/2024/06/04/%E4%B8%80%E6%AC%A1js%E9%80%86%E5%90%91%E5%AE%9E%E8%B7%B5/</url>
    
    <content type="html"><![CDATA[<p>最近有个朋友拜托我帮忙刷一门课程，但是那个课程没有油猴脚本可以用，虽说可以手点，不用等待视频播放什么的，但还是很繁琐。所以决定通过找到接口的方式，直接使用爬虫取代手动点击方式。</p><p>注：写此篇文章是为了记录实践过程，并未对网站进行违法操作，文章已经隐去和此网站有关的信息。</p><h2 id="0x01-逆向过程"><a href="#0x01-逆向过程" class="headerlink" title="0x01 逆向过程"></a>0x01 逆向过程</h2><p>课程是有很多个大章节，大章节里面有很多小章节，小章节有几个小节点构成的，任务就是点击小节点完成任务，任务完成方式通过点击小点，等待一会，未完成状态会变成已完成状态。</p><p><img src="/img/course.png"></p><p>通过点击多个不同的任务测试，发现调用了一个 <code>add</code> 接口方法，标记次节点为已完成。通过 F12 拿到了此接口的请求头与请求参数。</p><p>请求头：其中，<code>Authorization</code> 是当前登录用户的令牌，可以在短期内使用，目前来说够用。<code>Sign</code> 比较特殊，后面会提到。<code>Cookie</code> 直接在 F12 控制台复制，目前测试 <code>Cookie</code> 可以反复使用。<code>Referer</code> 是当前从哪个地址访问过来的，以防万一，带上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">headers = &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/json, text/plain, */*&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br, zstd&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,<br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer xxxx&quot;</span><br>    <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;85&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Pragma&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-string">&quot;Priority&quot;</span>: <span class="hljs-string">&quot;u=1, i&quot;</span>,<br>    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Sign&quot;</span>: <span class="hljs-string">&quot;24808a85cc2af714bb670f43ad00a68c&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>请求参数：<code>viewStatus</code> 标记此任务标记为完成状态，<code>catalogueId</code> 是此节点的唯一 ID，<code>randomNum</code> 貌似是一个随机数，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<br>    <span class="hljs-string">&quot;viewStatus&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;catalogueId&quot;</span>: <span class="hljs-string">&quot;1655388287586213889&quot;</span>,<br>    <span class="hljs-string">&quot;randomNum&quot;</span>: <span class="hljs-number">0.608132423106152</span><br>&#125;<br></code></pre></td></tr></table></figure><p>下面是测试代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<br>    <span class="hljs-string">&quot;viewStatus&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;catalogueId&quot;</span>: <span class="hljs-string">&quot;1655388287586213889&quot;</span>,<br>    <span class="hljs-string">&quot;randomNum&quot;</span>: <span class="hljs-number">0.608132423106152</span><br>&#125;<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/json, text/plain, */*&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br, zstd&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,<br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer xxxx&quot;</span><br>    <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;85&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Pragma&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-string">&quot;Priority&quot;</span>: <span class="hljs-string">&quot;u=1, i&quot;</span>,<br>    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Sign&quot;</span>: <span class="hljs-string">&quot;24808a85cc2af714bb670f43ad00a68c&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br>&#125;<br><span class="hljs-comment"># 防止发送频繁</span><br>time.sleep(<span class="hljs-number">5</span>)<br><br>response = requests.post(<span class="hljs-string">&quot;https://xxxxx/xxx/xxx/learningRecords/add&quot;</span>, headers=headers, json=data, verify=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>发送几次后，首次得到正确的响应，后面几次都是响应都是下面的。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><span class="hljs-attr">&quot;msg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;请勿频繁调用此接口&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-attr">&quot;code&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">400</span><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>猜测 <code>random</code> 参数有问题，名字已经很明显的告诉我，这是个随机数，那肯定不是每次请求都是一样的。打开 F12 ，在源代码&#x2F;来源那一块，使用 <code>Ctrl + Shift + F</code> 搜索关键字 <code>random</code> ，有很多处使用到，使用打断点的方式验证是否会执行到搜索到的位置，找到如下代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">o</span>(<span class="hljs-params">q</span>) &#123;<br>    <span class="hljs-title class_">Dt</span>(q.<span class="hljs-property">attaUrl</span>) === <span class="hljs-string">&quot;word&quot;</span> &amp;&amp; h.<span class="hljs-property">value</span> &amp;&amp; h.<span class="hljs-property">value</span>.<span class="hljs-property">id</span> &amp;&amp; <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>        <span class="hljs-keyword">const</span> j = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>()<br>          , J = <span class="hljs-string">`catalogueId=<span class="hljs-subst">$&#123;q.id&#125;</span>&amp;viewStatus=3&amp;randomNum=<span class="hljs-subst">$&#123;j&#125;</span>`</span>;<br>        <span class="hljs-title function_">v</span>(&#123;<br>            <span class="hljs-attr">catalogueId</span>: q.<span class="hljs-property">id</span>,<br>            <span class="hljs-attr">randomNum</span>: j<br>        &#125;, &#123;<br>            <span class="hljs-attr">sign</span>: ue.<span class="hljs-title function_">hashStr</span>(J)<br>        &#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function">()=&gt;</span>&#123;<br>            <span class="hljs-title function_">we</span>(q, &#123;<br>                <span class="hljs-attr">viewStatus</span>: <span class="hljs-string">&quot;3&quot;</span><br>            &#125;),<br>            <span class="hljs-title class_">Ge</span>()<br>        &#125;<br>        )<br>    &#125;<br>    , <span class="hljs-number">2e3</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p>得到 <code>random</code> 的生成方式，使用 <code>Python</code> 代码替换 <code>Javascript</code> 的生成方式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">data = &#123;<br>    <span class="hljs-string">&quot;viewStatus&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;catalogueId&quot;</span>: <span class="hljs-built_in">id</span>,<br>    <span class="hljs-string">&quot;randomNum&quot;</span>: random.random()<br>&#125;<br></code></pre></td></tr></table></figure><p>再次发送请求，发现还是会出现 400 的问题，通过多次页面点击节点，发现 <code>sign</code> 每次请求都不一样，确定 <code>sign</code> 也不是固定值。根据上面的 <code>Javascript</code> 代码，发现 <code>ua.hashStr</code> 是生成 <code>sign</code> 的关键，首先确定了这个方法的参数是通过 <code>catalogueId=$&#123;q.id&#125;&amp;viewStatus=3&amp;randomNum=$&#123;j&#125;</code> 生成的。通过全局搜索 <code>ue.hashStr</code> 找到这个方法的定义位置。</p><p>把找到的代码写入一个 <code>encrypt.js</code> 中 ，从 <code>hashStr</code> 方法入手，找到定义的位置，下面就是定义的位置，剔除不需要的代码，通过调试的方式一点一点补充缺失的代码，最终是下面的代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ue</span> &#123;<br>    <span class="hljs-title function_">constructor</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dataLength</span> = <span class="hljs-number">0</span>,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_bufferLength</span> = <span class="hljs-number">0</span>,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>(<span class="hljs-number">4</span>),<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayBuffer</span>(<span class="hljs-number">68</span>),<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer8</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint8Array</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer</span>,<span class="hljs-number">0</span>,<span class="hljs-number">68</span>),<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer32</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Uint32Array</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer</span>,<span class="hljs-number">0</span>,<span class="hljs-number">17</span>),<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">start</span>()<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">hashStr</span>(<span class="hljs-params">C, _=!<span class="hljs-number">1</span></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">onePassHasher</span>.<span class="hljs-title function_">start</span>().<span class="hljs-title function_">appendStr</span>(C).<span class="hljs-title function_">end</span>(_)<br>    &#125;<br><br>    <span class="hljs-title function_">start</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dataLength</span> = <span class="hljs-number">0</span>,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_bufferLength</span> = <span class="hljs-number">0</span>,<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span>.<span class="hljs-title function_">set</span>(ue.<span class="hljs-property">stateIdentity</span>),<br>        <span class="hljs-variable language_">this</span><br>    &#125;<br><br>    <span class="hljs-title function_">appendStr</span>(<span class="hljs-params">C</span>) &#123;<br>        <span class="hljs-keyword">const</span> _ = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer8</span><br>          , p = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer32</span>;<br>        <span class="hljs-keyword">let</span> g = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_bufferLength</span>, h, v;<br>        <span class="hljs-keyword">for</span> (v = <span class="hljs-number">0</span>; v &lt; C.<span class="hljs-property">length</span>; v += <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">if</span> (h = C.<span class="hljs-title function_">charCodeAt</span>(v),<br>            h &lt; <span class="hljs-number">128</span>)<br>                _[g++] = h;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (h &lt; <span class="hljs-number">2048</span>)<br>                _[g++] = (h &gt;&gt;&gt; <span class="hljs-number">6</span>) + <span class="hljs-number">192</span>,<br>                _[g++] = h &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (h &lt; <span class="hljs-number">55296</span> || h &gt; <span class="hljs-number">56319</span>)<br>                _[g++] = (h &gt;&gt;&gt; <span class="hljs-number">12</span>) + <span class="hljs-number">224</span>,<br>                _[g++] = h &gt;&gt;&gt; <span class="hljs-number">6</span> &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>,<br>                _[g++] = h &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>;<br>            <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">if</span> (h = (h - <span class="hljs-number">55296</span>) * <span class="hljs-number">1024</span> + (C.<span class="hljs-title function_">charCodeAt</span>(++v) - <span class="hljs-number">56320</span>) + <span class="hljs-number">65536</span>,<br>                h &gt; <span class="hljs-number">1114111</span>)<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;error&quot;</span>);<br>                _[g++] = (h &gt;&gt;&gt; <span class="hljs-number">18</span>) + <span class="hljs-number">240</span>,<br>                _[g++] = h &gt;&gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>,<br>                _[g++] = h &gt;&gt;&gt; <span class="hljs-number">6</span> &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span>,<br>                _[g++] = h &amp; <span class="hljs-number">63</span> | <span class="hljs-number">128</span><br>            &#125;<br>            g &gt;= <span class="hljs-number">64</span> &amp;&amp; (<span class="hljs-variable language_">this</span>.<span class="hljs-property">_dataLength</span> += <span class="hljs-number">64</span>,<br>            ue.<span class="hljs-title function_">_md5cycle</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span>, p),<br>            g -= <span class="hljs-number">64</span>,<br>            p[<span class="hljs-number">0</span>] = p[<span class="hljs-number">16</span>])<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">_bufferLength</span> = g,<br>        <span class="hljs-variable language_">this</span><br>    &#125;<br><br>    <span class="hljs-title function_">end</span>(<span class="hljs-params">C=!<span class="hljs-number">1</span></span>) &#123;<br>        <span class="hljs-keyword">const</span> _ = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_bufferLength</span><br>          , p = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer8</span><br>          , g = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_buffer32</span><br>          , h = (_ &gt;&gt; <span class="hljs-number">2</span>) + <span class="hljs-number">1</span>;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dataLength</span> += _;<br>        <span class="hljs-keyword">const</span> v = <span class="hljs-variable language_">this</span>.<span class="hljs-property">_dataLength</span> * <span class="hljs-number">8</span>;<br>        <span class="hljs-keyword">if</span> (p[_] = <span class="hljs-number">128</span>,<br>        p[_ + <span class="hljs-number">1</span>] = p[_ + <span class="hljs-number">2</span>] = p[_ + <span class="hljs-number">3</span>] = <span class="hljs-number">0</span>,<br>        g.<span class="hljs-title function_">set</span>(ue.<span class="hljs-property">buffer32Identity</span>.<span class="hljs-title function_">subarray</span>(h), h),<br>        _ &gt; <span class="hljs-number">55</span> &amp;&amp; (ue.<span class="hljs-title function_">_md5cycle</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span>, g),<br>        g.<span class="hljs-title function_">set</span>(ue.<span class="hljs-property">buffer32Identity</span>)),<br>        v &lt;= <span class="hljs-number">4294967295</span>)<br>            g[<span class="hljs-number">14</span>] = v;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">const</span> V = v.<span class="hljs-title function_">toString</span>(<span class="hljs-number">16</span>).<span class="hljs-title function_">match</span>(<span class="hljs-regexp">/(.*?)(.&#123;0,8&#125;)$/</span>);<br>            <span class="hljs-keyword">if</span> (V === <span class="hljs-literal">null</span>)<br>                <span class="hljs-keyword">return</span>;<br>            <span class="hljs-keyword">const</span> ie = <span class="hljs-built_in">parseInt</span>(V[<span class="hljs-number">2</span>], <span class="hljs-number">16</span>)<br>              , we = <span class="hljs-built_in">parseInt</span>(V[<span class="hljs-number">1</span>], <span class="hljs-number">16</span>) || <span class="hljs-number">0</span>;<br>            g[<span class="hljs-number">14</span>] = ie,<br>            g[<span class="hljs-number">15</span>] = we<br>        &#125;<br>        <span class="hljs-keyword">return</span> ue.<span class="hljs-title function_">_md5cycle</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span>, g),<br>        C ? <span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span> : ue.<span class="hljs-title function_">_hex</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">_state</span>)<br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">_md5cycle</span>(<span class="hljs-params">C, _</span>) &#123;<br>        <span class="hljs-keyword">let</span> p = C[<span class="hljs-number">0</span>]<br>          , g = C[<span class="hljs-number">1</span>]<br>          , h = C[<span class="hljs-number">2</span>]<br>          , v = C[<span class="hljs-number">3</span>];<br>        p += (g &amp; h | ~g &amp; v) + _[<span class="hljs-number">0</span>] - <span class="hljs-number">680876936</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">7</span> | p &gt;&gt;&gt; <span class="hljs-number">25</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; g | ~p &amp; h) + _[<span class="hljs-number">1</span>] - <span class="hljs-number">389564586</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">12</span> | v &gt;&gt;&gt; <span class="hljs-number">20</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; p | ~v &amp; g) + _[<span class="hljs-number">2</span>] + <span class="hljs-number">606105819</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">17</span> | h &gt;&gt;&gt; <span class="hljs-number">15</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; v | ~h &amp; p) + _[<span class="hljs-number">3</span>] - <span class="hljs-number">1044525330</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">22</span> | g &gt;&gt;&gt; <span class="hljs-number">10</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; h | ~g &amp; v) + _[<span class="hljs-number">4</span>] - <span class="hljs-number">176418897</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">7</span> | p &gt;&gt;&gt; <span class="hljs-number">25</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; g | ~p &amp; h) + _[<span class="hljs-number">5</span>] + <span class="hljs-number">1200080426</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">12</span> | v &gt;&gt;&gt; <span class="hljs-number">20</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; p | ~v &amp; g) + _[<span class="hljs-number">6</span>] - <span class="hljs-number">1473231341</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">17</span> | h &gt;&gt;&gt; <span class="hljs-number">15</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; v | ~h &amp; p) + _[<span class="hljs-number">7</span>] - <span class="hljs-number">45705983</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">22</span> | g &gt;&gt;&gt; <span class="hljs-number">10</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; h | ~g &amp; v) + _[<span class="hljs-number">8</span>] + <span class="hljs-number">1770035416</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">7</span> | p &gt;&gt;&gt; <span class="hljs-number">25</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; g | ~p &amp; h) + _[<span class="hljs-number">9</span>] - <span class="hljs-number">1958414417</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">12</span> | v &gt;&gt;&gt; <span class="hljs-number">20</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; p | ~v &amp; g) + _[<span class="hljs-number">10</span>] - <span class="hljs-number">42063</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">17</span> | h &gt;&gt;&gt; <span class="hljs-number">15</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; v | ~h &amp; p) + _[<span class="hljs-number">11</span>] - <span class="hljs-number">1990404162</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">22</span> | g &gt;&gt;&gt; <span class="hljs-number">10</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; h | ~g &amp; v) + _[<span class="hljs-number">12</span>] + <span class="hljs-number">1804603682</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">7</span> | p &gt;&gt;&gt; <span class="hljs-number">25</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; g | ~p &amp; h) + _[<span class="hljs-number">13</span>] - <span class="hljs-number">40341101</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">12</span> | v &gt;&gt;&gt; <span class="hljs-number">20</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; p | ~v &amp; g) + _[<span class="hljs-number">14</span>] - <span class="hljs-number">1502002290</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">17</span> | h &gt;&gt;&gt; <span class="hljs-number">15</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; v | ~h &amp; p) + _[<span class="hljs-number">15</span>] + <span class="hljs-number">1236535329</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">22</span> | g &gt;&gt;&gt; <span class="hljs-number">10</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; v | h &amp; ~v) + _[<span class="hljs-number">1</span>] - <span class="hljs-number">165796510</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">5</span> | p &gt;&gt;&gt; <span class="hljs-number">27</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; h | g &amp; ~h) + _[<span class="hljs-number">6</span>] - <span class="hljs-number">1069501632</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">9</span> | v &gt;&gt;&gt; <span class="hljs-number">23</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; g | p &amp; ~g) + _[<span class="hljs-number">11</span>] + <span class="hljs-number">643717713</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">14</span> | h &gt;&gt;&gt; <span class="hljs-number">18</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; p | v &amp; ~p) + _[<span class="hljs-number">0</span>] - <span class="hljs-number">373897302</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">20</span> | g &gt;&gt;&gt; <span class="hljs-number">12</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; v | h &amp; ~v) + _[<span class="hljs-number">5</span>] - <span class="hljs-number">701558691</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">5</span> | p &gt;&gt;&gt; <span class="hljs-number">27</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; h | g &amp; ~h) + _[<span class="hljs-number">10</span>] + <span class="hljs-number">38016083</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">9</span> | v &gt;&gt;&gt; <span class="hljs-number">23</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; g | p &amp; ~g) + _[<span class="hljs-number">15</span>] - <span class="hljs-number">660478335</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">14</span> | h &gt;&gt;&gt; <span class="hljs-number">18</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; p | v &amp; ~p) + _[<span class="hljs-number">4</span>] - <span class="hljs-number">405537848</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">20</span> | g &gt;&gt;&gt; <span class="hljs-number">12</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; v | h &amp; ~v) + _[<span class="hljs-number">9</span>] + <span class="hljs-number">568446438</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">5</span> | p &gt;&gt;&gt; <span class="hljs-number">27</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; h | g &amp; ~h) + _[<span class="hljs-number">14</span>] - <span class="hljs-number">1019803690</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">9</span> | v &gt;&gt;&gt; <span class="hljs-number">23</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; g | p &amp; ~g) + _[<span class="hljs-number">3</span>] - <span class="hljs-number">187363961</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">14</span> | h &gt;&gt;&gt; <span class="hljs-number">18</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; p | v &amp; ~p) + _[<span class="hljs-number">8</span>] + <span class="hljs-number">1163531501</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">20</span> | g &gt;&gt;&gt; <span class="hljs-number">12</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g &amp; v | h &amp; ~v) + _[<span class="hljs-number">13</span>] - <span class="hljs-number">1444681467</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">5</span> | p &gt;&gt;&gt; <span class="hljs-number">27</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p &amp; h | g &amp; ~h) + _[<span class="hljs-number">2</span>] - <span class="hljs-number">51403784</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">9</span> | v &gt;&gt;&gt; <span class="hljs-number">23</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v &amp; g | p &amp; ~g) + _[<span class="hljs-number">7</span>] + <span class="hljs-number">1735328473</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">14</span> | h &gt;&gt;&gt; <span class="hljs-number">18</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h &amp; p | v &amp; ~p) + _[<span class="hljs-number">12</span>] - <span class="hljs-number">1926607734</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">20</span> | g &gt;&gt;&gt; <span class="hljs-number">12</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g ^ h ^ v) + _[<span class="hljs-number">5</span>] - <span class="hljs-number">378558</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">4</span> | p &gt;&gt;&gt; <span class="hljs-number">28</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p ^ g ^ h) + _[<span class="hljs-number">8</span>] - <span class="hljs-number">2022574463</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">11</span> | v &gt;&gt;&gt; <span class="hljs-number">21</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v ^ p ^ g) + _[<span class="hljs-number">11</span>] + <span class="hljs-number">1839030562</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">16</span> | h &gt;&gt;&gt; <span class="hljs-number">16</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h ^ v ^ p) + _[<span class="hljs-number">14</span>] - <span class="hljs-number">35309556</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">23</span> | g &gt;&gt;&gt; <span class="hljs-number">9</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g ^ h ^ v) + _[<span class="hljs-number">1</span>] - <span class="hljs-number">1530992060</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">4</span> | p &gt;&gt;&gt; <span class="hljs-number">28</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p ^ g ^ h) + _[<span class="hljs-number">4</span>] + <span class="hljs-number">1272893353</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">11</span> | v &gt;&gt;&gt; <span class="hljs-number">21</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v ^ p ^ g) + _[<span class="hljs-number">7</span>] - <span class="hljs-number">155497632</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">16</span> | h &gt;&gt;&gt; <span class="hljs-number">16</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h ^ v ^ p) + _[<span class="hljs-number">10</span>] - <span class="hljs-number">1094730640</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">23</span> | g &gt;&gt;&gt; <span class="hljs-number">9</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g ^ h ^ v) + _[<span class="hljs-number">13</span>] + <span class="hljs-number">681279174</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">4</span> | p &gt;&gt;&gt; <span class="hljs-number">28</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p ^ g ^ h) + _[<span class="hljs-number">0</span>] - <span class="hljs-number">358537222</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">11</span> | v &gt;&gt;&gt; <span class="hljs-number">21</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v ^ p ^ g) + _[<span class="hljs-number">3</span>] - <span class="hljs-number">722521979</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">16</span> | h &gt;&gt;&gt; <span class="hljs-number">16</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h ^ v ^ p) + _[<span class="hljs-number">6</span>] + <span class="hljs-number">76029189</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">23</span> | g &gt;&gt;&gt; <span class="hljs-number">9</span>) + h | <span class="hljs-number">0</span>,<br>        p += (g ^ h ^ v) + _[<span class="hljs-number">9</span>] - <span class="hljs-number">640364487</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">4</span> | p &gt;&gt;&gt; <span class="hljs-number">28</span>) + g | <span class="hljs-number">0</span>,<br>        v += (p ^ g ^ h) + _[<span class="hljs-number">12</span>] - <span class="hljs-number">421815835</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">11</span> | v &gt;&gt;&gt; <span class="hljs-number">21</span>) + p | <span class="hljs-number">0</span>,<br>        h += (v ^ p ^ g) + _[<span class="hljs-number">15</span>] + <span class="hljs-number">530742520</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">16</span> | h &gt;&gt;&gt; <span class="hljs-number">16</span>) + v | <span class="hljs-number">0</span>,<br>        g += (h ^ v ^ p) + _[<span class="hljs-number">2</span>] - <span class="hljs-number">995338651</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">23</span> | g &gt;&gt;&gt; <span class="hljs-number">9</span>) + h | <span class="hljs-number">0</span>,<br>        p += (h ^ (g | ~v)) + _[<span class="hljs-number">0</span>] - <span class="hljs-number">198630844</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">6</span> | p &gt;&gt;&gt; <span class="hljs-number">26</span>) + g | <span class="hljs-number">0</span>,<br>        v += (g ^ (p | ~h)) + _[<span class="hljs-number">7</span>] + <span class="hljs-number">1126891415</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">10</span> | v &gt;&gt;&gt; <span class="hljs-number">22</span>) + p | <span class="hljs-number">0</span>,<br>        h += (p ^ (v | ~g)) + _[<span class="hljs-number">14</span>] - <span class="hljs-number">1416354905</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">15</span> | h &gt;&gt;&gt; <span class="hljs-number">17</span>) + v | <span class="hljs-number">0</span>,<br>        g += (v ^ (h | ~p)) + _[<span class="hljs-number">5</span>] - <span class="hljs-number">57434055</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">21</span> | g &gt;&gt;&gt; <span class="hljs-number">11</span>) + h | <span class="hljs-number">0</span>,<br>        p += (h ^ (g | ~v)) + _[<span class="hljs-number">12</span>] + <span class="hljs-number">1700485571</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">6</span> | p &gt;&gt;&gt; <span class="hljs-number">26</span>) + g | <span class="hljs-number">0</span>,<br>        v += (g ^ (p | ~h)) + _[<span class="hljs-number">3</span>] - <span class="hljs-number">1894986606</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">10</span> | v &gt;&gt;&gt; <span class="hljs-number">22</span>) + p | <span class="hljs-number">0</span>,<br>        h += (p ^ (v | ~g)) + _[<span class="hljs-number">10</span>] - <span class="hljs-number">1051523</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">15</span> | h &gt;&gt;&gt; <span class="hljs-number">17</span>) + v | <span class="hljs-number">0</span>,<br>        g += (v ^ (h | ~p)) + _[<span class="hljs-number">1</span>] - <span class="hljs-number">2054922799</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">21</span> | g &gt;&gt;&gt; <span class="hljs-number">11</span>) + h | <span class="hljs-number">0</span>,<br>        p += (h ^ (g | ~v)) + _[<span class="hljs-number">8</span>] + <span class="hljs-number">1873313359</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">6</span> | p &gt;&gt;&gt; <span class="hljs-number">26</span>) + g | <span class="hljs-number">0</span>,<br>        v += (g ^ (p | ~h)) + _[<span class="hljs-number">15</span>] - <span class="hljs-number">30611744</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">10</span> | v &gt;&gt;&gt; <span class="hljs-number">22</span>) + p | <span class="hljs-number">0</span>,<br>        h += (p ^ (v | ~g)) + _[<span class="hljs-number">6</span>] - <span class="hljs-number">1560198380</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">15</span> | h &gt;&gt;&gt; <span class="hljs-number">17</span>) + v | <span class="hljs-number">0</span>,<br>        g += (v ^ (h | ~p)) + _[<span class="hljs-number">13</span>] + <span class="hljs-number">1309151649</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">21</span> | g &gt;&gt;&gt; <span class="hljs-number">11</span>) + h | <span class="hljs-number">0</span>,<br>        p += (h ^ (g | ~v)) + _[<span class="hljs-number">4</span>] - <span class="hljs-number">145523070</span> | <span class="hljs-number">0</span>,<br>        p = (p &lt;&lt; <span class="hljs-number">6</span> | p &gt;&gt;&gt; <span class="hljs-number">26</span>) + g | <span class="hljs-number">0</span>,<br>        v += (g ^ (p | ~h)) + _[<span class="hljs-number">11</span>] - <span class="hljs-number">1120210379</span> | <span class="hljs-number">0</span>,<br>        v = (v &lt;&lt; <span class="hljs-number">10</span> | v &gt;&gt;&gt; <span class="hljs-number">22</span>) + p | <span class="hljs-number">0</span>,<br>        h += (p ^ (v | ~g)) + _[<span class="hljs-number">2</span>] + <span class="hljs-number">718787259</span> | <span class="hljs-number">0</span>,<br>        h = (h &lt;&lt; <span class="hljs-number">15</span> | h &gt;&gt;&gt; <span class="hljs-number">17</span>) + v | <span class="hljs-number">0</span>,<br>        g += (v ^ (h | ~p)) + _[<span class="hljs-number">9</span>] - <span class="hljs-number">343485551</span> | <span class="hljs-number">0</span>,<br>        g = (g &lt;&lt; <span class="hljs-number">21</span> | g &gt;&gt;&gt; <span class="hljs-number">11</span>) + h | <span class="hljs-number">0</span>,<br>        C[<span class="hljs-number">0</span>] = p + C[<span class="hljs-number">0</span>] | <span class="hljs-number">0</span>,<br>        C[<span class="hljs-number">1</span>] = g + C[<span class="hljs-number">1</span>] | <span class="hljs-number">0</span>,<br>        C[<span class="hljs-number">2</span>] = h + C[<span class="hljs-number">2</span>] | <span class="hljs-number">0</span>,<br>        C[<span class="hljs-number">3</span>] = v + C[<span class="hljs-number">3</span>] | <span class="hljs-number">0</span><br>    &#125;<br>    <span class="hljs-keyword">static</span> <span class="hljs-title function_">_hex</span>(<span class="hljs-params">C</span>) &#123;<br>        <span class="hljs-keyword">const</span> _ = ue.<span class="hljs-property">hexChars</span><br>          , p = ue.<span class="hljs-property">hexOut</span>;<br>        <span class="hljs-keyword">let</span> g, h, v, V;<br>        <span class="hljs-keyword">for</span> (V = <span class="hljs-number">0</span>; V &lt; <span class="hljs-number">4</span>; V += <span class="hljs-number">1</span>)<br>            <span class="hljs-keyword">for</span> (h = V * <span class="hljs-number">8</span>,<br>            g = C[V],<br>            v = <span class="hljs-number">0</span>; v &lt; <span class="hljs-number">8</span>; v += <span class="hljs-number">2</span>)<br>                p[h + <span class="hljs-number">1</span> + v] = _.<span class="hljs-title function_">charAt</span>(g &amp; <span class="hljs-number">15</span>),<br>                g &gt;&gt;&gt;= <span class="hljs-number">4</span>,<br>                p[h + <span class="hljs-number">0</span> + v] = _.<span class="hljs-title function_">charAt</span>(g &amp; <span class="hljs-number">15</span>),<br>                g &gt;&gt;&gt;= <span class="hljs-number">4</span>;<br>        <span class="hljs-keyword">return</span> p.<span class="hljs-title function_">join</span>(<span class="hljs-string">&quot;&quot;</span>)<br>    &#125;<br>&#125;;<br><br>ue.<span class="hljs-property">stateIdentity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>([<span class="hljs-number">1732584193</span>, -<span class="hljs-number">271733879</span>, -<span class="hljs-number">1732584194</span>, <span class="hljs-number">271733878</span>]);<br>ue.<span class="hljs-property">buffer32Identity</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Int32Array</span>([<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]);<br>ue.<span class="hljs-property">hexChars</span> = <span class="hljs-string">&quot;0123456789abcdef&quot;</span>;<br>ue.<span class="hljs-property">hexOut</span> = [];<br>ue.<span class="hljs-property">onePassHasher</span> = <span class="hljs-keyword">new</span> ue;<br><br><br><span class="hljs-comment">// 自己写的方法，用于下面调用</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getHash</span>(<span class="hljs-params">str</span>) &#123;<br>    <span class="hljs-keyword">return</span> ue.<span class="hljs-title function_">hashStr</span>(str, <span class="hljs-literal">false</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>现在需要做的是通过 <code>Python</code> 执行 <code>Javascript</code> 代码，通过搜索找到一个库 <code>execjs</code> 。</p><p>下面是具体代码，通过 <code>complie</code> 编译 <code>Javascript</code> 代码，然后使用 <code>call</code> 调用任意方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">ctx = execjs.<span class="hljs-built_in">compile</span>(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">js code</span><br><span class="hljs-string">                     &quot;&quot;&quot;</span>)<br><br><br>ctx.call(<span class="hljs-string">&quot;getHash&quot;</span>, <span class="hljs-string">&quot;param&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="0x02-完整代码"><a href="#0x02-完整代码" class="headerlink" title="0x02 完整代码"></a>0x02 完整代码</h2><p>下面是完整代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> random<br><span class="hljs-keyword">import</span> execjs<br><br><br><span class="hljs-comment"># 读取JSON文件并解析为字典</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;data.json&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    data = json.load(file)<br><br><br><span class="hljs-comment"># 使用列表推导式收集所有的id</span><br>all_ids = [<br>    resource[<span class="hljs-string">&#x27;id&#x27;</span>]<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> data[<span class="hljs-string">&#x27;data&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;children&#x27;</span> <span class="hljs-keyword">in</span> item<br>    <span class="hljs-keyword">for</span> child <span class="hljs-keyword">in</span> item[<span class="hljs-string">&#x27;children&#x27;</span>]<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;resourceList&#x27;</span> <span class="hljs-keyword">in</span> child<br>    <span class="hljs-keyword">for</span> resource <span class="hljs-keyword">in</span> child[<span class="hljs-string">&#x27;resourceList&#x27;</span>]<br>]<br><br>ctx = execjs.complie(<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">js code</span><br><span class="hljs-string">&quot;&quot;&quot;</span>)<br><br><span class="hljs-keyword">for</span> <span class="hljs-built_in">id</span> <span class="hljs-keyword">in</span> all_ids:<br>    data = &#123;<br>        <span class="hljs-string">&quot;viewStatus&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>        <span class="hljs-string">&quot;catalogueId&quot;</span>: <span class="hljs-built_in">id</span>,<br>        <span class="hljs-string">&quot;randomNum&quot;</span>: random.random()<br>    &#125;<br><br>    string = <span class="hljs-string">&quot;catalogueId=&#123;0&#125;&amp;viewStatus=3&amp;randomNum=&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data[<span class="hljs-string">&quot;catalogueId&quot;</span>], data[<span class="hljs-string">&quot;randomNum&quot;</span>])<br><br><br>    headers = &#123;<br>        <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/json, text/plain, */*&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br, zstd&quot;</span>,<br>        <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,<br>        <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer xxxx&quot;</span><br>        <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;85&quot;</span>,<br>        <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>        <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>        <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>,<br>        <span class="hljs-string">&quot;Pragma&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>        <span class="hljs-string">&quot;Priority&quot;</span>: <span class="hljs-string">&quot;u=1, i&quot;</span>,<br>        <span class="hljs-string">&quot;Sign&quot;</span>: ctx.call(<span class="hljs-string">&quot;getHash&quot;</span>, string),<br>        <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br>    &#125;<br><br>    time.sleep(random.randint(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>))<br><br>    response = requests.post(<span class="hljs-string">&quot;https://xxxx/xxxx/xxxx/learningRecords/add&quot;</span>, headers=headers, json=data, verify=<span class="hljs-literal">False</span>)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;current Id: &quot;</span>, <span class="hljs-built_in">id</span>)<br>    <span class="hljs-built_in">print</span>(response.status_code)<br>    <span class="hljs-built_in">print</span>(response.json())<br><br></code></pre></td></tr></table></figure><h2 id="0x03-后记"><a href="#0x03-后记" class="headerlink" title="0x03 后记"></a>0x03 后记</h2><p>经过发现其实 <code>Sign</code> 参数就是 md5 生成的，其实根本不需要用到 <code>execjs</code> 库去生成 <code>Sign</code> 值。可以直接用 <code>python</code> 的 <code>hashlib</code> 生成 <code>md5</code> 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-comment"># 请求参数</span><br>data = &#123;<br>    <span class="hljs-string">&quot;viewStatus&quot;</span>: <span class="hljs-string">&quot;3&quot;</span>,<br>    <span class="hljs-string">&quot;catalogueId&quot;</span>: <span class="hljs-built_in">id</span>,<br>    <span class="hljs-string">&quot;randomNum&quot;</span>: random.random()<br>&#125;<br><br>m = hashlib.md5()<br><br>string = <span class="hljs-string">&quot;catalogueId=&#123;0&#125;&amp;viewStatus=3&amp;randomNum=&#123;1&#125;&quot;</span>.<span class="hljs-built_in">format</span>(data[<span class="hljs-string">&quot;catalogueId&quot;</span>], data[<span class="hljs-string">&quot;randomNum&quot;</span>])<br><br><br>m.update(string.encode())<br><br>headers = &#123;<br>    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/json, text/plain, */*&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Encoding&quot;</span>: <span class="hljs-string">&quot;gzip, deflate, br, zstd&quot;</span>,<br>    <span class="hljs-string">&quot;Accept-Language&quot;</span>: <span class="hljs-string">&quot;zh-CN,zh;q=0.9,en;q=0.8&quot;</span>,<br>    <span class="hljs-string">&quot;Authorization&quot;</span>: <span class="hljs-string">&quot;Bearer xxxx&quot;</span><br>    <span class="hljs-string">&quot;Cache-Control&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Length&quot;</span>: <span class="hljs-string">&quot;85&quot;</span>,<br>    <span class="hljs-string">&quot;Content-Type&quot;</span>: <span class="hljs-string">&quot;application/json;charset=UTF-8&quot;</span>,<br>    <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;xxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Origin&quot;</span>: <span class="hljs-string">&quot;xxxxx&quot;</span>,<br>    <span class="hljs-string">&quot;Pragma&quot;</span>: <span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-string">&quot;Priority&quot;</span>: <span class="hljs-string">&quot;u=1, i&quot;</span>,<br>    <span class="hljs-string">&quot;Sign&quot;</span>: m.hexdigest(),<br>    <span class="hljs-string">&quot;Referer&quot;</span>: <span class="hljs-string">&quot;xxx&quot;</span>,<br>    <span class="hljs-string">&quot;User-Agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这个网站的加密没有那么复杂，在逆向的过程中也学到了一种防止接口重刷的方法，还是比较有意思的。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Javascript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring Security 匿名接口与IP白名单</title>
    <link href="/2024/05/05/Spring-Security-%E5%8C%BF%E5%90%8D%E6%8E%A5%E5%8F%A3%E4%B8%8EIP%E7%99%BD%E5%90%8D%E5%8D%95/"/>
    <url>/2024/05/05/Spring-Security-%E5%8C%BF%E5%90%8D%E6%8E%A5%E5%8F%A3%E4%B8%8EIP%E7%99%BD%E5%90%8D%E5%8D%95/</url>
    
    <content type="html"><![CDATA[<p>最近在公司开发公司的一个系统时，需要开放一些接口提供给其他系统进行调用，考虑到这些开放接口的安全性问题，所以需要做一些限制来让这些接口即使被开放也能更安全的被其他系统调用，所以才有了这篇文章。<br />目前的想法是，限制固定的 <code>IP</code> 列表对应固定的开放接口列表允许访问，但是其他非开放的接口，也就是要授权的，是不允许这些固定 <code>IP</code> 列表访问。<br><a name="eCd6h"></a></p><h2 id="一、access-和-hasIpAddress-实现"><a href="#一、access-和-hasIpAddress-实现" class="headerlink" title="一、access()  和 hasIpAddress() 实现"></a>一、<code>access()</code>  和 <code>hasIpAddress()</code> 实现</h2><p><code>hasIpAddress</code> ：这个方法传入指定的 <code>IP</code> 地址或网段，和 <code>antMatchers/mvcMatchers/anyRequest</code> 一起使用，如果是网段，那么任意一个属于该网段内的 <code>IP</code> 都可以访问的到，如果是 <code>IP</code> ，那么则要完全匹配相同的 <code>IP</code> 地址。<br />查看源码是如下，生成了一个字符串，不过最终会调用 <code>IpAddressMatcher.matches</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// ExpressionUrlAuthorizationConfigurer.hasIpAddress </span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">hasIpAddress</span><span class="hljs-params">(String ipAddressExpression)</span> &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hasIpAddress(&#x27;&quot;</span> + ipAddressExpression + <span class="hljs-string">&quot;&#x27;)&quot;</span>;<br>&#125;<br><br><span class="hljs-comment">// IpAddressMatcher.matches</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">matches</span><span class="hljs-params">(String address)</span> &#123;<br>    <span class="hljs-type">InetAddress</span> <span class="hljs-variable">remoteAddress</span> <span class="hljs-operator">=</span> parseAddress(address);<br>    <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.requiredAddress.getClass().equals(remoteAddress.getClass())) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.nMaskBits &lt; <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> remoteAddress.equals(<span class="hljs-built_in">this</span>.requiredAddress);<br>    &#125;<br>    <span class="hljs-type">byte</span>[] remAddr = remoteAddress.getAddress();<br>    <span class="hljs-type">byte</span>[] reqAddr = <span class="hljs-built_in">this</span>.requiredAddress.getAddress();<br>    <span class="hljs-type">int</span> <span class="hljs-variable">nMaskFullBytes</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.nMaskBits / <span class="hljs-number">8</span>;<br>    <span class="hljs-type">byte</span> <span class="hljs-variable">finalByte</span> <span class="hljs-operator">=</span> (<span class="hljs-type">byte</span>) (<span class="hljs-number">0xFF00</span> &gt;&gt; (<span class="hljs-built_in">this</span>.nMaskBits &amp; <span class="hljs-number">0x07</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nMaskFullBytes; i++) &#123;<br>        <span class="hljs-keyword">if</span> (remAddr[i] != reqAddr[i]) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (finalByte != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">return</span> (remAddr[nMaskFullBytes] &amp; finalByte) == (reqAddr[nMaskFullBytes] &amp; finalByte);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>access</code> 方法：和 <code>antMatchers/mvcMatchers/anyRequest</code> 一起使用，这个方法传入一个或多个表达式字符串，进行授权或是其他处理。下面是一些示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">httpSecurity<br>    .antMatchers()<br>    .access(<span class="hljs-string">&#x27;hasIpAddress(&#x27;</span><span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.100</span><span class="hljs-string">&#x27;))</span><br></code></pre></td></tr></table></figure><p>下面是具体的代码实现：<br />在 <code>application.yml</code> 中编写 <code>ip</code> 白名单配置属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">web:</span><br>  <span class="hljs-attr">ip-whitelist:</span> <span class="hljs-number">10.10</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span><span class="hljs-string">,</span> <span class="hljs-number">130.10</span><span class="hljs-number">.10</span><span class="hljs-number">.10</span><br>  <span class="hljs-attr">permit-api:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/hello</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">/test</span><br></code></pre></td></tr></table></figure><p> 创建响应的配置类，映射到配置文件中的配置属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;gather&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String permitIp;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permitApi;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIpWhiteList</span><span class="hljs-params">(String permitIp)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(permitIp)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    <br>        String[] ipAddresses = permitIp.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (String ipAddress : ipAddresses) &#123;<br>            sb.append(<span class="hljs-string">&quot;hasIpAddress(&#x27;&quot;</span>).append(ipAddress.trim()).append(<span class="hljs-string">&quot;&#x27;) or &quot;</span>); <span class="hljs-comment">// 拼接每个 IP 地址的条件</span><br>        &#125;<br>    <br>        <span class="hljs-type">String</span> <span class="hljs-variable">ipAddressConditions</span> <span class="hljs-operator">=</span> sb.toString();<br>        ipAddressConditions = ipAddressConditions.substring(<span class="hljs-number">0</span>, ipAddressConditions.lastIndexOf(<span class="hljs-string">&quot; or &quot;</span>));<br>        <span class="hljs-built_in">this</span>.permitIp = ipAddressConditions;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是 SecurityConfig 的配置，这里为什么不在 <code>antMatchers()</code> 方法后面接 <code>hasIpAddress()</code> 方法呢，是因为 <code>hasIpAddress()</code> 之限制了一个 <code>IP</code> 地址，就算是用网段也只限制了一个网段，那么这样肯定是不行的，所以使用 <code>access()</code> 方法可以构造出多个  <code>hasIpAddress()</code> 表达式更合适。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span><br>&#123;   <br>    <span class="hljs-meta">@Autowird</span><br>    <span class="hljs-keyword">private</span> WebConfig webconfig;<br>    <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-comment">// 注解标记允许匿名访问的url</span><br>        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.<span class="hljs-type">ExpressionInterceptUrlRegistry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> httpSecurity.authorizeRequests();<br>        permitAllUrl.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());<br>        httpSecurity<br>                .csrf().disable()<br>                .headers().cacheControl().disable().and()<br>                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">// </span><br>                .antMatchers(webConfig.getPermitApi().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]))<br>                .access(webConfig.getPermitIp())<br>                .anyRequest().authenticated()<br>                <span class="hljs-comment">// 除上面外的所有请求全部需要鉴权认证</span><br>                .and()<br>                .headers().frameOptions().disable();<br>&#125;<br></code></pre></td></tr></table></figure><p>这样配置之后，在配置文件写上填写好 <code>IP</code> 地址列表和开放接口列表<br><a name="DqLKs"></a></p><h2 id="二、自定义-Access-实现"><a href="#二、自定义-Access-实现" class="headerlink" title="二、自定义 Access 实现"></a>二、自定义 Access 实现</h2><p>通过研究 Access 的源码后，发现可以通过自定义 Access 来进行开放接口的安全性控制。<br />还是使用上面的 <code>WebConfig</code> 配置类来从配置文件中读取要开放的接口列表和 <code>IP</code> 白名单，首先要进行改造 <code>WebConfig</code> 配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;gather&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String permitIp;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; ipWhitelist;<br><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; permitApi;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setIpWhiteList</span><span class="hljs-params">(String permitIp)</span> &#123;<br>        <span class="hljs-keyword">if</span> (StringUtils.isEmpty(permitIp)) &#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    <br>        String[] ipAddresses = permitIp.split(<span class="hljs-string">&quot;,&quot;</span>);<br><br>        ipWhitelist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(ipAddresses));<br>        <br>        <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();<br>        <span class="hljs-keyword">for</span> (String ipAddress : ipAddresses) &#123;<br>            sb.append(<span class="hljs-string">&quot;hasIpAddress(&#x27;&quot;</span>).append(ipAddress.trim()).append(<span class="hljs-string">&quot;&#x27;) or &quot;</span>); <span class="hljs-comment">// 拼接每个 IP 地址的条件</span><br>        &#125;<br>    <br>        <span class="hljs-type">String</span> <span class="hljs-variable">ipAddressConditions</span> <span class="hljs-operator">=</span> sb.toString();<br>        ipAddressConditions = ipAddressConditions.substring(<span class="hljs-number">0</span>, ipAddressConditions.lastIndexOf(<span class="hljs-string">&quot; or &quot;</span>));<br>        <span class="hljs-built_in">this</span>.permitIp = ipAddressConditions;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面是一个自定义的 <code>Access</code> 类，首先对已经登录（有 <code>token</code> ）的请求时直接放行的，然后接下来是校验开发接口列表和 <code>IP</code> 白名单列表是否符合条件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousAccessService</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> GatherConfig gatherConfig;<br><br>    <span class="hljs-keyword">public</span> Boolean <span class="hljs-title function_">hasAccess</span><span class="hljs-params">(HttpServletRequest request, Authentication authentication)</span> &#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">details</span> <span class="hljs-operator">=</span> authentication.getDetails();<br>        <span class="hljs-keyword">if</span> (details <span class="hljs-keyword">instanceof</span> UserDetails) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">permitIp</span> <span class="hljs-operator">=</span> gatherConfig.getPermitIp();<br>        String[] ipAddresses = permitIp.split(<span class="hljs-string">&quot;,&quot;</span>);<br>        List&lt;String&gt; ipWhitlelist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(ipAddresses));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">path</span> <span class="hljs-operator">=</span> request.getRequestURI();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">ip</span> <span class="hljs-operator">=</span> request.getRemoteAddr();<br>        <span class="hljs-keyword">if</span> (ipWhitlelist.contains(ip) &amp;&amp; gatherConfig.getPermitApi().contains(path)) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>Spring Security</code> 配置类中按如下配置；这个配置要放到所有配置的最后面，因为其他的要先放行，这个配置要成为最后一道屏障。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span><br>&#123;   <br>    <span class="hljs-meta">@Autowird</span><br>    <span class="hljs-keyword">private</span> WebConfig webconfig;<br>    <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-comment">// 注解标记允许匿名访问的url</span><br>        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.<span class="hljs-type">ExpressionInterceptUrlRegistry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> httpSecurity.authorizeRequests();<br>        permitAllUrl.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());<br>        httpSecurity<br>                .csrf().disable()<br>                .headers().cacheControl().disable().and()<br>                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">//... 其他配置</span><br>                .anyRequest()<br>                .access(<span class="hljs-string">&quot;@AnonymousAccessService.hasAccess(request, authentication)&quot;</span>)<br>                <span class="hljs-comment">// .antMatchers(webConfig.getPermitApi().toArray(new String[0]))</span><br>                <span class="hljs-comment">// .access(webConfig.getIpWhitelist())</span><br>                <span class="hljs-comment">// .anyRequest().authenticated()</span><br>                .and()<br>                .headers().frameOptions().disable();<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="qKK4F"></a></p><h2 id="三、自定义-AccessDecisionManager-实现"><a href="#三、自定义-AccessDecisionManager-实现" class="headerlink" title="三、自定义 AccessDecisionManager 实现"></a>三、自定义 <code>AccessDecisionManager</code> 实现</h2><p><code>AccessDecisionManager</code> 是 <code>Spring Security</code> 中用于访问控制的管理器，其本身有三个实现类。<br /><code>AffirmativeBased</code> ：默认机制，采取遇到就通过的策略，<code>AccessDecisionVoter</code> 来判断是否通过、判断依据为相关访问配置，只要有一个 <code>AccessDecisionVoter</code> 通过即可拥有访问权限；需要注意：<code>AccessDecisionVoter</code> 是有多个的。<br /><code>ConsensusBased</code> ：采取大多数策略，<code>AccessDecisionVoter</code> 判断、并记录通过和拒绝的票数，哪边票数多就采取哪边，若两边票数一样，则需要判断额外判断条件。<br /><code>UnanimousBased</code> ：采取绝对原则策略，遍历所有 <code>AccessDecisionVoter</code>，至少需要1票通过，若遇到1票拒绝即抛出异常 <code>AccessDeniedException</code> 。<br />下面是自定义 <code>AccessDecisionManager</code>，其细节不包含投票的操作，只实现对开放接口和 <code>IP</code> 白名单的校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AnonymousDecisionManager</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">AccessDecisionManager</span> &#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> GatherConfig gatherConfig;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">decide</span><span class="hljs-params">(Authentication authentication, Object object, Collection&lt;ConfigAttribute&gt; configAttributes)</span> <span class="hljs-keyword">throws</span> AccessDeniedException, InsufficientAuthenticationException &#123;<br>        <span class="hljs-type">FilterInvocation</span> <span class="hljs-variable">filterInvocation</span> <span class="hljs-operator">=</span> (FilterInvocation) object;<br>        <span class="hljs-type">AntPathMatcher</span> <span class="hljs-variable">antPathMatcher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AntPathMatcher</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">finalPath</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br>        <span class="hljs-comment">// 从配置文件中匹配到要放行的路径</span><br>        <span class="hljs-keyword">for</span> (String path : gatherConfig.getPermitApi()) &#123;<br>            <span class="hljs-keyword">if</span> (antPathMatcher.match(path, filterInvocation.getRequest().getRequestURI())) &#123;<br>                finalPath = path;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 如果存在要放行的路径，那么做进一步操作</span><br>        <span class="hljs-keyword">if</span> (!StringUtils.isEmpty(finalPath)) &#123;<br>            <span class="hljs-keyword">if</span> (!CollectionUtils.isEmpty(gatherConfig.getIpWhitelist()) &amp;&amp; !gatherConfig.getIpWhitelist().contains(IpUtils.getIpAddr(filterInvocation.getRequest()))) &#123;<br>                <span class="hljs-keyword">if</span> (authentication.getPrincipal().equals(<span class="hljs-string">&quot;anonymousUser&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">AccessDeniedException</span>(<span class="hljs-string">&quot;认证失败&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(ConfigAttribute attribute)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supports</span><span class="hljs-params">(Class&lt;?&gt; clazz)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后在 <code>Spring Security</code> 配置类中配置自定义 <code>AccessDecisionManager</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true, securedEnabled = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">WebSecurityConfigurerAdapter</span><br>&#123;   <br>    <span class="hljs-meta">@Autowird</span><br>    <span class="hljs-keyword">private</span> AnonymousDecisionManager anonymousDecisionManager;<br>    <br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configure</span><span class="hljs-params">(HttpSecurity httpSecurity)</span> <span class="hljs-keyword">throws</span> Exception<br>    &#123;<br>        <span class="hljs-comment">// 注解标记允许匿名访问的url</span><br>        ExpressionUrlAuthorizationConfigurer&lt;HttpSecurity&gt;.<span class="hljs-type">ExpressionInterceptUrlRegistry</span> <span class="hljs-variable">registry</span> <span class="hljs-operator">=</span> httpSecurity.authorizeRequests();<br>        permitAllUrl.getUrls().forEach(url -&gt; registry.antMatchers(url).permitAll());<br>        httpSecurity<br>                .csrf().disable()<br>                .headers().cacheControl().disable().and()<br>                .exceptionHandling().authenticationEntryPoint(unauthorizedHandler).and()<br>                .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS).and()<br>                .authorizeRequests()<br>                <span class="hljs-comment">//... 其他配置</span><br>                .accessDecisionManager(anonymousDecisionManager)<br>                .anyRequest()<br>                .authenticated()<br>                .and()<br>                .headers().frameOptions().disable();<br>&#125;<br></code></pre></td></tr></table></figure><p><a name="kimdU"></a></p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>以上就是通过 <code>Spring Security</code> 一些内置的功能对匿名接口和 <code>IP</code> 白名单的实现，在研究这个功能的时候对于 <code>Spring Secutity</code> 也有了更深入的理解；当然上面的代码还是有些不足，如果有想动态的设置，那么只能修改配置，然后再重新系统服务，这样如果是一些比较重要的服务那可不会轻易的进行重启，所以后续我会继续完善这篇文章和这个功能，让这个功能更加完美。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring Security</tag>
      
      <tag>Spring</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Excel 自定义列导出</title>
    <link href="/2023/11/09/Excel-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E5%AF%BC%E5%87%BA/"/>
    <url>/2023/11/09/Excel-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%88%97%E5%AF%BC%E5%87%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="Excel-自定义列导出"><a href="#Excel-自定义列导出" class="headerlink" title="Excel 自定义列导出"></a>Excel 自定义列导出</h1><p>最近项目里接到一个需求，有一个数据列表页，展示的数据列较多，然后有一个导出的功能，可以根据条件筛选导出 <code>Excel</code> ；但是现在用户只想按需导出指定列的数据，以及没勾选指定行时，导出全部数据，勾选了一行或多行时，导出指定行的数据。<br>对于第二个要求来说，其实并不麻烦，无非就是根据是否勾选在 <code>sql</code> 中进行指定行过滤，主要是第一个需求比较麻烦。</p><h2 id="使用-EasyExcel-实现导出功能"><a href="#使用-EasyExcel-实现导出功能" class="headerlink" title="使用 EasyExcel 实现导出功能"></a>使用 <code>EasyExcel</code> 实现导出功能</h2><p>经过调研，发现 <code>EasyExcel</code> 在导出大量数据方面性能比较好，内存也不会占据很多，所以使用 <code>EasyExcel</code> 实现导出功能，而不是原生 <code>apache poi</code> 实现。<br>引入 <code>EasyExcel</code> 依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>easyexcel<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.2<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>定义导出的 <code>Excel</code> 类 （使用了 <code>lombok</code> ，需要引入）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;用户ID&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;用户名&quot;)</span><br>    <span class="hljs-keyword">private</span> String username;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;手机号&quot;)</span><br>    <span class="hljs-keyword">private</span> String phone;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;邮箱&quot;)</span><br>    <span class="hljs-keyword">private</span> String email;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;年龄&quot;)</span><br>    <span class="hljs-keyword">private</span> Integer age;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;地址&quot;)</span><br>    <span class="hljs-keyword">private</span> String addresses;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;创建时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date createTime;<br><br>    <span class="hljs-meta">@ExcelProperty(&quot;更新时间&quot;)</span><br>    <span class="hljs-keyword">private</span> Date updateTime;<br>&#125;<br></code></pre></td></tr></table></figure><p>写入到 <code>Excel</code> 中并且返回文件流给前端，下面是代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@PostMapping(&quot;/export&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportUser</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> User user, HttpServletResponse response)</span><br>        <span class="hljs-keyword">throws</span> IOException &#123;<br>    List&lt;User&gt; userList = userService.selectList(user);<br>    <br>    response.setContentType(<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;用户列表&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>).replaceAll(<span class="hljs-string">&quot;\\+&quot;</span>, <span class="hljs-string">&quot;%20&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename*=utf-8&#x27;&#x27;&quot;</span> + fileName + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <br>    EasyExcel.write(response.getOutputStream(), User.class)<br>        .excelType(ExcelTypeEnum.XLSX)<br>        .sheet(<span class="hljs-string">&quot;用户导出&quot;</span>).doWrite(userList);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="实现可勾选行和自定义列导出"><a href="#实现可勾选行和自定义列导出" class="headerlink" title="实现可勾选行和自定义列导出"></a>实现可勾选行和自定义列导出</h2><p>首先我们要改造传递的 <code>RequestBody</code> 传递的参数，需要支持条件筛选，指定列导出，勾选指定行导出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ExportRequest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 要导出的字段名字</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; selectFields;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 过滤的条件</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> User user;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 选中的ID</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">private</span> List&lt;Integer&gt; selectIds;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>业务层详细代码：当没有传递指定列导出时，则使用默认字段集合导出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exportBySelect</span><span class="hljs-params">(ExportRequest exportRequest, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>    List&lt;String&gt; defaultExportFields = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;username&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>, <span class="hljs-string">&quot;addresses&quot;</span>, <span class="hljs-string">&quot;phone&quot;</span>,<br>        <span class="hljs-string">&quot;createTime&quot;</span>, <span class="hljs-string">&quot;updateTime&quot;</span>));<br><br>    List&lt;User&gt; userList = userMapper.selectList(exportRequest.getselectIds(), exportRequest.getUser(), <br>                         CollectionUtils.isEmpty(exportRequest.getSelectFields()) ? defaultExportFields : exportRequest.getSelectFields());<br>    response.setContentType(<span class="hljs-string">&quot;application/vnd.openxmlformats-officedocument.spreadsheetml.sheet&quot;</span>);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> URLEncoder.encode(<span class="hljs-string">&quot;用户列表&quot;</span>, <span class="hljs-string">&quot;UTF-8&quot;</span>).replaceAll(<span class="hljs-string">&quot;\\+&quot;</span>, <span class="hljs-string">&quot;%20&quot;</span>);<br>    response.setHeader(<span class="hljs-string">&quot;Content-disposition&quot;</span>, <span class="hljs-string">&quot;attachment;filename*=utf-8&#x27;&#x27;&quot;</span> + fileName + <span class="hljs-string">&quot;.xlsx&quot;</span>);<br>    response.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>    <br>    EasyExcel.write(response.getOutputStream(), User.class)<br>        .excelType(ExcelTypeEnum.XLSX)<br>        .sheet(<span class="hljs-string">&quot;用户导出&quot;</span>).doWrite(userList);<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><code>mapper</code> 层详细代码：使用 <code>if</code> 标签对每个字段进行判断是否进行参与查询结果。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectByDynamicField&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;com.ruoyi.garden.domain.excel.FeedBackExcel&quot;</span>&gt;</span><br>    select<br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;id&#x27; in selectFields&quot;</span>&gt;</span><br>        id,<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;username&#x27; in selectFields&quot;</span>&gt;</span><br>        username,<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;phone&#x27; in selectFields&quot;</span>&gt;</span><br>        phone,<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;email&#x27; in selectFields&quot;</span>&gt;</span><br>        email<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;age&#x27; in selectFields&quot;</span>&gt;</span><br>        age,<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;createTime&#x27; in selectFields&quot;</span>&gt;</span><br>        create_time,<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;&#x27;updateTime&#x27; in selectFields&quot;</span>&gt;</span><br>        update_time<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    from user<br>    <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span><br>            AND username like concat(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;phone != null and phone != &#x27;&#x27;&quot;</span>&gt;</span><br>            AND phone like concat(&#x27;%&#x27;, #&#123;phone&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span><br>            AND email like concat(&#x27;%&#x27;, #&#123;email&#125;, &#x27;%&#x27;)<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;age != null&quot;</span>&gt;</span><br>            AND age = #&#123;age&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;createTime != null&quot;</span>&gt;</span><br>            AND create_time = #&#123;createTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span>      <br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;updateTime != null&quot;</span>&gt;</span><br>            AND update_time = #&#123;updateTime&#125;<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;selectIds != null and selectIds.size != 0&quot;</span>&gt;</span><br>            and id in<br>            <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;selectIds&quot;</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;(&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span>&gt;</span><br>                #&#123;item&#125;<br>            <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br>    ORDER BY create_time DESC<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>以上的代码实现了简单的自定义列导出到 <code>Excel</code> 中，但是如果其中其实是还有很多问题的，例如：</p><ul><li>如果要实现多表连接，那么要维护的默认字段也会越来越多，同时 <code>xml</code> 方法也会越来越长。</li><li>如果多个表之间存在相同的名字，那么相同的名字会引起歧义。</li><li>没有对传递的字段进行校验处理，如果传递了不在集合内的自定义列，那么势必会引发错误。</li><li>还有其他没考虑到的等等问题。</li></ul><p>总之，如果要实现极其完善的自定义列导出，那么这个简单的代码是肯定不够用的，需要从头开始设计一个兼容任何情况的自定义导出功能。</p>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Excel</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="/2023/06/29/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2023/06/29/Nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="Nginx-学习笔记"><a href="#Nginx-学习笔记" class="headerlink" title="Nginx 学习笔记"></a>Nginx 学习笔记</h1><p>最近一阵子经常使用到 <code>Nginx</code> ，对其中的一些配置和原理有了充分的认识，并且踩了许多坑，所以才有这篇文章用来记录。</p><h2 id="一、基本使用"><a href="#一、基本使用" class="headerlink" title="一、基本使用"></a>一、基本使用</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>Windows 安装</p><p>进入 <a href="https://nginx.org/cn/">nginx</a> 官方网站的下载页进行下载，选择最新版本下载即可，解压之后双击 <code>nginx.exe</code> 即可启动 <code>nginx</code> 。</p><p>Linux 安装 (以 Ubuntu 为例) </p><p>使用 apt 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install nginx<br></code></pre></td></tr></table></figure><p>源码编译安装：</p><p>手动编译安装 <code>nginx</code> 需要依赖某些类库，所以先安装需要的依赖类库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get install build-essential<br>sudo apt-get install libtool<br>sudo apt-get install libpcre3 libpcre3-dev<br>sudo apt-get install zlib1g-dev<br>sudo apt-get install openssl<br>sudo apt-get install gcc g++<br></code></pre></td></tr></table></figure><p>解压下载好的 <code>nginx</code> 文件夹，然后进入解压后的目录，执行如下命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">默认安装的路径是 /usr/local/nginx</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果不想安装在 /usr/local/nginx，用 --prefix 参数指定安装位置</span><br>./configure<br></code></pre></td></tr></table></figure><p>执行安装操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">make &amp;&amp; make install<br></code></pre></td></tr></table></figure><h3 id="2-常用命令"><a href="#2-常用命令" class="headerlink" title="2. 常用命令"></a>2. 常用命令</h3><p>下面是一些常用的 nginx 命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">启动，使用 conf 下的默认配置文件 nginx.conf</span><br>./nginx<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">使用特定配置文件</span><br>./nginx -c /root/nginx.conf<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止</span><br>./nginx -s quit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">重新加载配置文件并且重启</span><br>./nginx -s reload<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">测试配置文件是否正确</span><br>./nginx -t<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">查看nginx编译参数及nginx版本</span><br>./nginx -V<br></code></pre></td></tr></table></figure><h3 id="3-升级与回滚"><a href="#3-升级与回滚" class="headerlink" title="3. 升级与回滚"></a>3. 升级与回滚</h3><h4 id="3-1-升级"><a href="#3-1-升级" class="headerlink" title="3.1. 升级"></a>3.1. 升级</h4><p>这里的升级只涉及到服务器环境中 (Linux) 升级的操作。</p><blockquote><p>普通升级</p></blockquote><p>如果只是普通的升级，那么可以在停止升级版本之前 nginx 的前提下，更新会方便很多。</p><p>停止原来的的 nginx：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">cd /usr/local/nginx/sbin<br>./nginx -s quit<br></code></pre></td></tr></table></figure><p>编译新的 nginx ，编译之前，要查看旧的 nginx 是否有额外的编译参数并且备份旧的 nginx 执行文件，如果有则也需要一并复制过来。编译的时候尽量使用 make 而不是 make install ，make install 会执行安装命令，保险起见，使用 make 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">检查是否有额外的编译参数</span><br>cd /usr/local/nginx/sbin &amp;&amp; ./nginx -V<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份 nginx</span><br>mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份 配置文件</span><br>cp /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.bak<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译新的 nginx</span><br>cd /root/nginx-1.16.1/ &amp;&amp; ./configure --prefix=/usr/local/nginx/<br>make<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拷贝新的 nginx 执行文件到 /usr/local/nginx/sbin/</span><br>cp /root/nginx-1.16.1/obj/nginx /usr/local/nginx/sbin<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">启动新的 nginx</span><br>cp /usr/local/nginx/sbin/ &amp;&amp; ./nginx<br></code></pre></td></tr></table></figure><blockquote><p>不停机升级</p></blockquote><p>不停机的升级则稍微麻烦点，需要让 nginx 在不停止的情况下从旧版本过渡到新版本，但是好在 nginx 自身实现了平滑升级的操作。</p><p>下面是 nginx 支持 kill 的信号</p><p>nginx 主进程支持的信号:</p><ul><li>TERM, INT 作用和nginx -s stop一致;</li><li>QUIT 作用和nginx -s quit一致;</li><li>HUP 作用和nginx -s reload一致</li><li>USR1 作用和nginx -s reopen一致;</li><li>USR2 平滑升级nginx</li><li>WINCH 平滑关闭工作进程;</li></ul><p>nginx 工作进程支持的信号:</p><ul><li>TERM, INT 快速停止</li><li>QUIT 优雅停止</li><li>USR1 重新开启新的日志文件</li><li>WINCH 异常终止调试(需要启用debug_points选项)</li></ul><p>下面是一个 nginx 升级的步骤：</p><p>下载新版本 nginx 并解压，然后执行配置命令和编译命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">以 nginx.1.14.2 升级 1.18.0 为例</span><br>tar -zxvf nginx-1.18.0 &amp;&amp; cd nginx-1.18.0<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行 ./configure 命令，首先需要检查旧版本的 nginx 是否有额外的编译参数，如果有需要一并拷贝过来</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">默认的 prefix 是在 /usr/local/nginx，如果你的不是，则需要指定和旧 nginx 一样的位置</span><br>./configure<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行 make</span><br>make<br></code></pre></td></tr></table></figure><p>备份旧的 nginx 和配置文件，这里可以直接使用 mv 命令，不影响目前 nginx 的运行。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mv /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old<br>cp /usr/local/nginx/conf/nginx.conf /usr/local/nginx/conf/nginx.conf.bak<br></code></pre></td></tr></table></figure><p>复制新版本编译的 nginx 到之前的安装路径中；新版本编译后的 nginx 在解压后的 nginx 的 obj 文件夹下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">cp obj/nginx /usr/local/nginx/sbin/.<br></code></pre></td></tr></table></figure><p>其实这里可以仔细看看新版本文件夹下的 Makefile 文件，会发现自带一个 upgrade 命令。</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cmake">upgrade:<br>        /usr/local/nginx/sbin/nginx -t<br><br>        kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`<br>        sleep <span class="hljs-number">1</span><br>        <span class="hljs-keyword">test</span> -f /usr/local/nginx/logs/nginx.pid.oldbin<br><br>        kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`<br></code></pre></td></tr></table></figure><p>回到新版本的解压目录下，执行更新操作，即可完成 nginx 的不停机升级操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo make upgrade<br></code></pre></td></tr></table></figure><h4 id="3-2-回滚"><a href="#3-2-回滚" class="headerlink" title="3.2. 回滚"></a>3.2. 回滚</h4><p>什么时候会需要进行 nginx 的回滚，当新版本的 nginx 不稳定，可能需要；这里的升级只涉及到服务器环境中 (Linux) 升级的操作；</p><blockquote><p>普通回滚</p></blockquote><p>如果是进行普通的回滚，那么步骤很简单，下面是步骤。</p><p>如果是旧版本 nginx  还在，那么直接停掉新版本的 nginx ，启动旧版本的 nginx 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">假设新旧版本 nginx 都在 /usr/local/nginx/sbin 下</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">停止新版本的 nginx</span><br>./nginx -s quit<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">备份新版本的 nginx 以防万一</span><br>mv nginx nginx.new<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">恢复旧版本的 nginx 并且启动</span><br>mv nginx.old nginx &amp;&amp; ./nginx<br></code></pre></td></tr></table></figure><blockquote><p>不停机回滚</p></blockquote><p>不停机的回滚如同不停机升级一样，需要使用到 nginx  的信号机制，这里需要提到前面nginx 的 make upgrade 操作；我们更新一般都是在服务器上进行更新于回滚，那么就可以不使用 make upgrade 命令，为什么呢，先看 make upgrade 命令做了什么。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs shell">upgrade:<br>        /usr/local/nginx/sbin/nginx -t<br><br>        kill -USR2 `cat /usr/local/nginx/logs/nginx.pid`<br>        sleep 1<br>        test -f /usr/local/nginx/logs/nginx.pid.oldbin<br><br>        kill -QUIT `cat /usr/local/nginx/logs/nginx.pid.oldbin`<br></code></pre></td></tr></table></figure><p>前面的指令都是正常的，但是最后一步，由于 <code>USR2</code> 信号会启动新的进程，但是旧版本的主进程是还在的，如果最后使用 <code>-QUIT</code> 信号，那么将会把旧版本的主进程彻底停掉，这个时候如果想要进行版本回退，那么则无法进行平滑回退，因为旧版本的 nginx 进程已经被退出了，所以我们选择在进行更新时不退出旧版本的进程，方便新版本使用时出现问题及时回滚。</p><p>下面是回滚的步骤，假设在升级的过程中：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">给旧的 nginx 主进程发送热更新信号</span><br>kill -USR2 6789<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭旧版本的 nginx 工作进程 (主进程保留)</span><br>kill -WINCH 6789<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">发送HUP信号给旧版本的主进程</span><br>kill -HUP6789<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">关闭新版本的主进程</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果没有关闭，强制关闭新版本的主进程和工作进程</span><br>kill -QUIT 7890<br></code></pre></td></tr></table></figure><h2 id="二、配置文件"><a href="#二、配置文件" class="headerlink" title="二、配置文件"></a>二、配置文件</h2><h3 id="1-配置文件结构"><a href="#1-配置文件结构" class="headerlink" title="1. 配置文件结构"></a>1. 配置文件结构</h3><p>Nginx 配置文件结构是由多个块（Block）组成的，每个块包含一组指令（Directive），指令用来配置 Nginx 的行为。Nginx 配置文件结构如下：</p><p>全局块（Global Block）：全局块是配置文件的第一部分，它包含全局指令，对整个 Nginx 服务器都生效。全局块中可以设置一些全局参数，如 worker_processes、pid 等。</p><p>Events 块：Events 块用来配置 Nginx 如何处理连接、事件、工作进程等底层参数。Events 块以 events { … } 开始，以 } 结束。在 Events 块中可以设置一些事件相关的参数，如 worker_connections 等。</p><p>Http 块：Http 块用来配置 HTTP 服务相关的指令，包括 HTTP 服务器、代理、缓存、负载均衡、安全等。Http 块以 http { … } 开始，以 } 结束。在 Http 块中可以设置一些 HTTP 相关的参数，如 server、upstream、location 等。</p><p>Server 块：Server 块用来配置一个虚拟主机，指定监听端口、域名、访问日志、错误日志、默认网站等。一个 Http 块可以包含多个 Server 块。Server 块以 server { … } 开始，以 } 结束。在 Server 块中可以设置一些虚拟主机相关的参数，如 listen、server_name、access_log、error_log 等。</p><p>Location 块：Location 块用来配置虚拟主机下的具体 URL 路径，指定访问该路径时的处理方式，如反向代理、缓存、重定向等。一个 Server 块可以包含多个 Location 块。Location 块以 location { … } 开始，以 } 结束。在 Location 块中可以设置一些路径相关的参数，如 proxy_pass、root、try_files 等。</p><p><strong>注：有些配置属性可以在多个作用域中配置</strong></p><h3 id="2-全局块"><a href="#2-全局块" class="headerlink" title="2. 全局块"></a>2. 全局块</h3><p>下面介绍一下全局块常用的属性：</p><p><code>user</code> ：指定 worker 的运行用户，默认是对应的用户名和用户组，可以重写此配置更改 nginx 执行的用户和用户组，举例：<code>user root root;</code> 在使用一些软件源安装时，此配置指定的用户和用户组是 <code>nginx</code> 。</p><p><code>work_processes</code> ：指定 nginx 工作进程的个数，默认是1，通常设置为 cpu 的核心数一致即可。</p><p><code>pid</code> ：nginx 进程 ID 文件的存放路径，如果是自己手动编译并且未指定安装位置的，默认位置是 <code>/usr/local/nginx/logs/nginx.pid</code> ，可以重写此配置更改存放路径。</p><p><code>error_log</code> ：记录服务器请求处理中的错误日志，此配置可以在 <code>http/server/location</code> 等作用域中配置。该配置的语法是：<code>error_log  file_path log_level</code> ，日志级别可以是 <code>debug, info, notice, warn, error, crit, alert, emerg</code>，只有高于定义级别的错误日志才会被写入。</p><p><code>access_log</code> ：记录客户端的请求日志，此配置可以在 <code>http/server/location</code> 等作用域中配置。配置语法是：<code>access_log  filepath</code>。</p><h3 id="3-Event-块"><a href="#3-Event-块" class="headerlink" title="3. Event 块"></a>3. Event 块</h3><p>Event 块中的属性都写在 Event 块内，下面是一些常用的配置：</p><p><code>use</code> ：指定要使用的连接事件模型，nginx 默认根据系统使用最优的事件模型。当然也可以重写此配置指定事件模型。</p><p><code>work_connections</code> ：工作进程的最大连接数，默认是每台 nginx 的 <code>work_processes * work_connections</code> 。</p><p><code>multi_accept</code> ：是否允许每个工作进程接受多个网络连接，默认关闭 (<code>off</code>)，可重写此配置打开 (<code>multi_accept on</code>) 。</p><h3 id="4-Http-块"><a href="#4-Http-块" class="headerlink" title="4. Http 块"></a>4. Http 块</h3><p>Http 块中的属性都写在 Http 块内，下面是一些常用的配置：</p><p><code>include</code> ：将另一个文件引入到当前配置中，nginx 默认引入了 <code>mime.types</code>，此文件设置了文件头对应的文件格式，如果没有则可以在 <code>mime.types</code>中新增，除此之外，<code>include</code> 指令要注意的是只能引入符合 <code>http</code> 作用域的配置文件包含的配置属性，否则会报错。</p><p><code>default_type</code>：用来配置Nginx响应前端请求默认的MIME类型。</p><p><code>upstream</code> ：用于指定一组服务器，以便用于负载均衡，并且还可以设置不同的负载均衡策略。<code>upstream</code> 指定名字后，<code>server</code> 块中的 <code>proxy_pass</code> 使用 <code>upstream</code> 的别名即可。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">upstream</span> blog &#123;<br><span class="hljs-attribute">server</span> <span class="hljs-number">10.10.10.1</span> <span class="hljs-number">7890</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">10.10.10.1</span> <span class="hljs-number">7891</span>;<br><span class="hljs-attribute">server</span> <span class="hljs-number">10.10.10.1</span> <span class="hljs-number">7892</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面没配置负载均衡策略，则会使用默认的轮询策略进行负载均衡处理。下面是其他的负载均衡策略：</p><ol><li>轮询（Round Robin）：默认的负载均衡策略。Nginx 按照定义的后端服务器列表顺序依次分发请求，每个请求按顺序发送到下一个服务器。</li><li>IP 哈希（IP Hash）：根据客户端的 IP 地址对后端服务器进行哈希计算，将相同 IP 的请求发送到同一台服务器。这样可以确保同一客户端的请求都发送到同一个服务器，适用于需要保持会话一致性的场景。除了 IP Hash 之外，还有使用 URL Hash 的方式。</li><li>最少连接（Least Connections）：将请求发送到当前连接数最少的服务器。这样可以确保将请求发送到负载较轻的服务器，以实现负载均衡。</li><li>加权轮询（Weighted Round Robin）：为每个后端服务器分配一个权重值，根据权重值决定分发请求的比例。权重值越高的服务器将获得更多的请求。</li><li>加权最少连接（Weighted Least Connections）：结合了加权和最少连接策略。根据服务器的权重值和当前连接数，动态计算每个服务器的有效权重，然后选择有效权重最高的服务器来处理请求。</li></ol><h3 id="5-Server-块"><a href="#5-Server-块" class="headerlink" title="5. Server 块"></a>5. Server 块</h3><p>Server 块中的属性都写在 Server 块内，下面是一些常用的配置：</p><p>listen 监听指定的 IP 地址 + 端口</p><p>listen 8080 监听本机的8080</p><p>listen 127.0.0.1 监听本机的所有端口</p><p>listen *:8080 | *:80  监听所有IP的8080和80端口</p><p>server_name 指定客户端访问的域名</p><p>server_name 支持定义多个，如果匹配到第一个，那么则不会匹配后面的，否则进行逐个匹配。同时 <code>server_name</code> 还支持正则匹配；下面是例子。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">server_name</span> www.example.com example.com;<br><br><span class="hljs-comment"># 正则匹配</span><br><span class="hljs-attribute">server_name</span> ~^www\.a\..*$;<br><br><span class="hljs-comment"># 匹配无效域名，最优先被匹配</span><br><span class="hljs-attribute">server</span> _;<br></code></pre></td></tr></table></figure><p>error_page  针对特定的错误码，进行错误页面配置</p><p>下面是一些配置实例：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-comment"># 对 502 503 转发到 /50x.html /50x.html 通过 location 配置 </span><br><span class="hljs-attribute">error_page</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> /50x.html;<br><span class="hljs-section">location</span> = /50x.html &#123;<br>    <span class="hljs-attribute">root</span> /usr/share/nginx/html;<br>&#125;   <br><br><span class="hljs-comment"># 甚至还可以把错误页面配置成 JSON 格式</span><br><span class="hljs-attribute">error_page</span> <span class="hljs-number">403</span> /respon_403.json;<br><span class="hljs-section">location</span> = /respon_403.json &#123;<br>  <span class="hljs-attribute">default_type</span> application/json;<br>  <span class="hljs-attribute">return</span> <span class="hljs-number">403</span> <span class="hljs-string">&#x27;&#123;&quot;code&quot;:&quot;403&quot;, &quot;message&quot;:&quot;Forbidden&quot;&#125;&#x27;</span>;<br>&#125;<br><br><span class="hljs-attribute">error_page</span> <span class="hljs-number">404</span> /respon_404.json;<br><span class="hljs-section">location</span> = /respon_404.json &#123;<br>   <span class="hljs-attribute">default_type</span> application/json;<br>   <span class="hljs-attribute">return</span> <span class="hljs-number">403</span> <span class="hljs-string">&#x27;&#123;&quot;code&quot;:&quot;404&quot;, &quot;message&quot;:&quot;Not Found&quot;&#125;&#x27;</span>;<br>&#125;<br><br>  <span class="hljs-attribute">error_page</span> <span class="hljs-number">500</span> <span class="hljs-number">502</span> <span class="hljs-number">503</span> <span class="hljs-number">504</span> /respon_500.json;<br>  <span class="hljs-section">location</span> = /respon_500.json &#123;<br>     <span class="hljs-attribute">default_type</span> application/json;<br>     <span class="hljs-attribute">return</span> <span class="hljs-number">403</span> <span class="hljs-string">&#x27;&#123;&quot;code&quot;:&quot;500&quot;, &quot;message&quot;:&quot;Server Error&quot;&#125;&#x27;</span>;<br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="6-Location-块"><a href="#6-Location-块" class="headerlink" title="6. Location 块"></a>6. Location 块</h3><p>location 块负责指定 用户访问的路径基于怎么样的匹配规则进行转发，下面是 location 的匹配规则与匹配顺序。越前优先级越高，优先匹配。</p><ol><li>精确匹配：使用 &#x3D; 前缀的 location 块会首先被匹配。例如：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> = /path &#123;<br>    // 配置 <span class="hljs-attribute">A</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果请求的路径正好是 &#x2F;path，那么将会使用配置 A 处理该请求。</p><ol><li>前缀匹配：使用 &#x2F; 作为前缀的 location 块会按照定义的顺序进行匹配。例如：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /path1 &#123;<br>    // 配置 <span class="hljs-attribute">B</span><br>&#125;<br><br>location /path2 &#123;<br>    // 配置 <span class="hljs-attribute">C</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果请求的路径是 &#x2F;path1&#x2F;foo，那么将会使用配置 B 处理该请求。如果请求的路径是 &#x2F;path2&#x2F;bar，那么将会使用配置 C 处理该请求。</p><ol><li>正则表达式匹配：使用 ~ 或 ~* 前缀的 location 块会按照定义的顺序进行匹配。例如：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~ /path/.*\.html$</span> &#123;<br>    // 配置 <span class="hljs-attribute">D</span><br>&#125;<br><br>location <span class="hljs-regexp">~ /path/.*\.txt$</span> &#123;<br>    // 配置 <span class="hljs-attribute">E</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果请求的路径是 &#x2F;path&#x2F;file.html，那么将会使用配置 D 处理该请求。如果请求的路径是 &#x2F;path&#x2F;file.txt，那么将会使用配置 E 处理该请求。</p><ol><li>带修饰符的正则表达式匹配：带有 ~ 或 ~* 前缀和 ^ 或 ~^ 修饰符的 location 块会按照定义的顺序进行匹配。例如：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> <span class="hljs-regexp">~* ^/path/</span> &#123;<br>    // 配置 <span class="hljs-attribute">F</span><br>&#125;<br><br>location <span class="hljs-regexp">~* ^/path/file</span> &#123;<br>    // 配置 <span class="hljs-attribute">G</span><br>&#125;<br></code></pre></td></tr></table></figure><p>如果请求的路径是 &#x2F;path&#x2F;foo，那么将会使用配置 F 处理该请求。如果请求的路径是 &#x2F;path&#x2F;file.html，那么将会使用配置 G 处理该请求。</p><ol><li>优先级匹配：如果存在多个匹配规则相同的 location 块，Nginx 将使用最先定义的 location 块。例如：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> /path &#123;<br>    // 配置 <span class="hljs-attribute">H</span><br>&#125;<br><br>location /path &#123;<br>    // 配置 <span class="hljs-attribute">I</span><br>&#125;<br></code></pre></td></tr></table></figure><p>在上述示例中，无论请求的路径是什么，都将使用配置 H 处理该请求，因为配置 H 在配置 I 之前定义。</p><ol><li>location &#x2F;：如果没有匹配到其他的 location 块，Nginx 将使用默认的 location &#x2F; 块。例如：</li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">location</span> / &#123;<br>    // 默认配置<br>&#125;<br></code></pre></td></tr></table></figure><p>这将匹配所有未被其他 location 块匹配到的请求。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>EventBus 学习</title>
    <link href="/2023/06/18/EventBus-%E5%AD%A6%E4%B9%A0/"/>
    <url>/2023/06/18/EventBus-%E5%AD%A6%E4%B9%A0/</url>
    
    <content type="html"><![CDATA[<h1 id="EventBus-学习"><a href="#EventBus-学习" class="headerlink" title="EventBus 学习"></a>EventBus 学习</h1><p>在项目中偶尔会使用到 guava 框架，这个框架归纳了一些很有用的工具类和功能方便开发，我在一次项目里就使用到了 guava 的 EventBus 功能，但是并没有继续了解过这个功能，此笔记就是对此功能进行复习。</p><h2 id="一、从发布订阅模式-x2F-观察者模式说起"><a href="#一、从发布订阅模式-x2F-观察者模式说起" class="headerlink" title="一、从发布订阅模式&#x2F;观察者模式说起"></a>一、从发布订阅模式&#x2F;观察者模式说起</h2><h3 id="1-观察者模式"><a href="#1-观察者模式" class="headerlink" title="1. 观察者模式"></a>1. 观察者模式</h3><p>观察者模式（Observer Pattern）是一种行为设计模式，它定义了一种一对多的依赖关系，让多个观察对象同时监听某一个主题对象。当主题对象发生变化时，它的所有观察者都会收到通知并进行相应的更新操作。</p><p>在观察者模式中，有两个核心角色：Subject（主题）和 Observer（观察者）。Subject 维护着一个观察者列表，而 Observer 注册到 Subject 中，并在 Subject 状态改变时接收通知。</p><p>具体来说，观察者模式中包含以下几个要素：</p><ul><li>抽象主题（Subject）：定义了被观察对象的基本行为，它维护着所有观察者对象的引用，提供了增加和删除观察者对象的方法。</li><li>具体主题（ConcreteSubject）：继承或实现了抽象主题，实现了被观察对象状态改变的业务逻辑，并通知所有注册的观察者对象。</li><li>抽象观察者（Observer）：定义了观察者对象的基本行为，它提供了被通知时所需执行的方法。</li><li>具体观察者（ConcreteObserver）：继承或实现了抽象观察者，实现了观察者接收到主题通知后需要执行的业务逻辑。</li></ul><p>观察者模式的优点在于当主题对象的状态发生改变时，所有依赖它的观察者对象都会得到通知并自动更新。这样就避免了对象之间耦合度过高的情况，同时也提高了系统的可维护性和扩展性。</p><p>下面是一个简单的观察者模式实现，先定义一个观察者接口，可以有不同的具体观察者实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Observer</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义 Subject 接口，并且定义注册观察者，移除观察者，通知所有观察者的方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subject</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer observer)</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">(String message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现一个 Subject 接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ConcreteSubject</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subject</span> &#123;<br><br>    <span class="hljs-keyword">private</span> List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerObserver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.add(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">removeObserver</span><span class="hljs-params">(Observer observer)</span> &#123;<br>        observers.remove(observer);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">notifyObservers</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-keyword">for</span> (Observer observer : observers) &#123;<br>            observer.update(message);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>实现一个观察者：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs plain">public class ConcreteObserver implements Observer &#123;<br><br>    private String name;<br><br>    public ConcreteObserver(String name) &#123;<br>        this.name = name;<br>    &#125;<br><br>    @Override<br>    public void update(String message) &#123;<br>        System.out.println(name + &quot; received message: &quot; + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进行测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Main</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">ConcreteSubject</span> <span class="hljs-variable">subject</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteSubject</span>();<br>        <span class="hljs-type">ConcreteObserver</span> <span class="hljs-variable">observer1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver</span>(<span class="hljs-string">&quot;Alice&quot;</span>);<br>        <span class="hljs-type">ConcreteObserver</span> <span class="hljs-variable">observer2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcreteObserver</span>(<span class="hljs-string">&quot;Bob&quot;</span>);<br><br>        subject.registerObserver(observer1);<br>        subject.registerObserver(observer2);<br><br>        subject.notifyObservers(<span class="hljs-string">&quot;Hello world!&quot;</span>);<br><br>        subject.removeObserver(observer1);<br><br>        subject.notifyObservers(<span class="hljs-string">&quot;Goodbye!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-发布-订阅模式"><a href="#2-发布-订阅模式" class="headerlink" title="2. 发布-订阅模式"></a>2. 发布-订阅模式</h3><p>发布订阅模式（Publish-Subscribe Pattern）是一种消息传递模式，其中发送者（被称为发布者）不会直接将消息发送给接收者（被称为订阅者），而是将消息发送到一个中间代理，称为消息代理（Message Broker），订阅者则从该代理订阅自己关心的消息。</p><p>在这种模式下，发布者和订阅者不需要知道彼此的存在，它们只需要通过消息代理进行通信。发布者将消息发送到消息代理，订阅者从消息代理订阅它们感兴趣的消息。当消息代理接收到消息时，它将根据订阅者的订阅信息将消息传递给相应的订阅者。这种方式可以实现高度解耦，同时也方便扩展和维护。</p><p>发布订阅模式是一种常用的设计模式，在分布式系统、事件驱动系统、消息队列系统等领域都有广泛的应用。</p><p>下面是一个简单的例子，定义一个订阅者接口，负责发布通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Subscriber</span> &#123;<br>    &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(T message)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>然后实现一个发布者，因为不同的订阅者会订阅不同的消息(topic)，所以使用 map 进行存储。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Publisher</span> &#123;<br><br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Subscriber&gt;&gt; subscribers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">subscribe</span><span class="hljs-params">(String topic, Subscriber subscriber)</span> &#123;<br>        List&lt;Subscriber&gt; subscriberList = subscribers.get(topic);<br>        <span class="hljs-keyword">if</span> (subscriberList == <span class="hljs-literal">null</span>) &#123;<br>            subscriberList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>            subscribers.put(topic, subscriberList);<br>        &#125;<br>        subscriberList.add(subscriber);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unsubscribe</span><span class="hljs-params">(String topic, Subscriber subscriber)</span> &#123;<br>        List&lt;Subscriber&gt; subscriberList = subscribers.get(topic);<br>        <span class="hljs-keyword">if</span> (subscriberList != <span class="hljs-literal">null</span>) &#123;<br>            subscriberList.remove(subscriber);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(String topic, T message)</span> &#123;<br>        List&lt;Subscriber&gt; subscriberList = subscribers.get(topic);<br>        <span class="hljs-keyword">if</span> (subscriberList != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-keyword">for</span> (Subscriber subscriber : subscriberList) &#123;<br>                subscriber.post(message);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建两个实现订阅者接口的具体类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">WeatherSubscriber</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subscriber</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(T message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive message:&quot;</span> + message);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">NewsSubscriber</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Subscriber</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">post</span><span class="hljs-params">(T message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive message:&quot;</span> + message);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个简单的测试方法查看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">Publisher</span> <span class="hljs-variable">publisher</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Publisher</span>();<br>    publisher.subscribe(<span class="hljs-string">&quot;weather&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeatherSubscriber</span>());<br>    publisher.subscribe(<span class="hljs-string">&quot;news&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">WeatherSubscriber</span>());<br>    publisher.post(<span class="hljs-string">&quot;news&quot;</span>, <span class="hljs-string">&quot;send news&quot;</span>);<br>    publisher.post(<span class="hljs-string">&quot;weather&quot;</span>, <span class="hljs-string">&quot;send weather&quot;</span>);<br>&#125;<br><span class="hljs-comment">// result</span><br><span class="hljs-comment">// receive message:send news</span><br><span class="hljs-comment">// receive message:send weather</span><br></code></pre></td></tr></table></figure><h2 id="二、EventBus-的使用"><a href="#二、EventBus-的使用" class="headerlink" title="二、EventBus 的使用"></a>二、<code>EventBus</code> 的使用</h2><p>下面是 <code>EventBus</code> 的简单使用：</p><p>一个监听器可以定义多个监听方法(事件)，同一个事件可以在一个监听器内定义多次(可以但是没意义)，监听器方法只能有一个参数，不同的监听器的监听方法可以监听同一种事件(也就是参数是同一种类型的)。</p><p>使用 <code>EventBus</code> 主要使用到三个方法：</p><ul><li><code>register(Object)</code>：注册一个监听器</li><li><code>unRegister(Object)</code>：删除已注册的监听器</li><li><code>post(Object)</code>：发布事件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">News</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">News</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;News&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weather</span> &#123;<br>    <span class="hljs-keyword">private</span> String message;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weather</span><span class="hljs-params">(String message)</span> &#123;<br>        <span class="hljs-built_in">this</span>.message = message;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Weather&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;message=&#x27;&quot;</span> + message + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MultiListener</span> &#123;<br>    <br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenNews</span><span class="hljs-params">(News news)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive news: &quot;</span> + news);<br>    &#125;<br><br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenWeather</span><span class="hljs-params">(Weather weather)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive weather: &quot;</span> + weather);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeListener</span> &#123;<br>    <br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenString</span><span class="hljs-params">(String message)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive String message: &quot;</span> + message);<br>    &#125;<br><br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listenNumber</span><span class="hljs-params">(Integer number)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive number: &quot;</span> + number);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建测试方法并且查看结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">EventBus</span> <span class="hljs-variable">eventBus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>();<br>    eventBus.register(<span class="hljs-keyword">new</span> <span class="hljs-title class_">MultiListener</span>());<br>    eventBus.register(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeListener</span>());<br>    eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">News</span>(<span class="hljs-string">&quot;today no news&quot;</span>));<br>    eventBus.post(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Weather</span>(<span class="hljs-string">&quot;today weather is good&quot;</span>));<br>    eventBus.post(<span class="hljs-string">&quot;hello&quot;</span>);<br>    eventBus.post(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">receive news: News&#123;message=&#x27;today no news&#x27;&#125;</span><br><span class="hljs-comment">receive weather: Weather&#123;message=&#x27;today weather is good&#x27;&#125;</span><br><span class="hljs-comment">receive String message: hello</span><br><span class="hljs-comment">receive number: 1</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="三、深入-EventBus"><a href="#三、深入-EventBus" class="headerlink" title="三、深入 EventBus"></a>三、深入 <code>EventBus</code></h2><h3 id="1、EventBus-组成"><a href="#1、EventBus-组成" class="headerlink" title="1、EventBus 组成"></a>1、<code>EventBus</code> 组成</h3><p><code>Event</code>：事件，可以理解成 <code>kafka</code> 订阅的 <code>topic</code>，在 <code>guava</code> 中则有两种事件类型</p><ul><li>由任意非基础类型定义的对象类型</li><li><code>DeadEvent</code>，没有任何订阅者订阅的异常事件</li></ul><p><code>EventBus</code>：负责将事件分发给注册了相关事件处理方法的订阅者的对象，包含了注册、注销、发送事件等功能。主要有两种实现类</p><ul><li><code>EventBus</code>：默认的事件总线</li><li><code>AsyncEventBus</code>：异步事件总线，提供异步分发事件的能力</li></ul><p><code>SubscriberRegistry</code>：订阅注册中心，发布订阅机制就是中间有一个注册中心负责事件的分发，而 <code>SubscriberRegistry</code> 就是干这个事情的，每个 <code>EventBus</code> 都会绑定一个注册中心</p><ul><li><code>EventBus</code>创建时会创建一个注册中心，并且把自身注入到注册中心中，通过调用 <code>EventBus</code> 的 <code>register</code> 方法，实则是调用注册中心的 <code>register</code>方法把要监听器注册到注册中心，并且转换成一个事件与订阅类型的 <code>Map</code> 映射。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EventBus</span> &#123;<br>  <br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">SubscriberRegistry</span> <span class="hljs-variable">subscribers</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SubscriberRegistry</span>(<span class="hljs-built_in">this</span>);<br><br>    <span class="hljs-comment">//....</span><br><br>  <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Object object)</span> &#123;<br>    subscribers.register(object);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SubscriberRegistry</span> &#123;<br><br><span class="hljs-comment">// 线程安全集合，保存事件类型和对应的监听器的所有监听方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ConcurrentMap&lt;Class&lt;?&gt;, CopyOnWriteArraySet&lt;Subscriber&gt;&gt; subscribers =<br>      Maps.newConcurrentMap();<br>      <br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">register</span><span class="hljs-params">(Object listener)</span> &#123;<br>        Multimap&lt;Class&lt;?&gt;, Subscriber&gt; listenerMethods = findAllSubscribers(listener);<br>    <br>        <span class="hljs-keyword">for</span> (Entry&lt;Class&lt;?&gt;, Collection&lt;Subscriber&gt;&gt; entry : listenerMethods.asMap().entrySet()) &#123;<br>          Class&lt;?&gt; eventType = entry.getKey();<br>          Collection&lt;Subscriber&gt; eventMethodsInListener = entry.getValue();<br>    <br>          CopyOnWriteArraySet&lt;Subscriber&gt; eventSubscribers = subscribers.get(eventType);<br>    <br>          <span class="hljs-keyword">if</span> (eventSubscribers == <span class="hljs-literal">null</span>) &#123;<br>            CopyOnWriteArraySet&lt;Subscriber&gt; newSet = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CopyOnWriteArraySet</span>&lt;&gt;();<br>            eventSubscribers =<br>                MoreObjects.firstNonNull(subscribers.putIfAbsent(eventType, newSet), newSet);<br>          &#125;<br>          eventSubscribers.addAll(eventMethodsInListener);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>Subscriber</code>：订阅者，指对事件感兴趣并注册了事件处理方法的对象，通常是POJO类。订阅者需要提供一个或多个处理该事件的方法(即事件处理方法)，主要有两种实现类。</p><ul><li><code>Subscriber</code>：默认的订阅器实现类</li><li><code>SynchronizedSubscriber</code>：同步订阅器，让事件处理同步串行执行</li></ul><p>通过前面的注册中心，注册中心会把对应的监听器包括监听的事件封装成订阅器，所以最终事件被处理是被封装成订阅器来处理。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subscriber</span> &#123;<br>    <span class="hljs-comment">// 绑定的 EventBus</span><br>    <span class="hljs-meta">@Weak</span> <span class="hljs-keyword">private</span> EventBus bus;<br>    <br>    <span class="hljs-comment">// 绑定的监听器，也就是 EventBus register 传递的参数</span><br>    <span class="hljs-meta">@VisibleForTesting</span> <span class="hljs-keyword">final</span> Object target;<br>    <br>    <span class="hljs-comment">// 绑定的监听器内的监听方法</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Method method;<br>    <br>    <span class="hljs-comment">// EventBus 所使用的执行器</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> Executor executor;<br>    <br>    <span class="hljs-comment">// 进行事件的处理与分发</span><br>    <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">dispatchEvent</span><span class="hljs-params">(Object event)</span> &#123;<br>        executor.execute(<br>            () -&gt; &#123;<br>              <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-comment">// 使用反射调用监听器内对应事件的监听方法</span><br>                invokeSubscriberMethod(event);<br>              &#125; <span class="hljs-keyword">catch</span> (InvocationTargetException e) &#123;<br>                bus.handleSubscriberException(e.getCause(), context(event));<br>              &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2、线程安全"><a href="#2、线程安全" class="headerlink" title="2、线程安全"></a>2、线程安全</h3><p>在 EventBus 中提供了一个 <code>@AllowConcurrentEvents</code> 注解，这个注解标明监听器的监听方法是否线程安全，此方法需要配合 <code>@Subscribe</code> 一起用。</p><ul><li>如果被 <code>@Subscribe</code> 标注的监听方法没有使用 <code>@AllowConcurrentEvents</code> 注解，那么默认使用的是 <code>SynchronizedSubscriber</code> ，在多线程的情况下同一时间下 <code>EventBus</code> 多次发布同一事件时，会进行加锁操作</li><li>如果标注了此注解，则说明执行时可以并发执行(线程安全)，内部不会进行加锁操作</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Subscriber</span>&#123;<br>    <br>    <span class="hljs-keyword">static</span> Subscriber <span class="hljs-title function_">create</span><span class="hljs-params">(EventBus bus, Object listener, Method method)</span> &#123;<br>    <span class="hljs-keyword">return</span> isDeclaredThreadSafe(method)<br>        ? <span class="hljs-keyword">new</span> <span class="hljs-title class_">Subscriber</span>(bus, listener, method)<br>        : <span class="hljs-keyword">new</span> <span class="hljs-title class_">SynchronizedSubscriber</span>(bus, listener, method);<br>    &#125;<br><br>    <span class="hljs-comment">// 判断方法是否需要线程安全</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isDeclaredThreadSafe</span><span class="hljs-params">(Method method)</span> &#123;<br>    <span class="hljs-keyword">return</span> method.getAnnotation(AllowConcurrentEvents.class) != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">SynchronizedSubscriber</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Subscriber</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">SynchronizedSubscriber</span><span class="hljs-params">(EventBus bus, Object target, Method method)</span> &#123;<br>      <span class="hljs-built_in">super</span>(bus, target, method);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">invokeSubscriberMethod</span><span class="hljs-params">(Object event)</span> <span class="hljs-keyword">throws</span> InvocationTargetException &#123;<br>      <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>        <span class="hljs-built_in">super</span>.invokeSubscriberMethod(event);<br>      &#125;<br>     &#125;<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、父子事件"><a href="#3、父子事件" class="headerlink" title="3、父子事件"></a>3、父子事件</h3><p>当被监听的事件(监听器方法参数)之间存在父子关系时，发布子事件，父事件也会被触发，请看下面的例子。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>    <span class="hljs-type">EventBus</span> <span class="hljs-variable">eventBus</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">EventBus</span>();<br>    eventBus.register(<span class="hljs-keyword">new</span> <span class="hljs-title class_">TypeListener</span>());<br>    eventBus.post(<span class="hljs-number">111</span>);<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TypeListener</span> &#123;<br><br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readObject</span><span class="hljs-params">(Object object)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive object message: &quot;</span> + object);<br>    &#125;<br><br>    <span class="hljs-meta">@Subscribe</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readInteger</span><span class="hljs-params">(Integer number)</span> &#123;<br>        System.out.println(<span class="hljs-string">&quot;receive integer message: &quot;</span> + number);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// result: </span><br><span class="hljs-comment">// receive integer message: 111</span><br><span class="hljs-comment">// receive object message: 111</span><br></code></pre></td></tr></table></figure><h2 id="三、最后"><a href="#三、最后" class="headerlink" title="三、最后"></a>三、最后</h2><p>使用 <code>EventBus</code> 可以在项目中对逻辑进行解耦，例如很多地方登录注册，日志警告，可能都需要发送右键，如果每个地方都需要重写一份发送邮件的逻辑，或者是后面需要从发送邮件改成发送手机短信，那么所有地方都需要进行重写。使用 <code>EventBus</code> 的好处就是可以把这些逻辑进行事件驱动化，并且以事件的形式，支持逻辑的扩展。</p><p>当然 <code>EventBus</code> 也有一些不足之处，例如，事件，消息都存储与本地的内存中，如果服务宕机，那么消息将会丢失，如果是相对复杂的逻辑，或是消息需要持久化，那么建议还是使用诸如 <code>Kafka</code> 或 <code>RabbitMQ</code> 等更合适。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>move on</title>
    <link href="/2022/06/24/move%20on/"/>
    <url>/2022/06/24/move%20on/</url>
    
    <content type="html"><![CDATA[<h1 id="move-on"><a href="#move-on" class="headerlink" title="move on"></a>move on</h1><h2 id="0x01-多线程"><a href="#0x01-多线程" class="headerlink" title="0x01 多线程"></a>0x01 多线程</h2><p>在公司进行 BUG 处理的时候遇到一个很诡异的问题，流程是这样的：</p><ul><li>前端根据提供搜索参数，后台根据搜索参数在数据库进行过滤查询</li><li>公司使用自己封装的 ORM 框架对数据库进行条件查询</li><li>返回查询出的结果</li></ul><p>问题就出在查询的逻辑中，下面是出现的几个问题。</p><ul><li>切换页码，首次在页面上显示的总条数不一样，从第二页开始固定在一个值。(核心问题)</li><li>时不时回出现 <code>No Column id found</code></li><li>Jpa 出现查询事务报错</li></ul><h3 id="1-并行流与线程安全"><a href="#1-并行流与线程安全" class="headerlink" title="1. 并行流与线程安全"></a>1. 并行流与线程安全</h3><p>先说说 <code>No Column id found</code> 的问题，如下是发生问题的地方，<code>table(TableSchema)</code> 是模型映射到数据库的一个映射类，主要作用于实体类上，<code>FieldSchema</code> 则是属于 <code>table</code> 的映射字段，这里的作用就是取出映射的数据库字段。</p><p>乍一看好像没什么问题，使用内部迭代的方式，写法很简洁，可读性很好，但是这里使用的是 <code>parallelStream</code> 而不是 <code>stream</code>，问题就出在这里，最终取出来的数据库映射字段不是完整的，导致每次进行映射的时候就会出现 <code>No Column id</code> 的问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;String, FieldSchema&gt; fields = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;(table.getKeys().size());<br>table.getKeys().parallelStream().forEach(key -&gt;<br>                                         fields.put(key.getProperty_id(), key));<br></code></pre></td></tr></table></figure><p>这里使用一个例子来展示线程安全的问题：一个很简单的例子，计算数组每个元素的倍数，在多次测试的情况下，得出的总数和原来数组的总数不一致。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testParallelTrap</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Integer&gt; data = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(<span class="hljs-number">10000</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10000</span>; i++) &#123;<br>        data.add(i);<br>    &#125;<br>    List&lt;Integer&gt; result = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>    data.parallelStream().forEach(key -&gt; result.add(key * <span class="hljs-number">2</span>));<br>    System.out.println(<span class="hljs-string">&quot;the result size is: &quot;</span> + result.size());<br>&#125;<br></code></pre></td></tr></table></figure><p>正确的方式是，在 <code>parallelStream</code> 中使用线程安全的容器，或者使用 <code>stream</code> 中的结束方法 <code>collect()</code> 配合 <code>Collectors</code> 的<code>toList(), toMap(),toSet()</code> 方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Java">Map&lt;String, FieldSchema&gt; tables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>Map&lt;String, FieldSchema&gt; conTables = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ConcurrentHashMap</span>();<br>Map&lt;String, FieldSchema&gt; syncTables = Collections.synchronizedMap(<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;());<br><br>table.getKeys().parallelStream().forEach(key -&gt;<br>                                         tables.put(key.getProperty_id(), key));<br><br><br>Map&lt;String, FieldSchema&gt; fields = table.parallelStream().collect(<br>                Collectors.toMap(FieldSchema::getProperty_id, key -&gt; key));<br></code></pre></td></tr></table></figure><h3 id="2-static-与线程安全"><a href="#2-static-与线程安全" class="headerlink" title="2. static 与线程安全"></a>2. static 与线程安全</h3><p>找了很久，终于发现出现问题的地方了，由于从数据库获取数据到进行数据转换是多线程方式，目的是为了提高搜索效率；由于 <code>findByIds</code> 以及外部是多线程操作，同时 <code>TableSchema</code> 被定义为静态变量，导致多线程获取的表名会出现重复的情况，所以每次从数据库查询获取的总数不一样。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> TableSchema schema;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TableSchema <span class="hljs-title function_">geSchema</span><span class="hljs-params">(String deviceId)</span> &#123;<br>        <span class="hljs-keyword">if</span> (deviceId.length() &lt; LENGTH) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;device id length must greater then 5&quot;</span>);<br>        &#125;<br>        schema.setName(getTableName(deviceId));<br>        <span class="hljs-keyword">return</span> schema;<br>    &#125;    <br>&#125;<br><br><br><span class="hljs-keyword">public</span> List&lt;Policy&gt; <span class="hljs-title function_">findByIds</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String deviceId, <span class="hljs-keyword">final</span> List&lt;UUID&gt; ids)</span><br>            <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-keyword">final</span> <span class="hljs-type">TableSchema</span> <span class="hljs-variable">schema</span> <span class="hljs-operator">=</span> Policy.getPolicySchema(deviceId);<br>        <span class="hljs-type">Query</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Query</span>();<br>        query.setSchema(schema);<br>        <br>&#125;<br></code></pre></td></tr></table></figure><p>多线程中的静态方法：多个线程并发的调用某个类的静态方法，如果静态方法内部没有操作静态成员，那么就不会出现线程安全问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStaticMemberTrap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            Runner.print(finalI);<br>        &#125;);<br>        thread.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runner</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        count = count * number;<br>        System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是如果多个线程调用静态方法时，静态方法内部操作了本类的静态成员变量，那么就会出现线程安全问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testStaticMemberTrap</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">5</span>; i++) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">finalI</span> <span class="hljs-operator">=</span> i;<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(() -&gt; &#123;<br>            Runner.print(finalI);<br>        &#125;);<br>        thread.start();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Runner</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">print</span><span class="hljs-params">(<span class="hljs-type">int</span> number)</span> &#123;<br>        count = count * number;<br>        System.out.println(<span class="hljs-string">&quot;result: &quot;</span> + count);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对于静态成员变量来说，属于类的成员变量，所有类的对象同时共享，值的修改对于其他对象均可见，不恰当的使用则会造成线程安全问题。解决的方法是，不要在静态方法里面使用类的静态变量，应该在方法内部使用局部变量，才不会造成线程安全的问题。</p><p>对于项目里的代码来说，需要改成如下方式：由于 <code>TableSchema</code> 的数据在静态代码块就已经填充完毕，故使用克隆的形式重新创建一份新的 <code>TableSchema</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TableSchema <span class="hljs-title function_">getSchema</span><span class="hljs-params">(String deviceId)</span> &#123;<br>    <span class="hljs-keyword">if</span> (deviceId.length() &lt; LENGTH) &#123;<br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IndexOutOfBoundsException</span>(<span class="hljs-string">&quot;设备id必须大于5才合法&quot;</span>);<br>    &#125;<br>    <span class="hljs-type">TableSchema</span> <span class="hljs-variable">cloneAddressSchema</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TableSchema</span>();<br>    BeanUtils.copyProperties(schema, cloneAddressSchema);<br>    cloneAddressSchema.setName(getTableName(deviceId));<br>    <span class="hljs-keyword">return</span> cloneAddressSchema;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x02-Spring-JPA"><a href="#0x02-Spring-JPA" class="headerlink" title="0x02 Spring JPA"></a>0x02 Spring JPA</h2><h3 id="1-常用注解"><a href="#1-常用注解" class="headerlink" title="1. 常用注解"></a>1. 常用注解</h3><p><code>@DynamicInsert</code>：作用于使用 <code>@Entity</code> 标注的实体类上，目的是为了插入语句的时候动态插入，当成员变量为空的时候不会参与到插入语句中。</p><p><code>@DynamicUpdate</code>：作用于使用 <code>@Entity</code> 标注的实体类上，目的是为了更新语句的时候动态更新，当成员变量为空的时候不会参与到更新语句中。</p><p><code>@OrderBy</code>：作用于字段，生成 <code>SQL</code> 语句的时候指定特定的字段进行排序。</p><p><code>@GeneratedValue</code>：作用于字段，指定当前实体类主键的生成策略。</p><p><code>@Enumerated</code>：作用于枚举字段，把枚举字段的值映射到数据库的字符串字段。</p><p><code>@Transient</code>：作用于字段，指定字段不会被持久化到数据库。</p><p><code>@TypeDef</code>：作用于类上或 <code>package-info.java</code> 上，搭配 <code>@Type</code> 注解使用。</p><p><code>@TypeDefs</code>：作用于类上或 <code>package-info.java</code> 上，当一个类的字段包含多个不同的自定义映射类型时，可以使用。</p><p><code>@Type</code>：作用于字段上或方法上，定义某字段类型为自定义映射类型，搭配 <code>@TypeDef</code> 注解使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@TypeDefs(value = &#123;</span><br><span class="hljs-meta">        @TypeDef(name = &quot;jsonb&quot;, typeClass = JsonBinaryType.class)</span><br><span class="hljs-meta">&#125;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@DynamicInsert</span><br><span class="hljs-meta">@DynamicUpdate</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Address</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-keyword">private</span> Long id;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String city;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String area;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String street;<br><br>    <span class="hljs-meta">@Type(type = &quot;jsonb&quot;)</span><br>    <span class="hljs-meta">@Column(columnDefinition = &quot;jsonb&quot;)</span><br>    <span class="hljs-keyword">private</span> String detail;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> Date createdTime;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> Date updatedTime;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-Entity-的生命周期"><a href="#2-Entity-的生命周期" class="headerlink" title="2. Entity 的生命周期"></a>2. Entity 的生命周期</h3><p><a href="https://thorben-janssen.com/wp-content/uploads/2020/07/Lifecycle-Model-1024x576.png"><img src="https://thorben-janssen.com/wp-content/uploads/2020/07/Lifecycle-Model-1024x576.png" alt="img"></a></p><p>每个实体在 <code>persistence context</code> 中都存在四种状态：</p><ul><li>New: 新建对象，没有和 <code>persistence context</code> 建立关系，修改实体类数据不会触发更新。</li><li>Transient &amp; Managed: 持久化和被托管状态的对象，通过 <code>EntityManager#persist</code>，<code>JPQL</code>，等查询方式和 <code>persistence context</code> 建立联系，任何实体类的改动都会触发数据库的更新。</li><li>Detached: 游离状态，从 <code>Transient &amp; Managed</code> 状态转变而来，使用 <code>EntityManager#detach</code>，<code>clear</code>，<code>close</code>，<code>evict</code> 等方法均会使实体里从持久化状态转变到游离状态，脱离和 <code>persistence context</code> 的联系，想要重新和 <code>persistence context</code> 建立联系需要使用 <code>EntityManager#merge</code> 方法。</li><li>Removed: 移除状态，使用 <code>EntityManager#remove</code> 可以转换为移除状态，但是数据库记录不会里面删除；在事务提交或 <code>EntityManager#flush</code> 之前 <code>persistence context</code> 会生成删除语句等待删除记录。</li></ul><p><code>Managed</code> 状态下的数据保存，更新以及删除数据下的 <code>Removed</code> 状态，数据都不会立即更新到数据库，只有当你事务提交 (<code>@Transactional</code>) 或者 <code>em.flush()</code>，才会立即更新到数据库。</p><h3 id="3-Repository-自定义方法与-Transactional-Modifying"><a href="#3-Repository-自定义方法与-Transactional-Modifying" class="headerlink" title="3. Repository 自定义方法与 @Transactional/@Modifying"></a>3. Repository 自定义方法与 <code>@Transactional/@Modifying</code></h3><p>在 JPA <code>Repository</code> 中，可以通过继承 <code>JpaRepository</code> 接口的形式得到现成的 CRUD 方法，但是有的时候 <code>JpaRepository</code> 中的方法不能满足需求，就需要自定义接口方法。</p><p>需要注意的是，如果自定义 (增删改) 方法是使用 <code>@Query</code> 的方式，那么需要搭配 <code>@Modifying</code> 注解用于自定义接口方法，告诉 JPA 这是一个增删改语句。同时，不管是使用 <code>@Query</code> 的自定义接口方法或其他自定义接口方法，都应该在业务层的方法中使用 <code>@Transactional</code> 注解修饰。</p><h2 id="0x03-postgresql"><a href="#0x03-postgresql" class="headerlink" title="0x03 postgresql"></a>0x03 postgresql</h2><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>使用 docker 方式快速安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name postgres -p 5432:5432 -e POSTGRES_PASSWORD=123 -v postgres:/var/lib/postgresql/data postgres:latest<br></code></pre></td></tr></table></figure><p>更好的 cli 客户端：<code>pgcli</code>，安装方式如下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt install pgcli<br></code></pre></td></tr></table></figure><p>使用方式：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pgcli -h host -u username -d schema<br></code></pre></td></tr></table></figure><p>创建用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> username <span class="hljs-keyword">WITH</span> PASSWORD <span class="hljs-string">&#x27;*****&#x27;</span>;<br></code></pre></td></tr></table></figure><p>授权数据给刚刚创建的用户：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> DATABASE database <span class="hljs-keyword">TO</span> username;<br></code></pre></td></tr></table></figure><p>授权数据库里的表：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">GRANT</span> <span class="hljs-keyword">ALL</span> PRIVILEGES <span class="hljs-keyword">ON</span> <span class="hljs-keyword">all</span> tables <span class="hljs-keyword">in</span> schema public <span class="hljs-keyword">TO</span> username;<br></code></pre></td></tr></table></figure><h3 id="2-常用函数"><a href="#2-常用函数" class="headerlink" title="2. 常用函数"></a>2. 常用函数</h3><p>由于公司项目中的一些数据都存在 <code>postgresql</code> 的 <code>jsonb</code> 字段中，所以有的时候写 <code>sql</code> 查询特别麻烦，记一下常用的 <code>sql</code> 函数。</p><p><code>jsonb_extract_path/jsonb_extract_path_text</code>：从 <code>jsonb</code> 字段中提取某个键的值数据，text 结尾标识转换为 <code>text</code> 类型，第一个参数为要提取的 <code>jsonb</code> 数据，第二个字段为提取路径，可选还有第三等等字段 (取决于值的深度)，为提取路径的路径。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> jsonb_extract_path_text(<span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">  &quot;id&quot;: 1,</span><br><span class="hljs-string">  &quot;area&quot;: &#123;</span><br><span class="hljs-string">    &quot;name&quot;: &quot;天河区&quot;,</span><br><span class="hljs-string">    &quot;code&quot;: &#123;</span><br><span class="hljs-string">      &quot;type&quot;: &quot;String&quot;,</span><br><span class="hljs-string">      &quot;code&quot;: 1111</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;city&quot;: &quot;广州市&quot;,</span><br><span class="hljs-string">  &quot;detail&quot;: null,</span><br><span class="hljs-string">  &quot;street&quot;: &quot;&quot;,</span><br><span class="hljs-string">  &quot;createdTime&quot;: null,</span><br><span class="hljs-string">  &quot;updatedTime&quot;: null</span><br><span class="hljs-string">&#125;&#x27;</span>::jsonb, <span class="hljs-string">&#x27;area&#x27;</span>, <span class="hljs-string">&#x27;code&#x27;</span>, <span class="hljs-string">&#x27;type&#x27;</span>);<span class="hljs-keyword">SQL</span><br></code></pre></td></tr></table></figure><p><code>jsonb_array_elements/jsonb_array_elements_text</code>：从 <code>jsonb</code> 数组中遍历并提取每个数组元素。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> fruits <span class="hljs-keyword">from</span> jsonb_array_elements_text(<span class="hljs-string">&#x27;[&quot;Apple&quot;, &quot;Banana&quot;, &quot;Orange&quot;, &quot;Grape&quot;]&#x27;</span>) <span class="hljs-keyword">as</span> fruits;<br></code></pre></td></tr></table></figure><p><code>jsonb_each/jsonb_each_text</code>：从 <code>jsonb</code> 数据中提取键和值数据，最终结果形成两列。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> key, <span class="hljs-keyword">value</span><br><span class="hljs-keyword">from</span> jsonb_each_text(<span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">  &quot;id&quot;: 1,</span><br><span class="hljs-string">  &quot;area&quot;: &#123;</span><br><span class="hljs-string">    &quot;value&quot;: &#123;</span><br><span class="hljs-string">      &quot;name&quot;: &quot;天河区&quot;,</span><br><span class="hljs-string">      &quot;type&quot;: &quot;String&quot;,</span><br><span class="hljs-string">      &quot;code&quot;: 10001</span><br><span class="hljs-string">    &#125;</span><br><span class="hljs-string">  &#125;,</span><br><span class="hljs-string">  &quot;city&quot;: &quot;广州市&quot;,</span><br><span class="hljs-string">  &quot;detail&quot;: null,</span><br><span class="hljs-string">  &quot;street&quot;: &quot;&quot;,</span><br><span class="hljs-string">  &quot;createdTime&quot;: null,</span><br><span class="hljs-string">  &quot;updatedTime&quot;: null</span><br><span class="hljs-string">&#125;&#x27;</span>::jsonb)<br></code></pre></td></tr></table></figure><h3 id="3-判断-IP-地址是否包含"><a href="#3-判断-IP-地址是否包含" class="headerlink" title="3. 判断 IP 地址是否包含"></a>3. 判断 <code>IP</code> 地址是否包含</h3><p>在公司里写代码的时候，有判断 IP 地址是否包含的需求，这个时候刚好发现 <code>postgresql</code> 提供此功能，现在记录一下：</p><p>使用 <code>inet</code> 函数可以进行如下操作：<code>inet</code> 不支持 <code>192.168.30.51-12</code> 这种格式，当然这种格式本身就有问题，如果是 <code>192.168.30.1-192.168.30.100</code>，需要使用 <code>split_part()</code> 进行分割。</p><table><thead><tr><th>Operator</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td><code>&lt;</code></td><td>is less than</td><td><code>inet &#39;192.168.1.5&#39; &lt; inet &#39;192.168.1.6&#39;</code></td></tr><tr><td><code>&lt;=</code></td><td>is less than or equal</td><td><code>inet &#39;192.168.1.5&#39; &lt;= inet &#39;192.168.1.5&#39;</code></td></tr><tr><td><code>=</code></td><td>equals</td><td><code>inet &#39;192.168.1.5&#39; = inet &#39;192.168.1.5&#39;</code></td></tr><tr><td><code>&gt;=</code></td><td>is greater or equal</td><td><code>inet &#39;192.168.1.5&#39; &gt;= inet &#39;192.168.1.5&#39;</code></td></tr><tr><td><code>&gt;</code></td><td>is greater than</td><td><code>inet &#39;192.168.1.5&#39; &gt; inet &#39;192.168.1.4&#39;</code></td></tr><tr><td><code>&lt;&gt;</code></td><td>is not equal</td><td><code>inet &#39;192.168.1.5&#39; &lt;&gt; inet &#39;192.168.1.4&#39;</code></td></tr><tr><td><code>&lt;&lt;</code></td><td>is contained within</td><td><code>inet &#39;192.168.1.5&#39; &lt;&lt; inet &#39;192.168.1/24&#39;</code></td></tr><tr><td><code>&lt;&lt;=</code></td><td>is contained within or equals</td><td><code>inet &#39;192.168.1/24&#39; &lt;&lt;= inet &#39;192.168.1/24&#39;</code></td></tr><tr><td><code>&gt;&gt;</code></td><td>contains</td><td><code>inet &#39;192.168.1/24&#39; &gt;&gt; inet &#39;192.168.1.5&#39;</code></td></tr><tr><td><code>&gt;&gt;=</code></td><td>contains or equals</td><td><code>inet &#39;192.168.1/24&#39; &gt;&gt;= inet &#39;192.168.1/24&#39;</code></td></tr><tr><td><code>~</code></td><td>bitwise NOT</td><td><code>~ inet &#39;192.168.1.6&#39;</code></td></tr><tr><td><code>&amp;</code></td><td>bitwise AND</td><td><code>inet &#39;192.168.1.6&#39; &amp; inet &#39;0.0.0.255&#39;</code></td></tr><tr><td>&#96;</td><td>&#96;</td><td>bitwise OR</td></tr><tr><td><code>+</code></td><td>addition</td><td><code>inet &#39;192.168.1.6&#39; + 25</code></td></tr><tr><td><code>-</code></td><td>subtraction</td><td><code>inet &#39;192.168.1.43&#39; - 36</code></td></tr><tr><td><code>-</code></td><td>subtraction</td><td><code>inet &#39;192.168.1.43&#39; - inet &#39;192.168.1.19&#39;</code></td></tr></tbody></table><h2 id="0x04-序列化"><a href="#0x04-序列化" class="headerlink" title="0x04 序列化"></a>0x04 序列化</h2><h3 id="1-对象之间互相引用导致序列化栈溢出"><a href="#1-对象之间互相引用导致序列化栈溢出" class="headerlink" title="1. 对象之间互相引用导致序列化栈溢出"></a>1. 对象之间互相引用导致序列化栈溢出</h3><p>在使用 <code>JPA</code> 进行一对多处理的时候，进行了如下的模型定义：一个作者可以有多本图书，多个图书对应一本读书，两个实体类之间存在互相引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;author&quot;, fetch = FetchType.EAGER)</span><br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; bookList;<br>&#125;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Column</span><br>    <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@ManyToOne(fetch = FetchType.EAGER)</span><br>    <span class="hljs-keyword">private</span> Author author;<br>&#125;<br></code></pre></td></tr></table></figure><p>测试代码：无论是序列化 Book 还是 Author，都会触发 <code>com.fasterxml.jackson.databind.JsonMappingException: Infinite recursion (StackOverflowError) </code>的报错，因为 <code>Author</code> 实体类的 <code>toString</code> 包含了 <code>Book</code> 实体类，而 <code>Book</code> 实体类中的 <code>toString</code> 又包含了 <code>Author</code>，这就造成了无限循环引用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReferenceError</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>();<br>    author.setId(<span class="hljs-number">1</span>);<br>    author.setName(<span class="hljs-string">&quot;东野圭吾&quot;</span>);<br><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>    book1.setId(<span class="hljs-number">1</span>);<br>    book1.setAuthor(author);<br>    book1.setTitle(<span class="hljs-string">&quot;虚无的十字架&quot;</span>);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>    book2.setId(<span class="hljs-number">2</span>);<br>    book2.setAuthor(author);<br>    book2.setTitle(<span class="hljs-string">&quot;湖畔&quot;</span>);<br><br>    author.setBooks(Arrays.asList(book1, book2));<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">asString</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(author);<br>    System.out.println(asString);<br>&#125;<br></code></pre></td></tr></table></figure><p>解决的方法有很多：</p><ul><li>重写 <code>toString</code> 方法，在某一方的 <code>toString</code> 方法中忽略另一方在本类中的值。</li><li>在需要忽略的类的字段上添加 <code>@JsonIgnore</code> 注解。</li><li>在多的一方字段使用 <code>@JsonBackReference</code>，在一的地方使用 <code>@JsonManagedReference</code>。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Column</span> <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;author&quot;, fetch = FetchType.EAGER)</span><br>    <span class="hljs-meta">@JsonManagedReference</span><br>    <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br>&#125;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br><br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Column</span> <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@ManyToOne(fetch = FetchType.EAGER)</span><br>    <br>    <span class="hljs-meta">@JsonBackReference</span> <span class="hljs-keyword">private</span> Author author;<br>&#125;<br></code></pre></td></tr></table></figure><p>前面几种方式达到的目的都是使得包含循环引用的字段在 <code>Json</code> 字段中消失，下面这些方式则保留了循环引用的字段，只不过更改了 <code>Json</code> 的结构类型。</p><p>使用 <code>@JsonIdentityInfo</code> 用以实体类，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Book</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Column</span> <span class="hljs-keyword">private</span> String title;<br><br>    <span class="hljs-meta">@ManyToOne(fetch = FetchType.EAGER)</span> <span class="hljs-keyword">private</span> Author author;<br>&#125;<br><br><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = &quot;id&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Author</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-meta">@Id</span><br>    <span class="hljs-meta">@GeneratedValue(strategy = GenerationType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Integer id;<br><br>    <span class="hljs-meta">@Column</span> <span class="hljs-keyword">private</span> String name;<br><br>    <span class="hljs-meta">@OneToMany(mappedBy = &quot;author&quot;, fetch = FetchType.EAGER)</span> <span class="hljs-keyword">private</span> List&lt;Book&gt; books;<br>&#125;<br></code></pre></td></tr></table></figure><p>写个测试类测试下序列化，正常序列化，只不过是把循环引用的对象存储成另一种格式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testReferenceError</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">Author</span> <span class="hljs-variable">author</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Author</span>();<br>    author.setId(<span class="hljs-number">1</span>);<br>    author.setName(<span class="hljs-string">&quot;东野圭吾&quot;</span>);<br><br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>    book1.setId(<span class="hljs-number">1</span>);<br>    book1.setAuthor(author);<br>    book1.setTitle(<span class="hljs-string">&quot;虚无的十字架&quot;</span>);<br>    <span class="hljs-type">Book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>();<br>    book2.setId(<span class="hljs-number">2</span>);<br>    book2.setAuthor(author);<br>    book2.setTitle(<span class="hljs-string">&quot;湖畔&quot;</span>);<br><br>    author.setBooks(Arrays.asList(book1, book2));<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">mapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">String</span> <span class="hljs-variable">authorString</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(author);<br>    <span class="hljs-type">String</span> <span class="hljs-variable">book1String</span> <span class="hljs-operator">=</span> mapper.writeValueAsString(book1);<br>    System.out.println(authorString);<br>    System.out.println(book1String);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-前后端-Long-的处理"><a href="#2-前后端-Long-的处理" class="headerlink" title="2. 前后端 Long 的处理"></a>2. 前后端 Long 的处理</h3><p>在公司开发的时候，在与前后端联调的时候碰到一个数据类型序列化的问题，Java 传递一个 Long 类型的数据时，对于前端而言，<code>Javascript</code> 无法处理 Long 类型的数据，会导致精度丢失，下面是几种解决方法：</p><p>使用 <code>jackson</code> 的 <code>@JsonSerialize</code> 用于实体类的 Long 字段上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@JsonSerialize(using = ToStringSerializer.class)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>使用 <code>jackson</code> 的 <code>@JsonFormat</code> 用于实体类的 Long 字段上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@JsonFormat(shape = JsonFormat.Shape.STRING)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p>前面两种方式都是作用于实体类的字段，每个实体类都要设置一遍，特别麻烦，下面是针对整个项目的全局配置：通过实现<code>WebMvcConfigurer#configureMessageConverters</code> 接口方法，配置整个项目全局的 Long 类型转换。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@EnableWebMvc</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WebConfig</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">WebMvcConfigurer</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;<br>        <span class="hljs-type">MappingJackson2HttpMessageConverter</span> <span class="hljs-variable">jackson2HttpMessageConverter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MappingJackson2HttpMessageConverter</span>();<br>        <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>        <span class="hljs-type">SimpleModule</span> <span class="hljs-variable">simpleModule</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SimpleModule</span>();<br>        simpleModule.addSerializer(Long.class, ToStringSerializer.instance);<br>        simpleModule.addSerializer(Long.TYPE, ToStringSerializer.instance);<br>        objectMapper.registerModule(simpleModule);<br>        jackson2HttpMessageConverter.setObjectMapper(objectMapper);<br>        converters.add(jackson2HttpMessageConverter);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-反序列化无视未知字段"><a href="#3-反序列化无视未知字段" class="headerlink" title="3. 反序列化无视未知字段"></a>3. 反序列化无视未知字段</h3><p>公司主要使用 <code>jackson</code> 进行序列化和反序列化处理，主要原因是 <code>SpringBoot</code> 自带，以及 <code>jackson</code> 支持 Java 接口类型 <code>json</code> 动态序列化和反序列化</p><p>在一次对数据库中的 <code>json</code> 字段数据进行反序列化的过程中，发现报了一个错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field <span class="hljs-string">&quot;age&quot;</span> (<span class="hljs-keyword">class</span> <span class="hljs-title class_">com</span>.root2z.practice.model.Person), not marked as <span class="hljs-title function_">ignorable</span> <span class="hljs-params">(<span class="hljs-number">2</span> known properties: <span class="hljs-string">&quot;id&quot;</span>, <span class="hljs-string">&quot;name&quot;</span>])</span><br> at [Source: (String)<span class="hljs-string">&quot;&#123;&quot;</span>id<span class="hljs-string">&quot;:1,&quot;</span>name<span class="hljs-string">&quot;:&quot;</span>mike<span class="hljs-string">&quot;,&quot;</span>age<span class="hljs-string">&quot;:12&#125;&quot;</span>; line: <span class="hljs-number">1</span>, column: <span class="hljs-number">31</span>] (through reference chain: com.root2z.practice.model.Person[<span class="hljs-string">&quot;age&quot;</span>])<br></code></pre></td></tr></table></figure><p>这里的意思是说在反序列化 <code>json</code> 的时间检测到了为识别的 <code>json</code> 字段映射到 <code>Person</code> 类上，这里 <code>json</code> 中的 <code>age</code> 字段在 <code>Person</code> 类中是没有定义的，序列化就会报错。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-meta">@Id</span> <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-meta">@Column</span> <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserializeUnknownField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;mike\&quot;,\&quot;age\&quot;:12&#125;&quot;</span>;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> objectMapper.readValue(json, Person.class);<br>    System.out.println(person);<br>&#125;<br></code></pre></td></tr></table></figure><p>解决的方法：</p><ul><li>在类上使用 <code>@JsonIgnoreProperties(ignoreUnknown = true)</code> 注解告诉 <code>jackson</code> 无视 <code>json</code> 中未知字段</li><li>使用 <code>ObjectMapper</code> 配置 <code>DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES</code> 属性。</li></ul><p>方法 1 的标记在需要反序列化的类上，主要每个需要反序列化的类都需要设置一遍，通常是使用第二种方式，设置全局的 <code>ObjectMapper</code> 属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-meta">@Entity</span><br><span class="hljs-meta">@Table</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-meta">@JsonIgnoreProperties(ignoreUnknown = true)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>    <span class="hljs-meta">@Id</span> <span class="hljs-keyword">private</span> Integer id;<br>    <span class="hljs-meta">@Column</span> <span class="hljs-keyword">private</span> String name;<br>&#125;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">deserializeUnknownField</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> JsonProcessingException &#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">json</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&#123;\&quot;id\&quot;:1,\&quot;name\&quot;:\&quot;mike\&quot;,\&quot;age\&quot;:12&#125;&quot;</span>;<br>    <span class="hljs-type">ObjectMapper</span> <span class="hljs-variable">objectMapper</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectMapper</span>();<br>    objectMapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, <span class="hljs-literal">false</span>);<br>    <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> objectMapper.readValue(json, Person.class);<br>    System.out.println(person);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="0x05-其他"><a href="#0x05-其他" class="headerlink" title="0x05 其他"></a>0x05 其他</h2><h3 id="1-代码规范"><a href="#1-代码规范" class="headerlink" title="1. 代码规范"></a>1. 代码规范</h3><h4 id="1-集合判空"><a href="#1-集合判空" class="headerlink" title="(1). 集合判空"></a>(1). 集合判空</h4><p>不要使用集合的 <code>isEmpty()</code> 方法来判空：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindAllAddresses</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Address&gt; addresses = addressService.findAll();<br>    <br>    <span class="hljs-keyword">if</span> (addresses.isEmpty()) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确的方式：应该同时判断 <code>null</code> 和 <code>isEmpty()</code>，或者使用第三方的 <code>CollectionUtils.isEmpty</code> 来判空。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindAllAddresses</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Address&gt; addresses = addressService.findAll();<br>    <br>    <br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(addresses)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="2-异常捕捉"><a href="#2-异常捕捉" class="headerlink" title="(2). 异常捕捉"></a>(2). 异常捕捉</h4><p>不应该把异常捕获不抛出：捕获了异常，不进行处理，也不抛出，在错误定位时也无法定位，用户也无法感知到错误，这是不正确的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAddressById</span><span class="hljs-params">(id)</span> &#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressService.getAddress(<span class="hljs-number">1L</span>);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>正确的方式，转换成系统自定义的异常，同时携带上下文信息：</p><p>tips：在 <code>catch</code> 里抛出了异常就不需要打印异常日志了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetAddressById</span><span class="hljs-params">(Long id)</span> <span class="hljs-keyword">throws</span> NotFoundAddressException&#123;<br>    <span class="hljs-keyword">try</span> &#123;<br>        <span class="hljs-type">Address</span> <span class="hljs-variable">address</span> <span class="hljs-operator">=</span> addressService.getAddress(id);<br>    &#125; <span class="hljs-keyword">catch</span> (NoSuchMethodException e) &#123;<br>        <br>        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">NotFoundAddressException</span>(String.format(<span class="hljs-string">&quot;cannot found address by id:%s&quot;</span>, id));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="3-if-x2F-for-嵌套消除"><a href="#3-if-x2F-for-嵌套消除" class="headerlink" title="(3). if&#x2F;for 嵌套消除"></a>(3). if&#x2F;for 嵌套消除</h4><p>通常我们会在代码逻辑的时候，碰到许多分支逻辑，代码可能会写的嵌套层次非常深，下面几个方式可以减少嵌套的层次</p><ul><li>如果可以 <code>return</code> ，提前判断 <code>False/True</code> 进行提前返回</li><li>如果是在 <code>for</code> 循环中的 <code>if</code>，使用 <code>break/continue</code> 进行中断</li><li>使用三目运算符消除 <code>if/else</code></li><li>如果 <code>else</code> 条件多余，那么消除 <code>else</code>，只剩下 <code>if</code></li><li>使用 <code>switch</code> 表达式替代 <code>if/else if</code></li></ul><h3 id="2-第三方库隔离"><a href="#2-第三方库隔离" class="headerlink" title="2. 第三方库隔离"></a>2. 第三方库隔离</h3><p>第三方库的滥用，这就是多人开发中通常会碰到的问题。</p><p>对于个人开发的项目来说，我可以自由的选择第三方框架和库，控制权属于自己手上，这没问题，我清楚使用了什么库以及在哪里使用。</p><p>但是对于团队而言，还能以这种方式开发么，明显不能，每个人都有自己的编码风格，每个人都有自己擅长使用的库，假设每个人都在开发时都使用自己喜欢的第三方库辅助，那么整个工程将是混乱的。</p><p>假设是下面一个对从数据库取出的数据判空的情况，每个人可能有不同的写法，可能使用 <code>Spring</code> 的 <code>CollectionUtils</code> ，也有可能使用 <code>apache</code> 的 <code>CollectionUtils</code> ，每个库的 <code>CollectionUtils</code> 的 <code>isEmpty</code> 方法 (参数类型，参数个数) 可能不一样，这个时候，要是别人直接复制过来，刚好这里又已经引入了 <code>CollectionUtils</code> 的包，方法必然是会报错的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> org.springframework.util.CollectionUtils;<br><span class="hljs-keyword">import</span> org.apache.commons.collections4.CollectionUtils;<br><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testFindAllAddresses</span><span class="hljs-params">()</span> &#123;<br>    List&lt;Address&gt; addresses = addressService.findAll();<br>    <span class="hljs-keyword">if</span> (CollectionUtils.isEmpty(addresses)) &#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候就有必要进行第三方库的隔离，好处呢：</p><ul><li>屏蔽第三方库的公共调用，由封装模块实现内部调用第三方库的细节</li><li>由于屏蔽了第三方库的公共调用，每个人调用封装库即可，即使替换第三方库也不影响开发。实现第三方库的平滑替换。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CollectionUtils</span> &#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isEmpty</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Collection&lt;?&gt; collection)</span> &#123;<br>        <br>        <span class="hljs-keyword">return</span> org.springframework.util.CollectionUtils.isEmpty(collection);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">isNotEmpty</span><span class="hljs-params">(<span class="hljs-meta">@Nullable</span> Collection&lt;?&gt; collection)</span> &#123;<br>        <span class="hljs-keyword">return</span> !CollectionUtils.isEmpty(collection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是个人开发的项目，也需要做到第三方库的隔离么？对于开发规范以及软件的扩展性和伸缩性是有必要做的。</p><h2 id="0x06-闲谈"><a href="#0x06-闲谈" class="headerlink" title="0x06 闲谈"></a>0x06 闲谈</h2><p>人生第一次经历两次裁员，虽然这事不是发生在我身上，但是我觉得心情还是有点复杂，曾经是一起工作的同事，隔日就要开始为工作奔波。说到底，源头还是疫情的原因，公司面临经济危机才做出的下策，大家都能理解。</p><p>我还记得走之前，组长跟我说到，不要着眼于眼前的东西，多接触几个领域，关注关注 web3.0，区块链等等。</p><p>我现在想做的就是，做好基础建设，语言，算法，消息队列，分布式，技术前沿。</p><p>最近断断续续通关了两个游戏，一个是 FireWatch，一个是 Inside。</p><p><a href="https://imgtu.com/i/X4YoEF"><img src="https://s1.ax1x.com/2022/06/14/X4YoEF.jpg" alt="img"></a></p><p>FireWatch 的色彩风格真是特别的好看，同时游戏本身属于半开放世界游戏，可以随时的停止对话，也就是说可以当一个走路模拟器。中期的时候夹杂着一些悬疑情节，一度让我以为这要变成恐怖游戏了，不过还好没有。</p><p>整个游戏带给我最大的感受是：孤独。作为一个看火人，整个山谷内除了和主角对话的 Deliah 以及失去儿子的 Ned 之外几乎没有任何动物和人。</p><p>主角因为妻子所患阿尔茨海默症无能为力之后选择到俄怀明州的山谷当一名看火人，以此来自我放逐和避世，期间和另一名看火人 Deliah 又互相吸引，Deliah 也是因为某种原因选择当看火人来逃避，两人经历七十九天从陌生到熟悉，我本以为最后会发生什么，结果确没有。</p><p>结尾的一场大火，使得两个人都要离开山谷，这场大火烧毁了两个以此来逃避的安乐园，也烧毁了他们对过去的留念，人总是要往前看的。经历过大火之后，森林也会重新长出萌芽，而他们也会有新的开始。</p><p><a href="https://imgtu.com/i/X4ghKU"><img src="https://s1.ax1x.com/2022/06/14/X4ghKU.jpg" alt="img"></a></p><p><a href="https://imgtu.com/i/X4RCmF"><img src="https://s1.ax1x.com/2022/06/14/X4RCmF.png" alt="img"></a></p><p>Inside，全程没有对话，解谜难度简单，剧情很不错，结局很震撼。</p><p><a href="https://imgtu.com/i/X4fPi9"><img src="https://s1.ax1x.com/2022/06/14/X4fPi9.jpg" alt="img"></a></p><p><a href="https://imgtu.com/i/X4fZqO"><img src="https://s1.ax1x.com/2022/06/14/X4fZqO.jpg" alt="img"></a></p><p><a href="https://imgtu.com/i/X4WR2t"><img src="https://s1.ax1x.com/2022/06/14/X4WR2t.jpg" alt="img"></a></p>]]></content>
    
    
    <categories>
      
      <category>个人总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>一次博客部署的经历</title>
    <link href="/2022/06/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/"/>
    <url>/2022/06/14/%E8%AE%B0%E4%B8%80%E6%AC%A1%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2/</url>
    
    <content type="html"><![CDATA[<h1 id="一次博客部署的经历"><a href="#一次博客部署的经历" class="headerlink" title="一次博客部署的经历"></a>一次博客部署的经历</h1><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>在六七月份前前后后花了一个多月写一个博客项目，但是我还没有在真实环境部署过项目的经历，正好现在已经部署完了，就把部署过程写下来吧，以后忘记怎么部署了还可以看看。:)</p><h2 id="二、服务器-x2F-域名购买"><a href="#二、服务器-x2F-域名购买" class="headerlink" title="二、服务器&#x2F;域名购买"></a>二、服务器&#x2F;域名购买</h2><p>考虑到国内的服务器和域名还是比较便宜的，所以就选择了在国内购买服务器和域名。我购买的是阿里云的服务器以及域名。</p><p>为域名配置好了 <code>www</code> 记录，让域名指向我购买的服务器 <code>IP</code> 地址。</p><h2 id="三，服务器相关配置"><a href="#三，服务器相关配置" class="headerlink" title="三，服务器相关配置"></a>三，服务器相关配置</h2><p>购买服务器的第一件事就是配置 <code>ssh</code> 远程连接。首先修改服务器的 <code>/etc/ssh/sshd_config</code>，修改如下配置。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-comment"># 禁止密码登录</span><br>PasswordAuthentication no<br><span class="hljs-comment"># 关闭 root 登录</span><br>PermitRootLogin no<br><span class="hljs-comment"># 修改 ssh 端口</span><br>Port 2022<br></code></pre></td></tr></table></figure><p>这些配置防止一些频繁的暴力破解攻击，接下来在本地生成公私钥对。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">如果没特殊需求可以一路回车</span><br>ssh-keygen -t rsa<br></code></pre></td></tr></table></figure><p>把私钥留在本地，上传公钥到服务器，并且将公钥中的内容导入 <code>.ssh/authorized_keys</code> 中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">scp .ssh/id_rsa.pub root@xx.xx.xx.xx:/root/. <br><br>cat id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys<br></code></pre></td></tr></table></figure><p>这个时候还不可以登录，因为修改了默认的 22 端口，默认 22 是被阿里云的安全组放行的，但我修改的端口是没被阿里云的安全组放行的，所以要配置安全组规则。</p><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 2022，源为：<code>0.0.0.0/0</code>，保存。</p><p>重启 <code>ssh</code> ，退出服务器，采用密钥登录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">service ssh restart<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">采用密钥登录</span><br>ssh -i ~/.ssh/id_rsa root xx.xx.xx.xx<br><br>vim /etc/ssh/ssh_config<br><span class="hljs-meta prompt_"># </span><span class="language-bash">取消下面这行的注释，配置私钥默认路径</span><br>IdentityFile ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><p>当然有了这些还不够，所以还可以使用 <code>fail2ban</code> 来做更强力的防护。</p><p>安装 <code>fail2ban</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo apt-get update<br>sudo apt-get install fail2ban<br></code></pre></td></tr></table></figure><p>检查 <code>fail2ban</code> 是否启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo systemctl status fail2ban<br></code></pre></td></tr></table></figure><p>在 <code>/etc/fail2ban/jail.d/</code> 中创建一个 <code>sshd.local</code>，也就是创建一个新的监狱规则。<code>fail2ban</code> 最终会读取这个 监狱配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs shell">[sshd]<br><span class="hljs-meta prompt_"># </span><span class="language-bash">是否启用，不启用则为 <span class="hljs-literal">false</span></span><br>enabled = true<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">如果 SSH 是其他端口，需要在这里修改</span><br>port = ssh<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">存储日志文件的路径</span><br>logpath = %(sshd_log)s<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">最大尝试次数</span><br>maxretry = 3<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">拦截时间</span><br>bantime = 172800<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤规则</span><br>filter = sshd<br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">过滤的时长（秒）</span><br>findtime = 3600 <br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">执行的动作</span><br>action = iptables[name=SSH, port=ssh, protocol=tcp]<br></code></pre></td></tr></table></figure><p>重启 <code>fail2ban</code>，并且查看规则。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">fail2ban-client reload<br><br>fail2ban-client status sshd <br></code></pre></td></tr></table></figure><h2 id="三，项目部署"><a href="#三，项目部署" class="headerlink" title="三，项目部署"></a>三，项目部署</h2><p>在本地进行 <code>maven</code> 打包，并且上传到服务器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">maven package<br><br>scp target/MyBlog.jar  root@xx.xx.xx.xx:/root/.<br></code></pre></td></tr></table></figure><p>在服务器中安装 <code>jre</code>，由于只是每次部署到服务器的都是编译好的，所以只需安装 <code>jre</code> 即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install default-jre<br></code></pre></td></tr></table></figure><p>安装数据库，这里安装的是 <code>mariadb</code> 数据库。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install mariadb-server <br></code></pre></td></tr></table></figure><p>进行 <code>mariadb</code> 初始化。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mysql_secure_installation<br></code></pre></td></tr></table></figure><p>修改 <code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>  配置数据库的字符集编码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">[client]<br>default-character-set=utf8<br><br>[mysqld]<br>character-set-server=utf8<br>collation-server=utf8_general_ci<br><br>[mysql]<br>default-character-set=utf8<br></code></pre></td></tr></table></figure><p>由于高版本 (8) 的 <code>mysql</code> 加密规则是 <code>caching_sha2_password</code>，会导致普通用户连接不上，所以这里修改加密规则为 <code>mysql_native_password</code>，首先以 <code>root</code> 环境登录进 <code>mysql</code> 交互终端，执行以下命令。</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mysql">UPDATE mysql.user SET plugin = &#x27;mysql_native_password&#x27; WHERE user = &#x27;root&#x27; AND plugin = &#x27;unix_socket&#x27;;<br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><p>退出 <code>mysql</code> ，重启。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo /etc/init.d/mysql restart <br></code></pre></td></tr></table></figure><p>创建相应的数据库并且导入相应的数据库脚本和数据脚本。</p><p>由于每次启动都需要写很长的命令，所以写一个脚本，方便运行。</p><p>启动脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>name=MyBlog.jar<br>nohup java -jar $&#123;name&#125; &amp;<br></code></pre></td></tr></table></figure><p>暂停脚本：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>port=8080<br><span class="hljs-meta prompt_">#</span><span class="language-bash">根据端口号查询对应的pid</span><br>pid=$(netstat -nlp | grep :$port | awk &#x27;&#123;print $7&#125;&#x27; | awk -F&quot;/&quot; &#x27;&#123; print $1 &#125;&#x27;);<br><br>echo &quot;pid=$pid&quot;<br><span class="hljs-meta prompt_">#</span><span class="language-bash">杀掉对应的进程，如果pid不存在，则不执行</span><br>if [  -n  &quot;$pid&quot;  ];  then<br>    echo &quot;正在执行kill命令...&quot;<br>    if kill  -9  $pid; then<br>       echo &quot;执行成功&quot;<br>    fi<br>fi<br></code></pre></td></tr></table></figure><p>更改 <code>start.sh</code> 和 <code>stop.sh</code> 的权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">chmod u+x start.sh<br>chmod u+x start.sh<br></code></pre></td></tr></table></figure><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 8080，源为：<code>0.0.0.0/0</code>，保存。</p><p>执行 <code>start.sh</code> 脚本，打开浏览器输入服务器 <code>IP</code> 地址 + 8080，即能看到效果。</p><h2 id="四，反向代理与HTTPS"><a href="#四，反向代理与HTTPS" class="headerlink" title="四，反向代理与HTTPS"></a>四，反向代理与HTTPS</h2><p>为了让项目更好的访问以及安全性，接下来配置 <code>nginx</code> 和 <code>https</code>，不过这两个前提都是，服务器需要先备案。</p><h3 id="1-备案"><a href="#1-备案" class="headerlink" title="1. 备案"></a>1. 备案</h3><p>首先域名是要进行实名认证的，才能进行 <code>ICP</code> 备案，这个实名认证很快。</p><p>然后找到阿里云中的 <strong>备案服务号申请</strong>，右侧是 <code>ECS</code> 名称，在下方列表中选择当前实例，进行申请。</p><blockquote><p>基本都是填一下基本个人信息进行核验，然后就是一些主办者信息(我这里主办者是个人)，网站信息，就是描述这个网站是干什么用的( 由于我写的是博客相关的关键字，后来有客服来打电话帮我修改&#x3D; &#x3D; )，后面就是上传个人身份证正反面以及人脸识别，最后信息校验，进入 <code>ICP</code> 备案初审。</p><p>差不过隔了一天，就收到了 <strong>阿里云</strong> 的短信，提示备案订单已经提交交管局审核，去工信部验证页面使用刚才的短信验证码验证。</p><p>隔天之后，收到 <strong>工信部</strong> 的短信，告诉我备案已经成功并且给了备案号，这个需要放入网站的底部中间位置。</p></blockquote><h3 id="2-Nginx-配置与安装"><a href="#2-Nginx-配置与安装" class="headerlink" title="2. Nginx 配置与安装"></a>2. Nginx 配置与安装</h3><p><code>nginx</code> 安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">apt-get install nginx<br></code></pre></td></tr></table></figure><p>修改 <code>/etc/nginx/nginx.conf</code>，加入以下配置：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen 80;<br>    server_name youdomain;<br>    <br>    location / &#123;<br>        proxy_pass http://127.0.0.1:8080; # 端口要对应<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>        proxy_set_header X-Forwarded-Port $server_port;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启 <code> nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -s reload<br></code></pre></td></tr></table></figure><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 80，源为：<code>0.0.0.0/0</code>，保存。</p><p>打开浏览器，输入 域名 即可访问到网站，但此时还不是 HTTPS 的 </p><h3 id="3-HTTPS-配置"><a href="#3-HTTPS-配置" class="headerlink" title="3. HTTPS 配置"></a>3. HTTPS 配置</h3><p>要配置 <code>https</code> 首先要有 <code>ssl</code> 证书，这里证书是通过阿里云免费获取。</p><p><img src="https://segmentfault.com/img/bV2L74?w=2398&h=1424" alt="clipboard.png"></p><p>当申请完成后，在证书管理的列表中选择已申请的证书，进行下载，选择 <code>nginx</code> 格式下载。</p><p>上传到服务器的 <code>/usr/local/nginx/cert</code> 下，一个文件为 <code>pem</code> 后缀的，一个文件为 <code>key</code> 后缀的。</p><p>修改 <code>/etc/nginx/nginx.conf</code> 配置。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs shell">server &#123;<br>    listen 80; #监听80 http 重定向到https<br>    server_name you domain;<br>    # 强制转到 https<br>    rewrite ^(.*)$ https://$&#123;server_name&#125;$1 permanent;<br>&#125;<br><br>server &#123;<br>    listen 443 ssl; #监听443 https<br>    server_name you domain; #配置域名<br>    ssl_certificate cert/xxx.pem; #配置证书位置<br>    ssl_certificate_key cert/xxx.key; #配置证书位置<br>    location / &#123;<br>        proxy_pass http://localhost:8080; # 要反向代理的服务器<br>        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;<br>        proxy_set_header X-Forwarded-Proto $scheme;<br>        proxy_set_header X-Forwarded-Port $server_port;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>重启 <code> nginx</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo nginx -s reload<br></code></pre></td></tr></table></figure><p>找到安全组设置，手动添加一条规则，优先级任意，协议类型为自定义 <code>TCP</code>，目的为 443，源为：<code>0.0.0.0/0</code>，保存。</p><p>打开浏览器，输入 <code>https:// + 域名</code> ，就可以看到右上角的小绿锁咯。</p>]]></content>
    
    
    <categories>
      
      <category>运维</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
      <tag>SpringBoot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>再见，2021</title>
    <link href="/2022/01/19/%E5%86%8D%E8%A7%81%EF%BC%8C2021/"/>
    <url>/2022/01/19/%E5%86%8D%E8%A7%81%EF%BC%8C2021/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9884a02eca5abf8184641b091cdd639cc2f2b6d99ab3818aeaef13b3079ef469"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>个人总结</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>浅谈上下文</title>
    <link href="/2021/08/20/%E6%B5%85%E8%B0%88%E4%B8%8A%E4%B8%8B%E6%96%87/"/>
    <url>/2021/08/20/%E6%B5%85%E8%B0%88%E4%B8%8A%E4%B8%8B%E6%96%87/</url>
    
    <content type="html"><![CDATA[<h1 id="浅谈上下文"><a href="#浅谈上下文" class="headerlink" title="浅谈上下文"></a>浅谈上下文</h1><p>写 <code>Python</code> 也好久了，在编写代码时，通常会用到一个表达式，<code>with .... as .....</code>，其中用的最多的可能是打开文件的时候使用这个表达式，但是却没想过为什么要这样写，或者这样写有什么方便之处，今天就来复习一下。</p><h2 id="一、上下文管理器"><a href="#一、上下文管理器" class="headerlink" title="一、上下文管理器"></a>一、上下文管理器</h2><p>何为上下文，在自然语言中，给你一段话，如果没有在上文和下文的情况下，你无法判断这段话在讲什么，也看不懂；这在计算机里也是如此，当一个程序独立存在的时候，它不依赖任何外部的数据或变量，此时它就不存在上下文，但是当多个程序关联起来，互相引用各自的数据或变量时，那么每个程序都不能独自运行了，这个时候就需要一个上下文，来管理这些各自的外部数据和变量。</p><p>而在 <code>Python</code> 中，则有了一个上下文管理器的概念，是指实现了 <code>__enter__()</code> 方法和 <code>__exit__()</code>方法的对象；同时上下文管理器的存在也是为了管理 <code>with</code> 语句。</p><h2 id="二、with-表达式的使用"><a href="#二、with-表达式的使用" class="headerlink" title="二、with 表达式的使用"></a>二、<code>with</code> 表达式的使用</h2><p>在 <code>with</code> 表达式出现之前，对于资源的管理通常使用三段式的方式来实现，如下所示：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">finally</span>:<br>    f.close()<br></code></pre></td></tr></table></figure><p>当运行发生异常的时候，<code>finally</code> 块里的代码会确保资源被正常的关闭，以此来引发内存泄漏，或者是下面这种实现方式：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;f&#x27;</span>)<br><span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-built_in">print</span>(e)<br><span class="hljs-keyword">else</span>:<br>    f.close()<br></code></pre></td></tr></table></figure><p>当资源被正确打开时，没发生异常的情况下，代码最终回到 <code>else</code>块，而资源会被正确的关闭。由此可见这样的代码是写的非常长的，同时对资源的管理，异常的捕捉又不是十分方便，这个时候 <code>with</code> 语句就派上用场了。</p><p>使用<code>with</code> 语句，可以优雅的实现资源的关闭，如下代码所示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;some.txt&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    <span class="hljs-built_in">print</span>(f.read())<br><span class="hljs-built_in">print</span>(f.closed)<br></code></pre></td></tr></table></figure><p>在<code>with</code> 语句中使用 <code>open</code>函数时，完全不必担心打开的文件会没关闭，因为离开<code>with</code>语句块之后，此时打印<code>f.closed</code>已经可以看到为<code>True</code>，为何 <code>open</code> 函数能在 <code>with</code>语句里面做到自动关闭文件的操作，因为它内部实现了 <code>__enter__()</code> 和 <code>__exit__()</code>方法。</p><h2 id="三、实现自定义上下文管理器"><a href="#三、实现自定义上下文管理器" class="headerlink" title="三、实现自定义上下文管理器"></a>三、实现自定义上下文管理器</h2><p>实现自定义上下文的前提是，要在自定义类里面实现 <code>__enter__()</code> 方法和 <code>__exit__()</code> 方法。</p><ul><li><code>__enter__()</code>：当<code>with</code>语句块运行后， 会在上下文管理器对象里执行<code>__enter__()</code> 方法，通常情况下，这个方法应该返回一个赋值给 <code>as</code> 后变量的对象，默认情况下为 <code>None</code>，同时这个是可选的，如果不需要返回，那么同时也不需要使用 <code>as</code> 语句。标准上来说应该返回<code>self</code>。</li><li><code>__exit__()</code>：当<code>with</code> 语句结束后，上下文管理器会调用<code>__exit__()</code>方法，效果等同于<code>finally</code>关键字。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">File</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, mode, filename</span>):<br>        self.filename = filename<br>        self.mode = mode<br>        self.file = <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__enter__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__enter__&quot;</span>)<br>        self.file = <span class="hljs-built_in">open</span>(self.filename, self.mode)<br>        <span class="hljs-keyword">return</span> self.file<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__exit__</span>(<span class="hljs-params">self, exec_type, exec_val, exec_tb</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;__exit__&quot;</span>)<br>        <span class="hljs-keyword">if</span> self.file <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self.file.close()<br><br>        <span class="hljs-keyword">with</span> File(<span class="hljs-string">&#x27;some.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br>    <span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-built_in">print</span>(f.closed)<br></code></pre></td></tr></table></figure><p>当程序进入 <code>with</code> 语句块之后，<code>__exit__()</code> 方法会帮我们处理好异常，但是 <code>__exit__()</code>语句需要接受 4 个参数，第一个是 <code>self</code>，其他三个参数分别是异常类型，异常属性，异常跟踪信息。</p><h2 id="四、使用装饰器实现上下文管理器"><a href="#四、使用装饰器实现上下文管理器" class="headerlink" title="四、使用装饰器实现上下文管理器"></a>四、使用装饰器实现上下文管理器</h2><p>如果只是为了创建一个上下文管理器而创建一个类的话，未免也太麻烦了，这个时候 <code>contextlib </code> 的 <code>contextmanager</code> 装饰器就起到了作用，使用这个装饰器可以轻松的在函数上实现上下文管理器，同时它采用的是生成器的实现方式； 以下是代码示范。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> contextmanager<br><br><span class="hljs-meta">@contextmanager</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">file</span>(<span class="hljs-params">filename, mode</span>):<br>    f = <span class="hljs-built_in">open</span>(filename, mode)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">yield</span> f<br>     <span class="hljs-keyword">finally</span>:<br>file.close()<br><br><span class="hljs-keyword">with</span> file(<span class="hljs-string">&#x27;some.text&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    data = f.read()<br>    <span class="hljs-built_in">print</span>(data)<br><br><span class="hljs-built_in">print</span>(f.closed)<br></code></pre></td></tr></table></figure><h2 id="五、异步上下文装饰器"><a href="#五、异步上下文装饰器" class="headerlink" title="五、异步上下文装饰器"></a>五、异步上下文装饰器</h2><p>前面的都是基于同步的上下文管理器，<code>contextlib</code> 里还提供了异步的上下文管理器，使用 <code>asynccontextmanager</code> 实现，同样的，这个方法需要放在异步的方法上，才会起作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> contextlib <span class="hljs-keyword">import</span> asynccontextmanager<br><span class="hljs-keyword">import</span> asyncio<br><br><span class="hljs-meta">@asynccontextmanager    </span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">def</span> <span class="hljs-title function_">web_crawler</span>(<span class="hljs-params">url</span>):    <br>    data = <span class="hljs-keyword">await</span> get_page(url)  <br>    <span class="hljs-keyword">yield</span> data  <br>    <span class="hljs-keyword">await</span> save_content(url)    <br><br> <span class="hljs-keyword">async</span> <span class="hljs-keyword">with</span> web_crawler(<span class="hljs-string">&#x27;https://www.baidu.com&#x27;</span>) <span class="hljs-keyword">as</span> data:  <br>    <span class="hljs-built_in">print</span>(data)<br><br>asyncio.run(web_crawler())<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux 与 Android 剪切板同步方案</title>
    <link href="/2021/08/20/Linux%E4%B8%8EAndroid%E5%89%AA%E5%88%87%E6%9D%BF%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/"/>
    <url>/2021/08/20/Linux%E4%B8%8EAndroid%E5%89%AA%E5%88%87%E6%9D%BF%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux-与-Android-剪切板同步方案"><a href="#Linux-与-Android-剪切板同步方案" class="headerlink" title="Linux 与 Android 剪切板同步方案"></a><code>Linux</code> 与 <code>Android</code> 剪切板同步方案</h1><p>在 <code>Linux</code> 传输文件，图片，或是发送文字，都不如 <code>Windows</code> 那样方便，在 <code>Windows</code>  可以通过 <code>QQ</code> 里面发送文件，图片，或是文字等等。虽然说在<code>Linux</code>上可以通过其他方式来解决传文件的文件，例如：</p><ul><li><p><code>telegram</code></p></li><li><p>微信网页版( 在2017年9月份开始，腾讯已经 开始限制 新注册的微信号禁止登录网页版微信，老的微信号则不受影响 ，并且网页版发送的文件大小不能超过 <code>90MB</code></p></li><li><p><code>python -m http.server 80</code>，但是不能复制文本，而且有些文件需要另存为下载。</p></li><li><p>以及其他方法。。。</p></li></ul><p>现在找到 一种办法，电脑上使用 <code>GSConnect</code>，而安卓软件选择使用 <code>KDE Connect</code>。</p><p><code>GSConnect</code> 官方介绍：</p><blockquote><p>  <code>GSConnect</code> 是针对 <code>GNOME Shell</code> 的 <code>KDE Connect</code> 的完整实现，集成了 <code>Nautilus</code> 、<code>Chrome</code> 和 <code>Firefox</code>。</p><p>  将你的 PC 和 Android 设备与安装的 KDE Connect 应用配对: 传输文件，发送和接收短信文本，同步剪贴板和通知，发送鼠标和键盘输入，远程控制媒体播放器，定位你的设备，监视电池电量，在你的 PC 上启动命令，等等。</p></blockquote><p><code>GSConnect</code> 官方 <code>WIKI</code>：<a href="https://github.com/andyholmes/gnome-shell-extension-gsconnect/wiki/Installation#install-from-git">https://github.com/andyholmes/gnome-shell-extension-gsconnect/wiki/Installation#install-from-git</a></p><p><code>KDE Connect</code>可以在 <code>Google Play</code> 下载。</p><h2 id="1-安装方式"><a href="#1-安装方式" class="headerlink" title="1. 安装方式"></a>1. 安装方式</h2><p><code>GSConnect</code> 提供了两种安装方式，一种是通过从官方仓库的 <code>release</code> 页面下载最后一个版本的压缩包安装，另一种方式就是克隆官方仓库进行编译。</p><p>第一种方式的方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir -p ~/.local/share/gnome-shell/extensions<br>rm -rf ~/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io<br>unzip -o gsconnect@andyholmes.github.io.zip -d ~/.local/share/gnome-shell/extensions/gsconnect@andyholmes.github.io<br></code></pre></td></tr></table></figure><p>第二种方法如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git clone https://github.com/andyholmes/gnome-shell-extension-gsconnect.git<br>cd gnome-shell-extension-gsconnect/<br>meson _build .<br>ninja -C _build install-zip<br></code></pre></td></tr></table></figure><p>选择第一种方式更方便，不需要编译，我选择的是第一种方式。</p><p>使用第二种安装方式的时候，编译出现了点问题，缺少两个构建工具：meson， ninja。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo aptitude install meson<br></code></pre></td></tr></table></figure><p>同时会安装 meson和ninja。</p><p>开始，构建，报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">The Meson build system<br>Version: 0.45.1<br>Source dir: /home/aim/SoftWare/gnome-shell-extension-gsconnect<br>Build dir: /home/aim/SoftWare/gnome-shell-extension-gsconnect/_build<br>Build type: native build<br><br>meson.build:1:0: ERROR: Meson version is 0.45.1 but project requires &gt;= 0.49.0.<br><br>A full log can be found at /home/aim/SoftWare/gnome-shell-extension-gsconnect/_build/meson-logs/meson-log.txt<br></code></pre></td></tr></table></figure><p>原来是meson版本低于依赖的版本。安装高版本的meson</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">pip install meson==0.49.0<br></code></pre></td></tr></table></figure><h2 id="2-开始使用"><a href="#2-开始使用" class="headerlink" title="2. 开始使用"></a>2. 开始使用</h2><p>手机要和电脑处在同一个局域网，不然搜索不到。</p><p>手机打开 <code>Kde Connect</code>，点击 <code>⊕ Pair new device</code> 扫描周围设备进行配对，出现电脑名字的时候点击进行配对，电脑上点击<code>accept</code> 即可配对成功。</p><p>同时，为了方便的管理电脑上的剪切板剪切的文件，安装一个剪切板管理软件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo aptitude install copyq<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>深入Flask配置</title>
    <link href="/2020/07/10/%E6%B7%B1%E5%85%A5Flask%E9%85%8D%E7%BD%AE/"/>
    <url>/2020/07/10/%E6%B7%B1%E5%85%A5Flask%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h1 id="深入-Flask-配置"><a href="#深入-Flask-配置" class="headerlink" title="深入 Flask 配置"></a>深入 Flask 配置</h1><p>在 Flask 中，提供了丰富的全局配置来方便开发，以下是开发过程当中几个常用的配置选项。</p><table><thead><tr><th>配置名</th><th>作用</th></tr></thead><tbody><tr><td>DEBUG</td><td>启用 &#x2F; 禁用调试模式</td></tr><tr><td>SECRET_KEY</td><td>密钥</td></tr><tr><td>SERVER_NAME</td><td>服务器名和端口。需要这个选项来支持子域名 （例如： <code>&#39;myapp.dev:5000&#39;</code> ）。注意 localhost 不支持子域名，所以把这个选项设置为 “localhost” 没有意义。设置 <code>SERVER_NAME</code> 默认会允许在没有请求上下文而仅有应用上下文时生成 URL</td></tr><tr><td>SESSION_COOKIE_NAME</td><td>会话 cookie 的名称。</td></tr></tbody></table><p>更多的配置详见<a href="http://docs.jinkan.org/docs/flask/config.html">官方文档</a>。</p><p>如果要在 <code>Flask</code> 中激活某些的配置，通常有以下 8 种方式，前面的两种都是针对某个单独配置。第三种方式，就是采用字典的更新键值对的方法，因为 <code>Config</code> 类本身就是继承自字典，所以同时也继承了字典的 <code>update</code> 方法。 而后面的几种方式，则可以对多个配置项进行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">app.debug  = <span class="hljs-literal">True</span><br>app.config[<span class="hljs-string">&quot;debug&quot;</span>] = <span class="hljs-literal">True</span><br>app.config.update()<br>app.config.from_envvar()<br>app.config.from_json()<br>app.config.from_mapping()<br>app.config.from_pyfile()<br>app.config.from_object()<br></code></pre></td></tr></table></figure><p>下面谈谈其他几种方法的内部操作以及原理。</p><h2 id="一、Config-配置类的创建过程"><a href="#一、Config-配置类的创建过程" class="headerlink" title="一、Config 配置类的创建过程"></a>一、<code>Config</code> 配置类的创建过程</h2><p>首先 <code>Config</code> 类是在 <code>flask/config.py</code> 文件里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 从这里可以看出 Config类 继承了 dict</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>(<span class="hljs-title class_ inherited__">dict</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, root_path, defaults=<span class="hljs-literal">None</span></span>):<br>        <span class="hljs-built_in">dict</span>.__init__(self, defaults <span class="hljs-keyword">or</span> &#123;&#125;)<br>        self.root_path = root_path<br></code></pre></td></tr></table></figure><p>下面是 <code>flask/app.py</code> 里面的 <code>Flask</code> 类，由于这个类的代码数量庞大，所以只贴出一点用到了 <code>Config</code> 类的地方。</p><p>可以看到 <code>default_config</code> 是一个 <code>ImmutableDict</code> <strong>（不可变字典对象）</strong>，里面是所有支持的配置项，并且都给出了默认值。</p><p>而 <code>Config</code> 类会被赋值给 <code>Flask</code> 的成员对象 <code>config_class</code>，但此时这个成员对象，也就是字典对象，还没有任何数据；所以要通过 <code>Flask</code> 的 <code>make_config</code> 来为 <code>config_class</code> 赋值字典数据，而此时传入的配置就是 <code>defaults</code>，包含了 <code>Flask</code> 全部配置项。 初始时的两个配置项 <code>ENV</code> 和 <code>DEBUG</code> 会通过 <code>get_env()</code> 方法 和 <code>get_debug()</code> 方法设置为 <code>production</code> 和 <code>False</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flask</span>(<span class="hljs-title class_ inherited__">_PackageBoundObject</span>):<br>    <span class="hljs-comment"># 这里的 Config 类就是 flask/Config.py 下面的 Config 类</span><br>    config_class = Config<br><br>    <span class="hljs-comment"># 所有支持的配置项    </span><br>    default_config = ImmutableDict(<br>        &#123;<br>            <span class="hljs-string">&quot;ENV&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;TESTING&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;PROPAGATE_EXCEPTIONS&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;PRESERVE_CONTEXT_ON_EXCEPTION&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;PERMANENT_SESSION_LIFETIME&quot;</span>: timedelta(days=<span class="hljs-number">31</span>),<br>            <span class="hljs-string">&quot;USE_X_SENDFILE&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;SERVER_NAME&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;APPLICATION_ROOT&quot;</span>: <span class="hljs-string">&quot;/&quot;</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_NAME&quot;</span>: <span class="hljs-string">&quot;session&quot;</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_DOMAIN&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_PATH&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_HTTPONLY&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_SECURE&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;SESSION_COOKIE_SAMESITE&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SESSION_REFRESH_EACH_REQUEST&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;MAX_CONTENT_LENGTH&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;SEND_FILE_MAX_AGE_DEFAULT&quot;</span>: timedelta(hours=<span class="hljs-number">12</span>),<br>            <span class="hljs-string">&quot;TRAP_BAD_REQUEST_ERRORS&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;TRAP_HTTP_EXCEPTIONS&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;EXPLAIN_TEMPLATE_LOADING&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;PREFERRED_URL_SCHEME&quot;</span>: <span class="hljs-string">&quot;http&quot;</span>,<br>            <span class="hljs-string">&quot;JSON_AS_ASCII&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;JSON_SORT_KEYS&quot;</span>: <span class="hljs-literal">True</span>,<br>            <span class="hljs-string">&quot;JSONIFY_PRETTYPRINT_REGULAR&quot;</span>: <span class="hljs-literal">False</span>,<br>            <span class="hljs-string">&quot;JSONIFY_MIMETYPE&quot;</span>: <span class="hljs-string">&quot;application/json&quot;</span>,<br>            <span class="hljs-string">&quot;TEMPLATES_AUTO_RELOAD&quot;</span>: <span class="hljs-literal">None</span>,<br>            <span class="hljs-string">&quot;MAX_COOKIE_SIZE&quot;</span>: <span class="hljs-number">4093</span>,<br>        &#125;<br>    )<br><br><span class="hljs-comment"># 返回初始完毕的配置类</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">make_config</span>(<span class="hljs-params">self, instance_relative=<span class="hljs-literal">False</span></span>):<br>        root_path = self.root_path<br>        <span class="hljs-keyword">if</span> instance_relative:<br>            root_path = self.instance_path<br>        defaults = <span class="hljs-built_in">dict</span>(self.default_config)<br>        defaults[<span class="hljs-string">&quot;ENV&quot;</span>] = get_env()<br>        defaults[<span class="hljs-string">&quot;DEBUG&quot;</span>] = get_debug_flag()<br>        <span class="hljs-keyword">return</span> self.config_class(root_path, defaults)<br></code></pre></td></tr></table></figure><h2 id="二、从环境变量中读取配置属性"><a href="#二、从环境变量中读取配置属性" class="headerlink" title="二、从环境变量中读取配置属性"></a>二、从环境变量中读取配置属性</h2><p>当在环境变量中设置了配置文件的环境变量，那么则可以使用这个方法。</p><p>首先是使用 <code>os</code> 模块的 <code>environ.get()</code> 方法来获取环境变量属性值，而后再调用另一个方法，这个环境变量的属性值是一个文件路径，通常的话，这个配置文件应该方法在和启动文件在同一个路径下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_envvar</span>(<span class="hljs-params">self, variable_name, silent=<span class="hljs-literal">False</span></span>):<br>        rv = os.environ.get(variable_name)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> rv:<br>            <span class="hljs-keyword">if</span> silent:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            <span class="hljs-keyword">raise</span> RuntimeError(<br>                <span class="hljs-string">&quot;The environment variable %r is not set &quot;</span><br>                <span class="hljs-string">&quot;and as such configuration could not be &quot;</span><br>                <span class="hljs-string">&quot;loaded.  Set this variable and make it &quot;</span><br>                <span class="hljs-string">&quot;point to a configuration file&quot;</span> % variable_name<br>            )<br>        <span class="hljs-keyword">return</span> self.from_pyfile(rv, silent=silent)<br></code></pre></td></tr></table></figure><p>在项目的同目录下创建一个 <code>config.cfg</code> 配置文件，写入两个简单的配置项。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">DEBUG</span>=<span class="hljs-string">True</span><br><span class="hljs-attr">SECRET_KEY</span>=<span class="hljs-string">&quot;something&quot;</span><br></code></pre></td></tr></table></figure><p>使用  <code>os</code>  模块临时设置一个环境变量，当从环境变量中读取到配置文件后，在网页中能打印到配置属性的值。</p><p>还有一种办法是 (针对 <code>Linux</code> 环境)，新开一个终端，切换到项目的目录下，在启动项目前，先使用 <code>export FLASK_CONFIG=config.cfg</code>，然后启动文件里面只需要写 <code>app.config.from_envvar(&quot;FLASK_CONFIG&quot;)</code>就可以，当然使用 <code>export</code> 设置的也只是一个临时变量，只对目前的终端有效。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> os<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br>os.environ.setdefault(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>, <span class="hljs-string">&quot;config.cfg&quot;</span>)<br><br>app.config.from_envvar(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>我比较在意的是这个 <code>silent</code> 参数， 这个参数的含义是，当配置文件丢失时，或者环境变量没有设置时，设置 <code>silent</code> 参数为 True，那么就等于没有配置这个文件。</p><p>那么可以写一个函数来检测这个配置文件是否存在，是否设置环境变量，当两个都没有时，返回 <code>True</code>，然后 <code>from_envvar</code> 方法将会不起作用，触发异常。</p><p>下面是一个简单的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_set</span>():<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.environ.get(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">elif</span> <span class="hljs-keyword">not</span> os.path.exists(<span class="hljs-string">&quot;config.cfg&quot;</span>):<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>app.config.from_envvar(<span class="hljs-string">&quot;FLASK_CONFIG&quot;</span>, silent=is_set())<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><p>针对 <code>silent</code> 参数，写出一个方法来最终决定 <code>silent</code> 的值，这样防止了中间环境变量配置出错以及文件不存在等等情况。</p><h2 id="三、-从-python-文件中读取配置属性"><a href="#三、-从-python-文件中读取配置属性" class="headerlink" title="三、 从 python 文件中读取配置属性"></a>三、 从 <code>python</code> 文件中读取配置属性</h2><p>当创建一个 <code>Flask</code> 的实例对象之后，使用 <code>app.config.from_pyfile</code> 方法，传入一个配置文件字符串，从配置文件中读取属性并且写入，前面的 <code>from_envvar</code> 方法获取到配置文件后最终也会调用这个方法，并且，这个方法最终也会调用下一个方法 <code>from_object</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_pyfile</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span></span>):<br>    filename = os.path.join(self.root_path, filename)<br>        d = types.ModuleType(<span class="hljs-string">&quot;config&quot;</span>)<br>        d.__file__ = filename<br>    <span class="hljs-keyword">try</span>:<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> config_file:<br><span class="hljs-built_in">exec</span>(<span class="hljs-built_in">compile</span>(config_file.read(), filename, <span class="hljs-string">&quot;exec&quot;</span>), d.__dict__)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">if</span> silent <span class="hljs-keyword">and</span> e.errno <span class="hljs-keyword">in</span> (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    e.strerror = <span class="hljs-string">&quot;Unable to load configuration file (%s)&quot;</span> % e.strerror<br>    <span class="hljs-keyword">raise</span><br>    self.from_object(d)<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>在项目的根目录下创建一个名为 <code>config.cfg</code> 简单配置文件。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">DEBUG</span>=<span class="hljs-string">True</span><br><span class="hljs-attr">SECRET_KEY</span>=<span class="hljs-string">&quot;something&quot;</span><br></code></pre></td></tr></table></figure><p>先看 <code>from_pyfile</code> 文件前面的三段代码， 首先使用 <code>os</code>获取配置文件的绝对路径，然后用 <code>types.ModuleType</code> 方法动态创建了一个 <code>config</code> 模块，并且设置文件名为传进来的文件名的绝对路径文件名，此时这个 <code>config</code> 算是一个模块了，不是用普通的 <code>import</code> 方法导入的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">filename = os.path.join(self.root_path, filename)<br>d = types.ModuleType(<span class="hljs-string">&quot;config&quot;</span>)<br>d.__file__ = filename<br></code></pre></td></tr></table></figure><p><code>types</code> 属于 <code>Python</code>的标准库，里面的几个常用的方法没怎么了解，有如下几个。</p><ul><li><code>FunctionType</code>：通过不使用 <code>def</code> 的方式动态创建一个函数。</li><li><code>MethodType</code>：将创建在类外的某个方法动态绑定到类的实例上。</li><li><code>ModuleType</code>：动态的创建一个临时的模块。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> sys<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> types<br><br><span class="hljs-comment"># 动态创建一个模块</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m = types.ModuleType(<span class="hljs-string">&quot;sample&quot;</span>, <span class="hljs-string">&quot;sample module.&quot;</span>)  <span class="hljs-comment"># 传入一个模块名，以及模块的文档字符串</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>m<br>&lt;module <span class="hljs-string">&#x27;sample&#x27;</span>&gt;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m.__dict__<br>&#123;<span class="hljs-string">&#x27;__name__&#x27;</span>: <span class="hljs-string">&#x27;sample&#x27;</span>, <span class="hljs-string">&#x27;__doc__&#x27;</span>: <span class="hljs-string">&#x27;sample module.&#x27;</span>, <span class="hljs-string">&#x27;__package__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__loader__&#x27;</span>: <span class="hljs-literal">None</span>, <span class="hljs-string">&#x27;__spec__&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br><span class="hljs-meta">&gt;&gt;&gt; </span>m <span class="hljs-keyword">in</span> sys.modules   <span class="hljs-comment"># 模块不包含在系统模块中</span><br><span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 动态添加类方法</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br><span class="hljs-meta">... </span>    <span class="hljs-keyword">pass</span><br><span class="hljs-meta">... </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>p = Person()<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">def</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">self</span>): <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p.say = types.MethodType(say, p)<br><span class="hljs-meta">&gt;&gt;&gt; </span>p.say()<br>hello<br><br><span class="hljs-comment"># 动态创建一个函数</span><br>&gt;&gt; foo_code = <span class="hljs-built_in">compile</span>(<span class="hljs-string">&#x27;def foo(): return &quot;bar&quot;&#x27;</span>, <span class="hljs-string">&quot;&lt;string&gt;&quot;</span>, <span class="hljs-string">&quot;exec&quot;</span>)<br>&gt;&gt; foo_func = types.FunctionType(foo_code.co_consts[<span class="hljs-number">0</span>], <span class="hljs-built_in">globals</span>(), <span class="hljs-string">&quot;foo&quot;</span>)<br>&gt;&gt; <span class="hljs-built_in">print</span>(foo_func())<br>bar<br></code></pre></td></tr></table></figure><p>继续看 <code>from_pyfile</code> 方法剩下的代码，读取配置文件的配置属性，此时把属性放进动态创建的模块的字典里头，最后是调用另一个方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename, mode=<span class="hljs-string">&quot;rb&quot;</span>) <span class="hljs-keyword">as</span> config_file:<br><span class="hljs-built_in">exec</span>(<span class="hljs-built_in">compile</span>(config_file.read(), filename, <span class="hljs-string">&quot;exec&quot;</span>), d.__dict__)<br><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">if</span> silent <span class="hljs-keyword">and</span> e.errno <span class="hljs-keyword">in</span> (errno.ENOENT, errno.EISDIR, errno.ENOTDIR):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    e.strerror = <span class="hljs-string">&quot;Unable to load configuration file (%s)&quot;</span> % e.strerror<br><span class="hljs-keyword">raise</span><br>self.from_object(d)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><h2 id="四、从-python对象中提取属性"><a href="#四、从-python对象中提取属性" class="headerlink" title="四、从 python对象中提取属性"></a>四、从 <code>python</code>对象中提取属性</h2><p>从 <code>python</code> 对象中提取配置相对简单，一般写一个配置类的 <code>python</code> 文件，里面定义一个基类，设定一些基本配置，然后使用类继承的方法为各种环境设置扩展配置类，一个简单的配置类如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Config</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    DEBUG = <span class="hljs-literal">False</span><br>    TESTING = <span class="hljs-literal">False</span><br>    DATABASE_URI = <span class="hljs-string">&#x27;sqlite://:memory:&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ProductionConfig</span>(<span class="hljs-title class_ inherited__">Config</span>):<br>    DATABASE_URI = <span class="hljs-string">&#x27;mysql://user@localhost/foo&#x27;</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DevelopmentConfig</span>(<span class="hljs-title class_ inherited__">Config</span>):<br>    DEBUG = <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestingConfig</span>(<span class="hljs-title class_ inherited__">Config</span>):<br>    TESTING = <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>之后就是在 <code>from_object</code> 方法里传入一个类名，或者一个完整的模块字符串就可以配置好配置属性。如果传入的是一个配置类，那么 <code>if isinstance(obj, string_types)</code> 直接为 <code>False</code>，然后这个传入的配置类的所有属性，如果包含大写的属性，将存入 <code>app.config</code> 的字典中。如果是字符串，那么会先把模块里面的类导入再提取属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_object</span>(<span class="hljs-params">self, obj</span>):<br>   <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(obj, string_types):<br>            obj = import_string(obj)<br>    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> <span class="hljs-built_in">dir</span>(obj):<br>        <span class="hljs-keyword">if</span> key.isupper():<br>            self[key] = <span class="hljs-built_in">getattr</span>(obj, key)<br></code></pre></td></tr></table></figure><p><code>string_types</code> ，这个变量在 <code>flask</code> 包的 <code>_compat.py</code> 下，其实就是<code>string</code> 类型，所以简单对传进来的参数检查是不是个字符串，如果是字符串，则会调用 <code>import_string</code> 方法，如果不是字符串而是一个具体的类则直接执行 <code>for</code> 循环对类的属性遍历。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:  <br>    text_type = unicode<br>    string_types = (<span class="hljs-built_in">str</span>, unicode)<br>    integer_types = (<span class="hljs-built_in">int</span>, long)<br><span class="hljs-keyword">except</span> NameError:  <br>    text_type = <span class="hljs-built_in">str</span><br>    string_types = (<span class="hljs-built_in">str</span>,)<br>    integer_types = (<span class="hljs-built_in">int</span>,)<br></code></pre></td></tr></table></figure><p>然后是 <code>import_string</code> 方法，因为传进来的仅仅是个字符串，还没对模块进行导入，所以会用到 <code>werkzeug.utils</code> 包下的 <code>import_string</code> 方法对模块进行导入。</p><p>可以看到 <code>import_string</code> 的第一行代码会对字符串进行替换，那说明有两种写法，而恰恰函数文档也说明了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">提供两种模块写法：例如</span><br><span class="hljs-string">xml.sax.saxutils.escape</span><br><span class="hljs-string">xml.sax.saxutils:escape</span><br><span class="hljs-string">无论是那种写法，最后都会变成下面这种写法</span><br><span class="hljs-string">xml.sax.saxutils.escape</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>import_name = <span class="hljs-built_in">str</span>(import_name).replace(<span class="hljs-string">&quot;:&quot;</span>, <span class="hljs-string">&quot;.&quot;</span>)<br></code></pre></td></tr></table></figure><p>接下来就是使用不寻常的导包方式，一般导包都是两种方式，<code>import package</code> 或者是 <code>from package import module</code>，因为我们这里传进来的是字符串，所以不能用正常的导包方式，只能使用 <code>__import__</code> 这个内建方法，实际上 <code>import</code> 也是调用 <code>__import__</code>。假设配置类 <code>BaseConfig</code> 在 <code>Config</code> 包下的 <code>Settings.py</code> 模块下，那么可以写为 <code>Config.Settings:BaseConfig</code>，或者 <code>Config.Settings.BaseConfig</code> ，两者的可以。最终，如果导入为空时，那么会从 <code>sys.modules</code> 里面查询这个包。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">try</span>:<br>    <span class="hljs-built_in">__import__</span>(import_name)<br><span class="hljs-keyword">except</span> ImportError:<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;.&quot;</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> import_name:<br>        <span class="hljs-keyword">raise</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">return</span> sys.modules[import_name]<br></code></pre></td></tr></table></figure><p>如果这个传入的配置类字符串为 <code>Config.Settings.BaseConfig</code>，那么先把模块名和对象名分开，再尝试使用 <code>__import__</code> 方法导入，此时已经把模块名和对象名分开了，分别把模块名和对象名传入 <code>__import__</code> 就可以正常导入。再使用 <code>getattr</code> 方法获取模块里面的对象，这个方法告一段落。最后就是把返回的对象遍历获取里面的配置属性添加到 <code>Config</code> 对象中。</p><p><code>__import_</code> 的四个参数：</p><ul><li><code>name (required)</code>: 被加载 <code>module</code> 的名称</li><li><code>globals (optional)</code> : 包含全局变量的字典，该选项很少使用，采用默认值 <code>global()</code></li><li><code>locals (optional)</code>: 包含局部变量的字典，内部标准实现未用到该变量，采用默认值 <code>local()</code></li><li><code>fromlist (Optional)</code> : 被导入的子模块名称</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">module_name, obj_name = import_name.rsplit(<span class="hljs-string">&quot;.&quot;</span>, <span class="hljs-number">1</span>)<br>module = <span class="hljs-built_in">__import__</span>(module_name, <span class="hljs-built_in">globals</span>(), <span class="hljs-built_in">locals</span>(), [obj_name])<br><span class="hljs-keyword">try</span>:<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">getattr</span>(module, obj_name)<br><span class="hljs-keyword">except</span> AttributeError <span class="hljs-keyword">as</span> e:<br>    <span class="hljs-keyword">raise</span> ImportError(e)<br></code></pre></td></tr></table></figure><p>总的来说这个方法提供了两种导入配置的选择，一种是传入模块字符串，一种是直接传入配置类。便于导入的时候选择导入方式和可扩展性。</p><h2 id="五、从-json-文件中读取配置属性到映射为字典"><a href="#五、从-json-文件中读取配置属性到映射为字典" class="headerlink" title="五、从 json 文件中读取配置属性到映射为字典"></a>五、从 <code>json</code> 文件中读取配置属性到映射为字典</h2><p>这个方法最终也会调用 <code>Config</code> 类的最后一个方法，对于这个方法而言，只是简单的读取一下 <code>json</code> 文件，并且把 <code>json</code> 文件里面的数据转化为 <code>Python</code> 当中的字典类型。同时可以设置 <code>silent</code> 为 <code>True</code>，当文件读取失败的时候，方法直接失效，如果不设置为 <code>True</code> 的话，也可以，直接触发标准错误。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_json</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span></span>):<br>    filename = os.path.join(self.root_path, filename)<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> json_file:<br>            obj = json.loads(json_file.read())<br><span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br><span class="hljs-keyword">if</span> silent <span class="hljs-keyword">and</span> e.errno <span class="hljs-keyword">in</span> (errno.ENOENT, errno.EISDIR):<br><span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>e.strerror = <span class="hljs-string">&quot;Unable to load configuration file (%s)&quot;</span> % e.strerror<br><span class="hljs-keyword">raise</span><br><span class="hljs-keyword">return</span> self.from_mapping(obj)<br></code></pre></td></tr></table></figure><p>在项目的根目录下创建一个名为 <code>config.json</code> 的配置文件。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;DEBUG&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;True&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;SECRET_KEY&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;something&quot;</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure><p>示例代码，当程序启动时，打开 <code>http://127.0.0.1:5000/</code> 就可以看到 <code>DEBUG</code> 和 <code>SECRET_KEY </code>的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br>app.config.from_json(<span class="hljs-string">&quot;config.json&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br>    <span class="hljs-built_in">print</span>(app.config.items())<br></code></pre></td></tr></table></figure><h2 id="六、从-python-键值对-dict-中配置属性"><a href="#六、从-python-键值对-dict-中配置属性" class="headerlink" title="六、从 python 键值对 ( dict ) 中配置属性"></a>六、从 <code>python</code> 键值对 <code>( dict )</code> 中配置属性</h2><p>设置一个简单的字典对象，待会传入 <code>from_mappings</code> 方法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">configs = &#123;<br>    <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;Something&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>最后一个方法，针对传进来的键值对，也就是字典，这里对应第三个参数 <code>**kwargs</code>，使用 <code>kwargs.items()</code> 提取出所有的键值对 (列表格式) 存放进 <code>mappings</code> 列表里，然后再通过二层循环提取出每个配置的键和值，存放进 <code>Config</code> 类的里面。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_mapping</span>(<span class="hljs-params">self, *mapping, **kwargs</span>):<br>            mappings = []<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(mapping) == <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">hasattr</span>(mapping[<span class="hljs-number">0</span>], <span class="hljs-string">&quot;items&quot;</span>):<br>            mappings.append(mapping[<span class="hljs-number">0</span>].items())<br>        <span class="hljs-keyword">else</span>:<br>            mappings.append(mapping[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(mapping) &gt; <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">raise</span> TypeError(<br>            <span class="hljs-string">&quot;expected at most 1 positional argument, got %d&quot;</span> % <span class="hljs-built_in">len</span>(mapping)<br>        )<br>    mappings.append(kwargs.items())<br>    <span class="hljs-keyword">for</span> mapping <span class="hljs-keyword">in</span> mappings:<br>        <span class="hljs-keyword">for</span> (key, value) <span class="hljs-keyword">in</span> mapping:<br>            <span class="hljs-keyword">if</span> key.isupper():<br>                self[key] = value<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p>例子示范，当启动程序时，在浏览器进入 <code>http://127.0.0.1:5000/</code> 就能看到 <code>DEBUG</code> 和 <code>SECRET_KEY</code> 的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br>configs = &#123;<br>    <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">True</span>,<br>    <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;Something&quot;</span><br>&#125;<br><br>app.config.from_mappings(configs)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br>    <span class="hljs-built_in">print</span>(app.config.items())<br></code></pre></td></tr></table></figure><p>然后这个方法还提供另一种细化的使用，上面只是传入了第三个参数，第二个参数还没使用，显然这个函数是会使用到第二参数，那么这个参数格式有几种写法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python">mapping = (<br>    &#123;<br>        <span class="hljs-string">&quot;DEBUG&quot;</span>: <span class="hljs-literal">True</span>,<br>        <span class="hljs-string">&quot;SECRET_KEY&quot;</span>: <span class="hljs-string">&quot;Something&quot;</span><br>    &#125;<br>)<br><span class="hljs-comment"># 直接执行 mappings.append(mapping[0])</span><br><br>mapping = (<br>    (<span class="hljs-string">&#x27;DEBUG&#x27;</span>, <span class="hljs-literal">True</span>),<br>    (<span class="hljs-string">&#x27;TESTING&#x27;</span>, <span class="hljs-literal">False</span>)<br>)<br><span class="hljs-comment"># 传入元祖，直接执行 mappings.append(mapping[0])</span><br></code></pre></td></tr></table></figure><p>此时就不需要传入第三个参数，也就是说这个方法提供两种参数传入方式，也方便扩展，如果单纯使用键值对，那么前面的代码将不会被执行，如果使用 <code>tuple</code> ，也会对这个参数进行操作，提取里面的属性值。</p><h2 id="七、自定义读取-yaml-x2F-properties-配置文件"><a href="#七、自定义读取-yaml-x2F-properties-配置文件" class="headerlink" title="七、自定义读取 yaml&#x2F;properties 配置文件"></a>七、自定义读取 yaml&#x2F;properties 配置文件</h2><p>上面提到可以用 <code>types.MethodType</code> 来创建动态方法，这里就可以利用这个来为 <code>config</code> 扩展读取更多类型的配置文件。</p><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> types<br><br><span class="hljs-comment"># 创建一个 Person 类，此时类里还没有任何方法</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>:<br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">say</span>(<span class="hljs-params">self, name</span>):<br>    self.name = name<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;hello&quot;</span>, name)<br>    p = Person()<br><br><span class="hljs-comment"># 强行把方法赋值到实例对象上</span><br>p.say = say<br>p.say(name=<span class="hljs-string">&quot;nick&quot;</span>)<br><span class="hljs-comment"># 报错</span><br><span class="hljs-comment"># say() missing 1 required positional argument: &#x27;self&#x27;</span><br><br>p.say = types.MethodType(say, p)<br>p.say(name=<span class="hljs-string">&quot;nick&quot;</span>)<br><span class="hljs-comment"># result: hello nick</span><br></code></pre></td></tr></table></figure><p>创建一个名为 <code>config.yaml</code> 的配置文件，写入两个简单的配置项。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">DEBUG:</span> <span class="hljs-literal">True</span><br><span class="hljs-attr">SECRET_KEY:</span> <span class="hljs-string">something</span><br></code></pre></td></tr></table></figure><p>读取 <code>yaml</code> 文件，编写读取 <code>yaml</code> 文件方法，利用了 <code>pyyaml</code> 库，使用 <code>yaml</code> 读取出来的数据是字典格式，然后传递给 <code>Config</code> 对象的 <code>from_mapping</code> 方法，然后利用 <code>types.MethodType</code> 方法为 <code>Config</code> 类动态添加方法，绑定在 <code>config</code> 对象上。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br><span class="hljs-keyword">import</span> types<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> yaml<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_yaml</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span></span>):<br>    filename = os.path.join(self.root_path, filename)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> yaml_file:<br>            obj = yaml.load(yaml_file.read(), Loader=yaml.FullLoader)<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> silent:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> self.from_mapping(obj)<br><br><span class="hljs-comment"># MethodType 方法第一个参数是需要动态添加的方法名，第二个参数是类的实例对象。</span><br>app.config.from_yaml = types.MethodType(from_yaml, app.config)<br>app.config.from_yaml(<span class="hljs-string">&quot;config.yaml&quot;</span>)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;DEBUG %s SECRET_KEY %s&quot;</span> % (app.config.get(<span class="hljs-string">&quot;DEBUG&quot;</span>), app.config.get(<span class="hljs-string">&quot;SECRET_KEY&quot;</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    app.run()<br>    <span class="hljs-built_in">print</span>(app.config.items())<br></code></pre></td></tr></table></figure><p>创建一个名为 <code>config.properties</code> 的简单配置文件，写入以下简单配置项。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">DEBUG</span>=<span class="hljs-string">True</span><br><span class="hljs-attr">SECRET_KEY</span>=<span class="hljs-string">something</span><br></code></pre></td></tr></table></figure><p>创建一个读取 <code>from_properties</code> 方法， 这个方法遍历 <code>properties</code> 文件的每一行，把 <code>=</code> 两边的属性名和属性值放进 <code>obj</code> 中，最终会调用现有的 <code>from_mapping</code> 方法，最后还是要利用 <code>types.MethodType</code> 方法为 <code>Config</code> 类动态添加方法，绑定在 <code>config</code> 对象上，这样这个方法才会起作用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python">app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">from_properties</span>(<span class="hljs-params">self, filename, silent=<span class="hljs-literal">False</span>, encode=<span class="hljs-literal">None</span></span>):<br>    filename = os.path.join(self.root_path, filename)<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filename) <span class="hljs-keyword">as</span> properties_file:<br>            obj = &#123;&#125;<br>            <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> properties_file:<br>                <span class="hljs-keyword">if</span> line.find(<span class="hljs-string">&#x27;=&#x27;</span>) &gt; <span class="hljs-number">0</span>:<br>                    s = line.replace(<span class="hljs-string">&#x27;\n&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>).split(<span class="hljs-string">&quot;=&quot;</span>)<br>                    obj[s[<span class="hljs-number">0</span>]] = s[<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">except</span> IOError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">if</span> silent:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>    <span class="hljs-keyword">return</span> self.from_mapping(obj)<br><br>app.config.from_properties = types.MethodType(from_properties, app.config)<br>app.config.from_properties(<span class="hljs-string">&quot;config.properties&quot;</span>)<br></code></pre></td></tr></table></figure><p>当然，这两个方法可能也有不完善的地方，例如，<code>yaml</code> 文件可能是多层级的，这里只考虑到一层级，什么时候下才会出现多层级的配置项，例如，可以在一个 <code>yaml</code> 文件里面设置多个环境配置，开发环境配置，生产环境配置，部署环境配置等。</p><ul><li><input checked="" disabled="" type="checkbox"> <code>yaml</code> 方法修改。</li><li><input checked="" disabled="" type="checkbox"> 实例代码上传至 <code>github</code></li></ul>]]></content>
    
    
    <categories>
      
      <category>后端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Flask</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
